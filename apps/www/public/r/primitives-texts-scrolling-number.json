{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-texts-scrolling-number",
  "type": "registry:ui",
  "title": "Scrolling Number",
  "description": "A scrolling number animation.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/hooks-use-is-in-view"
  ],
  "files": [
    {
      "path": "registry/primitives/texts/scrolling-number/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { WithAsChild } from '../../animate/slot';\nimport { useStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\nconst formatter = new Intl.NumberFormat('en-US');\n\nfunction generateRange(\n  max: number,\n  step: number,\n  sideItemsCount: number,\n): number[] {\n  const result: number[] = [];\n  const end = max + sideItemsCount * step;\n  for (let value = end; value >= 0; value -= step) {\n    result.push(value);\n  }\n  return result;\n}\n\ntype ScrollingNumberContextType = {\n  itemsHeight: number;\n  sideItemsCount: number;\n  displayedItemsCount: number;\n  isInView: boolean;\n};\n\nconst [ScrollingNumberProvider, useScrollingNumber] =\n  useStrictContext<ScrollingNumberContextType>('ScrollingNumberContext');\n\ntype ScrollingNumberContainerProps = React.ComponentProps<'div'> & {\n  itemsHeight?: number;\n  sideItemsCount?: number;\n} & UseIsInViewOptions;\n\nfunction ScrollingNumberContainer({\n  ref,\n  itemsHeight = 30,\n  sideItemsCount = 2,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  style,\n  ...props\n}: ScrollingNumberContainerProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const displayedItemsCount = 1 + sideItemsCount * 2;\n\n  return (\n    <ScrollingNumberProvider\n      value={{ itemsHeight, sideItemsCount, displayedItemsCount, isInView }}\n    >\n      <div\n        ref={localRef}\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n          height: itemsHeight * displayedItemsCount,\n          ...style,\n        }}\n        {...props}\n      />\n    </ScrollingNumberProvider>\n  );\n}\n\ntype ScrollingNumberDirection = 'ltr' | 'rtl' | 'ttb' | 'btt';\n\ntype ScrollingNumberProps = WithAsChild<\n  {\n    number: number;\n    step: number;\n    delay?: number;\n    direction?: ScrollingNumberDirection;\n    onCompleted?: () => void;\n  },\n  HTMLMotionProps<'div'>\n>;\n\nfunction ScrollingNumber({\n  number,\n  step,\n  transition = { stiffness: 90, damping: 30 },\n  delay = 0,\n  direction = 'btt',\n  onCompleted,\n}: ScrollingNumberProps) {\n  const { itemsHeight, sideItemsCount, displayedItemsCount, isInView } =\n    useScrollingNumber();\n\n  const range = React.useMemo(\n    () => generateRange(number, step, sideItemsCount),\n    [number, step, sideItemsCount],\n  );\n\n  const initialY = -(itemsHeight * sideItemsCount);\n  const finalY = itemsHeight * (range.length - displayedItemsCount);\n\n  const yMotion = useMotionValue(initialY);\n  const ySpring = useSpring(yMotion, transition);\n\n  React.useEffect(() => {\n    if (!isInView) return;\n    const timer = setTimeout(() => {\n      yMotion.set(finalY);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [isInView, finalY, yMotion, delay]);\n\n  const currentIndex = useTransform(\n    ySpring,\n    (y) => y / itemsHeight + sideItemsCount,\n  );\n  const currentValue = useTransform(currentIndex, (idx) => idx * step);\n  const completedTransform = useTransform(\n    currentValue,\n    (val) => val >= number * 0.99,\n  );\n\n  React.useEffect(() => {\n    const unsubscribe = completedTransform.on('change', (latest) => {\n      if (latest) onCompleted?.();\n    });\n    return unsubscribe;\n  }, [completedTransform]);\n\n  const directionMap: Record<\n    ScrollingNumberDirection,\n    React.CSSProperties['flexDirection']\n  > = {\n    btt: 'column',\n    ttb: 'column-reverse',\n    ltr: 'row',\n    rtl: 'row-reverse',\n  };\n\n  return (\n    <motion.div\n      style={{\n        position: 'absolute',\n        bottom: 0,\n        display: 'flex',\n        flexDirection: directionMap[direction],\n        y: ySpring,\n      }}\n    >\n      {range.map((value) => (\n        <div key={value} style={{ height: itemsHeight }}>\n          {formatter.format(value)}\n        </div>\n      ))}\n    </motion.div>\n  );\n}\n\nexport {\n  ScrollingNumberContainer,\n  ScrollingNumber,\n  useScrollingNumber,\n  type ScrollingNumberContainerProps,\n  type ScrollingNumberProps,\n  type ScrollingNumberDirection,\n  type ScrollingNumberContextType,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/texts/scrolling-number.tsx"
    }
  ]
}