{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-effects-particles",
  "type": "registry:ui",
  "title": "Particles",
  "description": "A particles effect that creates a particle system.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/primitives-animate-slot",
    "https://animate-ui.com/r/hooks-use-is-in-view"
  ],
  "files": [
    {
      "path": "registry/primitives/effects/particles/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\ntype Align = 'start' | 'center' | 'end';\n\ntype ParticlesProps = WithAsChild<\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    children: React.ReactNode;\n  }\n>;\n\nfunction Particles({\n  asChild = false,\n  children,\n  style,\n  ...props\n}: ParticlesProps) {\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component style={{ position: 'relative', ...style }} {...props}>\n      {children}\n    </Component>\n  );\n}\n\ntype ParticlesEffectProps = Omit<HTMLMotionProps<'div'>, 'children'> & {\n  animate?: boolean;\n  side?: Side;\n  align?: Align;\n  count?: number;\n  radius?: number;\n  spread?: number;\n  duration?: number;\n  holdDelay?: number;\n};\n\nfunction ParticlesEffect({\n  animate = true,\n  side = 'top',\n  align = 'center',\n  count = 6,\n  radius = 30,\n  spread = 360,\n  duration = 0.8,\n  holdDelay = 0.05,\n  transition,\n  style,\n  ...props\n}: ParticlesEffectProps) {\n  const containerStyle: React.CSSProperties = {\n    position: 'absolute',\n    transform: 'translate(-50%, -50%)',\n    top: side === 'top' ? '0%' : side === 'bottom' ? '100%' : '50%',\n    left: side === 'left' ? '0%' : side === 'right' ? '100%' : '50%',\n  };\n\n  if (side === 'top' || side === 'bottom') {\n    containerStyle.left =\n      align === 'start' ? '0%' : align === 'end' ? '100%' : '50%';\n  } else {\n    containerStyle.top =\n      align === 'start' ? '0%' : align === 'end' ? '100%' : '50%';\n  }\n\n  const angleStep = (spread * (Math.PI / 180)) / Math.max(1, count - 1 || 1);\n\n  return (\n    <AnimatePresence>\n      {animate &&\n        [...Array(count)].map((_, i) => {\n          const angle = i * angleStep;\n          const x = Math.cos(angle) * radius;\n          const y = Math.sin(angle) * radius;\n\n          return (\n            <motion.div\n              key={i}\n              style={{ ...containerStyle, ...style }}\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{\n                x: `${x}px`,\n                y: `${y}px`,\n                scale: [0, 1, 0],\n                opacity: [0, 1, 0],\n              }}\n              transition={{\n                duration,\n                delay: i * holdDelay,\n                ease: 'easeOut',\n                ...transition,\n              }}\n              {...props}\n            />\n          );\n        })}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Particles,\n  ParticlesEffect,\n  type ParticlesProps,\n  type ParticlesEffectProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/effects/particles.tsx"
    }
  ]
}