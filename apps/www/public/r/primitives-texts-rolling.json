{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-texts-rolling",
  "type": "registry:ui",
  "title": "Rolling Text",
  "description": "A rolling text animation.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/hooks-use-is-in-view"
  ],
  "files": [
    {
      "path": "registry/primitives/texts/rolling/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\nconst formatCharacter = (char: string) => (char === ' ' ? '\\u00A0' : char);\n\nconst CHAR_STYLE: React.CSSProperties = {\n  position: 'absolute',\n  display: 'inline-block',\n  backfaceVisibility: 'hidden',\n};\n\ntype RollingTextProps = Omit<React.ComponentProps<'span'>, 'children'> & {\n  text: string;\n  transition?: Transition;\n} & UseIsInViewOptions;\n\nfunction RollingText({\n  ref,\n  text,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  transition = { duration: 0.5, delay: 0.1, ease: 'easeOut' },\n  ...props\n}: RollingTextProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n  const start = React.useMemo(\n    () => (isInView && inView) || !inView,\n    [isInView, inView],\n  );\n  const characters = React.useMemo(() => text.split(''), [text]);\n\n  return (\n    <span ref={localRef} data-slot=\"rolling-text\" {...props}>\n      {characters.map((char, idx) => (\n        <span\n          key={idx}\n          style={{\n            position: 'relative',\n            display: 'inline-block',\n            perspective: '9999999px',\n            transformStyle: 'preserve-3d',\n            width: 'auto',\n          }}\n          aria-hidden=\"true\"\n        >\n          <motion.span\n            style={{\n              ...CHAR_STYLE,\n              transformOrigin: '50% 25%',\n            }}\n            initial={{ rotateX: 0 }}\n            animate={start ? { rotateX: 90 } : undefined}\n            transition={{\n              ...transition,\n              delay: idx * (transition?.delay ?? 0),\n            }}\n          >\n            {formatCharacter(char)}\n          </motion.span>\n          <motion.span\n            style={{\n              ...CHAR_STYLE,\n              transformOrigin: '50% 100%',\n            }}\n            initial={{ rotateX: 90 }}\n            animate={start ? { rotateX: 0 } : undefined}\n            transition={{\n              ...transition,\n              delay: idx * (transition?.delay ?? 0) + 0.3,\n            }}\n          >\n            {formatCharacter(char)}\n          </motion.span>\n          <span style={{ visibility: 'hidden' }}>{formatCharacter(char)}</span>\n        </span>\n      ))}\n\n      <span className=\"sr-only\">{text}</span>\n    </span>\n  );\n}\n\nexport { RollingText, type RollingTextProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/texts/rolling.tsx"
    }
  ]
}