{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-animate-slot",
  "type": "registry:ui",
  "title": "Animate Slot",
  "description": "A slot component that allows you to use motion components with any element.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/primitives/animate/slot/index.tsx",
      "content": "import * as React from 'react';\nimport { motion, isMotionComponent, type HTMLMotionProps } from 'motion/react';\n\ntype AnyProps = Record<string, unknown>;\n\ntype DOMMotionProps<T extends HTMLElement = HTMLElement> = Omit<\n  HTMLMotionProps<'div'>,\n  'ref'\n> & {\n  ref?: React.Ref<T>;\n};\n\ntype WithAsChild<Base extends object, Default extends object> =\n  | (Base & Default & { asChild: true; children: React.ReactElement })\n  | (Base &\n      Default & {\n        asChild?: false | undefined;\n      });\n\ntype SlotProps<T extends HTMLElement = HTMLElement> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  children?: any;\n} & DOMMotionProps<T>;\n\nfunction Slot<T extends HTMLElement = HTMLElement>({\n  children,\n  ref: outerRef,\n  ...motionProps\n}: SlotProps<T>) {\n  if (!React.isValidElement(children)) return null;\n\n  const isAlreadyMotion =\n    typeof children.type === 'object' &&\n    children.type !== null &&\n    isMotionComponent(children.type);\n\n  const Base = isAlreadyMotion\n    ? (children.type as React.ElementType)\n    : motion(children.type as React.ElementType);\n\n  const { ref: childRef, ...childProps } = children.props as AnyProps;\n  const ref = React.useImperativeHandle(outerRef, () => childRef as T);\n\n  return <Base {...childProps} {...motionProps} ref={ref} />;\n}\n\nexport {\n  Slot,\n  type SlotProps,\n  type WithAsChild,\n  type DOMMotionProps,\n  type AnyProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/animate/slot.tsx"
    }
  ]
}