{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-animate-tooltip",
  "type": "registry:ui",
  "title": "Tooltip",
  "description": "An animated tooltip that shows contextual info on hover or focus and smoothly glides to the next element without disappearing between transitions.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/primitives-animate-slot",
    "https://animate-ui.com/r/hooks-use-strict-context"
  ],
  "files": [
    {
      "path": "registry/primitives/animate/tooltip/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  motion,\n  AnimatePresence,\n  LayoutGroup,\n  type Transition,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport { useStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\n\ntype Align = 'start' | 'center' | 'end';\n\ntype TooltipData = {\n  rect: DOMRect;\n  side: Side;\n  sideOffset: number;\n  align: Align;\n  alignOffset: number;\n  id: string;\n};\n\ntype GlobalTooltipContextType = {\n  showTooltip: (data: TooltipData) => void;\n  hideTooltip: () => void;\n  currentTooltip: TooltipData | null;\n  globalId: string;\n};\n\nconst [GlobalTooltipProvider, useGlobalTooltip] =\n  useStrictContext<GlobalTooltipContextType>('GlobalTooltipContext');\n\ntype TooltipContextType = {\n  side: Side;\n  sideOffset: number;\n  align: Align;\n  alignOffset: number;\n  id: string;\n  position: TooltipPosition | null;\n};\n\nconst [LocalTooltipProvider, useTooltip] =\n  useStrictContext<TooltipContextType>('TooltipContext');\n\ntype TooltipPosition = {\n  x: number;\n  y: number;\n  transform: string;\n  initial: { x?: number; y?: number };\n};\n\nfunction getTooltipPosition({\n  rect,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n  transitionOffset = 15,\n}: {\n  rect: DOMRect;\n  side: Side;\n  sideOffset: number;\n  align: Align;\n  alignOffset: number;\n  transitionOffset?: number;\n}): TooltipPosition {\n  switch (side) {\n    case 'top':\n      if (align === 'start') {\n        return {\n          x: rect.left + alignOffset,\n          y: rect.top - sideOffset,\n          transform: 'translate(0, -100%)',\n          initial: { y: transitionOffset },\n        };\n      } else if (align === 'end') {\n        return {\n          x: rect.right + alignOffset,\n          y: rect.top - sideOffset,\n          transform: 'translate(-100%, -100%)',\n          initial: { y: transitionOffset },\n        };\n      } else {\n        // center\n        return {\n          x: rect.left + rect.width / 2,\n          y: rect.top - sideOffset,\n          transform: 'translate(-50%, -100%)',\n          initial: { y: transitionOffset },\n        };\n      }\n    case 'bottom':\n      if (align === 'start') {\n        return {\n          x: rect.left + alignOffset,\n          y: rect.bottom + sideOffset,\n          transform: 'translate(0, 0)',\n          initial: { y: -transitionOffset },\n        };\n      } else if (align === 'end') {\n        return {\n          x: rect.right + alignOffset,\n          y: rect.bottom + sideOffset,\n          transform: 'translate(-100%, 0)',\n          initial: { y: -transitionOffset },\n        };\n      } else {\n        // center\n        return {\n          x: rect.left + rect.width / 2,\n          y: rect.bottom + sideOffset,\n          transform: 'translate(-50%, 0)',\n          initial: { y: -transitionOffset },\n        };\n      }\n    case 'left':\n      if (align === 'start') {\n        return {\n          x: rect.left - sideOffset,\n          y: rect.top + alignOffset,\n          transform: 'translate(-100%, 0)',\n          initial: { x: transitionOffset },\n        };\n      } else if (align === 'end') {\n        return {\n          x: rect.left - sideOffset,\n          y: rect.bottom + alignOffset,\n          transform: 'translate(-100%, -100%)',\n          initial: { x: transitionOffset },\n        };\n      } else {\n        // center\n        return {\n          x: rect.left - sideOffset,\n          y: rect.top + rect.height / 2,\n          transform: 'translate(-100%, -50%)',\n          initial: { x: transitionOffset },\n        };\n      }\n    case 'right':\n      if (align === 'start') {\n        return {\n          x: rect.right + sideOffset,\n          y: rect.top + alignOffset,\n          transform: 'translate(0, 0)',\n          initial: { x: -transitionOffset },\n        };\n      } else if (align === 'end') {\n        return {\n          x: rect.right + sideOffset,\n          y: rect.bottom + alignOffset,\n          transform: 'translate(0, -100%)',\n          initial: { x: -transitionOffset },\n        };\n      } else {\n        // center\n        return {\n          x: rect.right + sideOffset,\n          y: rect.top + rect.height / 2,\n          transform: 'translate(0, -50%)',\n          initial: { x: -transitionOffset },\n        };\n      }\n  }\n}\n\ntype TooltipProviderProps = {\n  children: React.ReactNode;\n  openDelay?: number;\n  closeDelay?: number;\n  transition?: Transition;\n};\n\nfunction TooltipProvider({\n  children,\n  openDelay = 700,\n  closeDelay = 300,\n}: TooltipProviderProps) {\n  const globalId = React.useId();\n  const [currentTooltip, setCurrentTooltip] =\n    React.useState<TooltipData | null>(null);\n  const timeoutRef = React.useRef<number>(null);\n  const lastCloseTimeRef = React.useRef<number>(0);\n\n  const showTooltip = React.useCallback(\n    (data: TooltipData) => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n      if (currentTooltip !== null) {\n        setCurrentTooltip(data);\n        return;\n      }\n      const now = Date.now();\n      const delay = now - lastCloseTimeRef.current < closeDelay ? 0 : openDelay;\n      timeoutRef.current = window.setTimeout(\n        () => setCurrentTooltip(data),\n        delay,\n      );\n    },\n    [openDelay, closeDelay, currentTooltip],\n  );\n\n  const hideTooltip = React.useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      setCurrentTooltip(null);\n      lastCloseTimeRef.current = Date.now();\n    }, closeDelay);\n  }, [closeDelay]);\n\n  const hideImmediate = React.useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    setCurrentTooltip(null);\n    lastCloseTimeRef.current = Date.now();\n  }, []);\n\n  React.useEffect(() => {\n    window.addEventListener('scroll', hideImmediate, true);\n    return () => window.removeEventListener('scroll', hideImmediate, true);\n  }, [hideImmediate]);\n\n  return (\n    <GlobalTooltipProvider\n      value={{\n        showTooltip,\n        hideTooltip,\n        currentTooltip,\n        globalId,\n      }}\n    >\n      <LayoutGroup>{children}</LayoutGroup>\n      <TooltipOverlay />\n    </GlobalTooltipProvider>\n  );\n}\n\ntype TooltipProps = {\n  children: React.ReactNode;\n  side?: Side;\n  sideOffset?: number;\n  align?: Align;\n  alignOffset?: number;\n  transitionOffset?: number;\n};\n\nfunction Tooltip({\n  children,\n  side = 'top',\n  sideOffset = 14,\n  align = 'center',\n  alignOffset = 0,\n  transitionOffset = 15,\n}: TooltipProps) {\n  const id = React.useId();\n  const { currentTooltip } = useGlobalTooltip();\n\n  const position = React.useMemo(() => {\n    if (!currentTooltip) return null;\n    return getTooltipPosition({\n      rect: currentTooltip.rect,\n      side: currentTooltip.side,\n      sideOffset: currentTooltip.sideOffset,\n      align: currentTooltip.align,\n      alignOffset: currentTooltip.alignOffset,\n      transitionOffset,\n    });\n  }, [currentTooltip]);\n\n  return (\n    <LocalTooltipProvider\n      value={{\n        side,\n        sideOffset,\n        align,\n        alignOffset,\n        id,\n        position,\n      }}\n    >\n      {children}\n    </LocalTooltipProvider>\n  );\n}\n\ntype TooltipArrowProps = React.ComponentProps<'div'>;\n\nfunction TooltipArrow({ style, ...props }: TooltipArrowProps) {\n  const { currentTooltip } = useGlobalTooltip();\n  const { id, side, align } = useTooltip();\n\n  return (\n    <div\n      data-slot=\"tooltip-arrow\"\n      data-side={side}\n      data-state={currentTooltip?.id === id ? 'open' : 'closed'}\n      data-align={align}\n      style={{ position: 'absolute', ...style }}\n      {...props}\n    />\n  );\n}\n\ntype TooltipPortalProps = {\n  children: React.ReactNode;\n};\n\nfunction TooltipPortal({ children }: TooltipPortalProps) {\n  const { currentTooltip } = useGlobalTooltip();\n  const { position } = useTooltip();\n\n  const [isMounted, setIsMounted] = React.useState(false);\n  React.useEffect(() => setIsMounted(true), []);\n\n  return isMounted ? (\n    <AnimatePresence>\n      {currentTooltip && position && createPortal(children, document.body)}\n    </AnimatePresence>\n  ) : null;\n}\n\ntype TooltipOverlayProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction TooltipOverlay({\n  asChild = false,\n  style,\n  ...props\n}: TooltipOverlayProps) {\n  const { currentTooltip } = useGlobalTooltip();\n  const { id, side, align } = useTooltip();\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      data-slot=\"tooltip-overlay\"\n      data-state={currentTooltip?.id === id ? 'open' : 'closed'}\n      data-side={side}\n      data-align={align}\n      style={{\n        position: 'fixed',\n        inset: 0,\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype TooltipContentProps = WithAsChild<\n  HTMLMotionProps<'div'> & {\n    children: React.ReactNode;\n  }\n>;\n\nfunction TooltipContent({\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  asChild = false,\n  style,\n  ...props\n}: TooltipContentProps) {\n  const { globalId, currentTooltip } = useGlobalTooltip();\n  const { position, id, side, align } = useTooltip();\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      layoutId={`tooltip-content-${globalId}`}\n      initial={{ opacity: 0, scale: 0, ...position?.initial }}\n      animate={{ opacity: 1, scale: 1, x: 0, y: 0 }}\n      exit={{ opacity: 0, scale: 0, ...position?.initial }}\n      style={{\n        top: position?.y,\n        left: position?.x,\n        transform: position?.transform,\n        ...style,\n      }}\n      transition={transition}\n      data-slot=\"tooltip-content\"\n      data-state={currentTooltip?.id === id ? 'open' : 'closed'}\n      data-side={side}\n      data-align={align}\n      {...props}\n    />\n  );\n}\n\ntype TooltipTriggerProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction TooltipTrigger({\n  onMouseEnter,\n  onMouseLeave,\n  onFocus,\n  onBlur,\n  asChild = false,\n  ...props\n}: TooltipTriggerProps) {\n  const { side, sideOffset, align, alignOffset, id } = useTooltip();\n  const { showTooltip, hideTooltip, currentTooltip } = useGlobalTooltip();\n  const localRef = React.useRef<HTMLDivElement>(null);\n\n  const handleOpen = React.useCallback(() => {\n    if (!localRef.current) return;\n    const rect = localRef.current.getBoundingClientRect();\n    showTooltip({\n      rect,\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      id,\n    });\n  }, [showTooltip, side, sideOffset, align, alignOffset, id]);\n\n  const handleMouseEnter = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      onMouseEnter?.(e);\n      handleOpen();\n    },\n    [handleOpen, onMouseEnter],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      onMouseLeave?.(e);\n      hideTooltip();\n    },\n    [hideTooltip, onMouseLeave],\n  );\n\n  const handleFocus = React.useCallback(\n    (e: React.FocusEvent<HTMLDivElement>) => {\n      onFocus?.(e);\n      handleOpen();\n    },\n    [handleOpen, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (e: React.FocusEvent<HTMLDivElement>) => {\n      onBlur?.(e);\n      hideTooltip();\n    },\n    [hideTooltip, onBlur],\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      data-slot=\"tooltip-trigger\"\n      data-state={currentTooltip?.id === id ? 'open' : 'closed'}\n      data-side={side}\n      data-align={align}\n      {...props}\n    />\n  );\n}\n\nexport {\n  TooltipProvider,\n  Tooltip,\n  TooltipPortal,\n  TooltipOverlay,\n  TooltipContent,\n  TooltipTrigger,\n  TooltipArrow,\n  useGlobalTooltip,\n  useTooltip,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipOverlayProps,\n  type TooltipPortalProps,\n  type TooltipContentProps,\n  type TooltipTriggerProps,\n  type TooltipArrowProps,\n  type GlobalTooltipContextType,\n  type TooltipContextType,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/animate/tooltip.tsx"
    }
  ]
}