{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "primitives-radix-hover-card",
  "type": "registry:ui",
  "title": "Radix Hover Card",
  "description": "For sighted users to preview content available behind a link.",
  "dependencies": [
    "motion",
    "radix-ui"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/hooks-use-controlled-state",
    "https://animate-ui.com/r/hooks-use-strict-context"
  ],
  "files": [
    {
      "path": "registry/primitives/radix/hover-card/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { HoverCard as HoverCardPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { useStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype HoverCardContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [HoverCardProvider, useHoverCard] =\n  useStrictContext<HoverCardContextType>('HoverCardContext');\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\n\nconst getInitialPosition = (side: Side, offset: number) => {\n  const axisMap = { top: 'y', bottom: 'y', left: 'x', right: 'x' } as const;\n  const sign = side === 'top' || side === 'left' ? 1 : -1;\n  return { [axisMap[side]]: sign * offset };\n};\n\ntype HoverCardProps = React.ComponentProps<typeof HoverCardPrimitive.Root>;\n\nfunction HoverCard(props: HoverCardProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <HoverCardProvider value={{ isOpen, setIsOpen }}>\n      <HoverCardPrimitive.Root\n        data-slot=\"hover-card\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </HoverCardProvider>\n  );\n}\n\ntype HoverCardTriggerProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Trigger\n>;\n\nfunction HoverCardTrigger(props: HoverCardTriggerProps) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  );\n}\n\ntype HoverCardPortalProps = Omit<\n  React.ComponentProps<typeof HoverCardPrimitive.Portal>,\n  'forceMount'\n>;\n\nfunction HoverCardPortal(props: HoverCardPortalProps) {\n  const { isOpen } = useHoverCard();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <HoverCardPrimitive.Portal\n          forceMount\n          data-slot=\"hover-card-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype HoverCardContentProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Content\n> &\n  HTMLMotionProps<'div'> & {\n    transitionOffset?: number;\n  };\n\nfunction HoverCardContent({\n  align,\n  alignOffset,\n  side = 'bottom',\n  sideOffset = 4,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  transitionOffset = 15,\n  ...props\n}: HoverCardContentProps) {\n  const initialPosition = getInitialPosition(side, transitionOffset);\n\n  return (\n    <HoverCardPrimitive.Content\n      asChild\n      forceMount\n      align={align}\n      alignOffset={alignOffset}\n      side={side}\n      sideOffset={sideOffset}\n      avoidCollisions={avoidCollisions}\n      collisionBoundary={collisionBoundary}\n      collisionPadding={collisionPadding}\n      arrowPadding={arrowPadding}\n      sticky={sticky}\n      hideWhenDetached={hideWhenDetached}\n    >\n      <motion.div\n        key=\"hover-card-content\"\n        data-slot=\"hover-card-content\"\n        initial={{ opacity: 0, scale: 0.5, ...initialPosition }}\n        animate={{ opacity: 1, scale: 1, x: 0, y: 0 }}\n        exit={{ opacity: 0, scale: 0.5, ...initialPosition }}\n        transition={transition}\n        {...props}\n      />\n    </HoverCardPrimitive.Content>\n  );\n}\n\ntype HoverCardArrowProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Arrow\n>;\n\nfunction HoverCardArrow(props: HoverCardArrowProps) {\n  return <HoverCardPrimitive.Arrow data-slot=\"hover-card-arrow\" {...props} />;\n}\n\nexport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  useHoverCard,\n  type HoverCardProps,\n  type HoverCardTriggerProps,\n  type HoverCardPortalProps,\n  type HoverCardContentProps,\n  type HoverCardArrowProps,\n  type HoverCardContextType,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/primitives/radix/hover-card.tsx"
    }
  ]
}