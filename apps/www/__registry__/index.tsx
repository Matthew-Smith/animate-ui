/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.mts
// Do not edit this file directly.
import * as React from 'react';

export const index: Record<string, any> = {
  index: {
    name: 'index',
    description: '',
    type: 'registry:style',
    dependencies: [
      'tw-animate-css',
      'class-variance-authority',
      'lucide-react',
    ],
    devDependencies: undefined,
    registryDependencies: ['utils'],
    files: [],
    keywords: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
  },
  'components-animate-code': {
    name: 'components-animate-code',
    description: 'A code component that animates the code as it is written.',
    type: 'registry:ui',
    dependencies: ['next-themes'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-code-block',
      'https://animate-ui.com/r/components-buttons-copy',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/components/animate/code/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/animate/code.tsx',
        content:
          "import * as React from 'react';\nimport { useTheme } from 'next-themes';\n\nimport {\n  CodeBlock as CodeBlockPrimitive,\n  type CodeBlockProps as CodeBlockPropsPrimitive,\n} from '@/components/animate-ui/primitives/animate/code-block';\nimport { cn } from '@/lib/utils';\nimport { CopyButton } from '@/components/animate-ui/components/buttons/copy';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype CodeContextType = {\n  code: string;\n};\n\nconst [CodeProvider, useCode] =\n  getStrictContext<CodeContextType>('CodeContext');\n\ntype CodeProps = React.ComponentProps<'div'> & {\n  code: string;\n};\n\nfunction Code({ className, code, ...props }: CodeProps) {\n  return (\n    <CodeProvider value={{ code }}>\n      <div\n        className={cn(\n          'relative flex flex-col overflow-hidden border bg-accent/50 rounded-lg',\n          className,\n        )}\n        {...props}\n      />\n    </CodeProvider>\n  );\n}\n\ntype CodeHeaderProps = React.ComponentProps<'div'> & {\n  icon?: React.ElementType;\n  copyButton?: boolean;\n};\n\nfunction CodeHeader({\n  className,\n  children,\n  icon: Icon,\n  copyButton = false,\n  ...props\n}: CodeHeaderProps) {\n  const { code } = useCode();\n\n  return (\n    <div\n      className={cn(\n        'bg-accent shrink-0 gap-x-2 border-b border-border/75 dark:border-border/50 text-sm flex text-muted-foreground items-center px-4 w-full h-10',\n        className,\n      )}\n      {...props}\n    >\n      {Icon && <Icon className=\"size-4\" />}\n      {children}\n      {copyButton && (\n        <CopyButton\n          content={code}\n          size=\"xs\"\n          variant=\"ghost\"\n          className=\"ml-auto w-auto h-auto p-2 -mr-2\"\n        />\n      )}\n    </div>\n  );\n}\n\ntype CodeBlockProps = Omit<CodeBlockPropsPrimitive, 'code'> & {\n  cursor?: boolean;\n};\n\nfunction CodeBlock({ cursor, className, ...props }: CodeBlockProps) {\n  const { resolvedTheme } = useTheme();\n  const { code } = useCode();\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      ref={scrollRef}\n      className={cn('relative text-sm p-4 overflow-auto', className)}\n    >\n      <CodeBlockPrimitive\n        theme={resolvedTheme === 'dark' ? 'dark' : 'light'}\n        scrollContainerRef={scrollRef}\n        className={cn(\n          '[&>pre,_&_code]:!bg-transparent [&>pre,_&_code]:[background:transparent_!important] [&>pre,_&_code]:border-none [&_code]:!text-[13px] [&_code_.line]:!px-0',\n          cursor &&\n            \"data-[done=false]:[&_.line:last-of-type::after]:content-['|'] data-[done=false]:[&_.line:last-of-type::after]:inline-block data-[done=false]:[&_.line:last-of-type::after]:w-[1ch] data-[done=false]:[&_.line:last-of-type::after]:-translate-px\",\n          className,\n        )}\n        code={code}\n        {...props}\n      />\n    </div>\n  );\n}\n\nexport {\n  Code,\n  CodeHeader,\n  CodeBlock,\n  type CodeProps,\n  type CodeHeaderProps,\n  type CodeBlockProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/code/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-code';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-code',
  },
  'components-animate-counter': {
    name: 'components-animate-counter',
    description:
      'A numeric input control featuring increment and decrement buttons, smoothly animating number transitions using the SlidingNumber component.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-counter',
    ],
    files: [
      {
        path: 'registry/components/animate/counter/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/animate/counter.tsx',
        content:
          'import * as React from \'react\';\nimport { PlusIcon, MinusIcon } from \'lucide-react\';\n\nimport {\n  Counter as CounterPrimitive,\n  CounterNumber as CounterNumberPrimitive,\n  CounterMinusButton as CounterMinusButtonPrimitive,\n  CounterPlusButton as CounterPlusButtonPrimitive,\n  type CounterProps as CounterPropsPrimitive,\n} from \'@/components/animate-ui/primitives/animate/counter\';\nimport { cn } from \'@/lib/utils\';\nimport { Button } from \'@/components/animate-ui/components/buttons/button\';\n\ntype CounterProps = Omit<CounterPropsPrimitive, \'children\' | \'asChild\'>;\n\nfunction Counter({ className, ...props }: CounterProps) {\n  return (\n    <CounterPrimitive\n      className={cn(\'flex items-center p-1 border rounded-lg\', className)}\n      {...props}\n    >\n      <CounterMinusButtonPrimitive asChild>\n        <Button size="icon-sm" variant="accent" className="rounded-sm">\n          <MinusIcon className="size-4" />\n        </Button>\n      </CounterMinusButtonPrimitive>\n      <CounterNumberPrimitive className="px-2.5" />\n      <CounterPlusButtonPrimitive asChild>\n        <Button size="icon-sm" variant="accent" className="rounded-sm">\n          <PlusIcon className="size-4" />\n        </Button>\n      </CounterPlusButtonPrimitive>\n    </CounterPrimitive>\n  );\n}\n\nexport { Counter, type CounterProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/counter/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-counter';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-counter',
  },
  'components-animate-cursor': {
    name: 'components-animate-cursor',
    description:
      'An animated cursor component that allows you to customize both the cursor and cursor follow elements with smooth animations.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-cursor',
    ],
    files: [
      {
        path: 'registry/components/animate/cursor/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/animate/cursor.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  CursorProvider as CursorProviderPrimitive,\n  Cursor as CursorPrimitive,\n  CursorFollow as CursorFollowPrimitive,\n  CursorContainer as CursorContainerPrimitive,\n  type CursorProviderProps as CursorProviderPropsPrimitive,\n  type CursorContainerProps as CursorContainerPropsPrimitive,\n  type CursorProps as CursorPropsPrimitive,\n  type CursorFollowProps as CursorFollowPropsPrimitive,\n} from '@/components/animate-ui/primitives/animate/cursor';\nimport { cn } from '@/lib/utils';\n\ntype CursorProviderProps = Omit<CursorProviderPropsPrimitive, 'children'> &\n  CursorContainerPropsPrimitive;\n\nfunction CursorProvider({ global, ...props }: CursorProviderProps) {\n  return (\n    <CursorProviderPrimitive global={global}>\n      <CursorContainerPrimitive {...props} />\n    </CursorProviderPrimitive>\n  );\n}\n\ntype CursorProps = Omit<CursorPropsPrimitive, 'children' | 'asChild'>;\n\nfunction Cursor({ className, ...props }: CursorProps) {\n  return (\n    <CursorPrimitive asChild {...props}>\n      <svg\n        className={cn('size-6 text-foreground', className)}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 40 40\"\n      >\n        <path\n          fill=\"currentColor\"\n          d=\"M1.8 4.4 7 36.2c.3 1.8 2.6 2.3 3.6.8l3.9-5.7c1.7-2.5 4.5-4.1 7.5-4.3l6.9-.5c1.8-.1 2.5-2.4 1.1-3.5L5 2.5c-1.4-1.1-3.5 0-3.3 1.9Z\"\n        />\n      </svg>\n    </CursorPrimitive>\n  );\n}\n\ntype CursorFollowProps = Omit<CursorFollowPropsPrimitive, 'asChild'>;\n\nfunction CursorFollow({\n  className,\n  children,\n  sideOffset = 15,\n  alignOffset = 5,\n  ...props\n}: CursorFollowProps) {\n  return (\n    <CursorFollowPrimitive\n      sideOffset={sideOffset}\n      alignOffset={alignOffset}\n      asChild\n      {...props}\n    >\n      <div\n        className={cn(\n          'bg-foreground rounded-md text-background px-2 py-1 text-sm',\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </CursorFollowPrimitive>\n  );\n}\n\nexport {\n  CursorProvider,\n  Cursor,\n  CursorFollow,\n  type CursorProviderProps,\n  type CursorProps,\n  type CursorFollowProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/cursor/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-cursor';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-cursor',
  },
  'components-animate-github-stars-wheel': {
    name: 'components-animate-github-stars-wheel',
    description: 'A scrolling wheel that displays GitHub stars count.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-github-stars-wheel',
    ],
    files: [
      {
        path: 'registry/components/animate/github-stars-wheel/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/components/animate/github-stars-wheel.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { StarIcon } from 'lucide-react';\n\nimport {\n  ScrollingNumber as ScrollingNumberPrimitive,\n  ScrollingNumberContainer as ScrollingNumberContainerPrimitive,\n  ScrollingNumberItems as ScrollingNumberItemsPrimitive,\n  ScrollingNumberHighlight as ScrollingNumberHighlightPrimitive,\n  type ScrollingNumberContainerProps as ScrollingNumberContainerPrimitiveProps,\n} from '@/components/animate-ui/primitives/texts/scrolling-number';\nimport { cn } from '@/lib/utils';\nimport {\n  Particles,\n  ParticlesEffect,\n} from '@/components/animate-ui/primitives/effects/particles';\n\nfunction percentageBetween(value: number, min: number, max: number): number {\n  return ((value - min) / (max - min)) * 100;\n}\n\ntype GitHubStarsWheelProps = {\n  username?: string;\n  repo?: string;\n  direction?: 'btt' | 'ttb';\n  delay?: number;\n  value?: number;\n  step?: number;\n} & Omit<\n  ScrollingNumberContainerPrimitiveProps,\n  'direction' | 'number' | 'step'\n>;\n\nfunction GitHubStarsWheel({\n  username,\n  repo,\n  direction = 'btt',\n  itemsSize = 35,\n  sideItemsCount = 2,\n  delay = 0,\n  step = 100,\n  value,\n  className,\n  ...props\n}: GitHubStarsWheelProps) {\n  const [stars, setStars] = React.useState(value ?? 0);\n  const [currentStars, setCurrentStars] = React.useState(0);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const roundedStars = React.useMemo(\n    () => Math.round(stars / step) * step,\n    [stars, step],\n  );\n  const isCompleted = React.useMemo(\n    () => currentStars === roundedStars,\n    [currentStars, roundedStars],\n  );\n  const fillPercentage = React.useMemo(\n    () => percentageBetween(currentStars, 0, roundedStars),\n    [currentStars, roundedStars],\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined && username && repo) return;\n\n    const timeout = setTimeout(() => {\n      fetch(`https://api.github.com/repos/${username}/${repo}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data && typeof data.stargazers_count === 'number') {\n            setStars(data.stargazers_count);\n          }\n        })\n        .catch(console.error)\n        .finally(() => setIsLoading(false));\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  }, [username, repo, value]);\n\n  return (\n    !isLoading && (\n      <ScrollingNumberContainerPrimitive\n        key={direction}\n        className={cn('w-28', className)}\n        direction={direction}\n        number={roundedStars}\n        step={step}\n        itemsSize={itemsSize}\n        onNumberChange={setCurrentStars}\n        {...props}\n      >\n        <div\n          className=\"absolute top-0 left-0 w-full bg-gradient-to-t from-transparent to-background z-10\"\n          style={{\n            height: `${itemsSize * sideItemsCount}px`,\n          }}\n        />\n        <div\n          className=\"absolute bottom-0 left-0 w-full bg-gradient-to-b from-transparent to-background z-10\"\n          style={{\n            height: `${itemsSize * sideItemsCount}px`,\n          }}\n        />\n        <ScrollingNumberPrimitive delay={delay}>\n          <ScrollingNumberItemsPrimitive className=\"flex items-center justify-start pl-8\" />\n        </ScrollingNumberPrimitive>\n        <ScrollingNumberHighlightPrimitive className=\"bg-accent/40 border rounded-md size-full flex items-center pl-2\">\n          <Particles animate={isCompleted}>\n            <StarIcon\n              aria-hidden=\"true\"\n              className=\"fill-neutral-300 stroke-neutral-300 dark:fill-neutral-700 dark:stroke-neutral-700 size-4\"\n            />\n            <StarIcon\n              aria-hidden=\"true\"\n              className=\"absolute top-0 left-0 size-4 fill-yellow-500 stroke-yellow-500\"\n              style={{\n                clipPath: `inset(${100 - (isCompleted ? fillPercentage : fillPercentage - 10)}% 0 0 0)`,\n              }}\n            />\n            <ParticlesEffect\n              delay={0.5}\n              className=\"size-1 rounded-full bg-yellow-500\"\n            />\n          </Particles>\n        </ScrollingNumberHighlightPrimitive>\n      </ScrollingNumberContainerPrimitive>\n    )\n  );\n}\n\nexport { GitHubStarsWheel, type GitHubStarsWheelProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/github-stars-wheel/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-github-stars-wheel';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-github-stars-wheel',
  },
  'components-animate-tabs': {
    name: 'components-animate-tabs',
    description:
      'A set of layered sections with the same height of content—known as tab panels—that are displayed one at a time.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-animate-tabs'],
    files: [
      {
        path: 'registry/components/animate/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/animate/tabs.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Tabs as TabsPrimitive,\n  TabsList as TabsListPrimitive,\n  TabsTrigger as TabsTriggerPrimitive,\n  TabsContent as TabsContentPrimitive,\n  TabsContents as TabsContentsPrimitive,\n  TabsHighlight as TabsHighlightPrimitive,\n  TabsHighlightItem as TabsHighlightItemPrimitive,\n  type TabsProps as TabsPrimitiveProps,\n  type TabsListProps as TabsListPrimitiveProps,\n  type TabsTriggerProps as TabsTriggerPrimitiveProps,\n  type TabsContentProps as TabsContentPrimitiveProps,\n  type TabsContentsProps as TabsContentsPrimitiveProps,\n} from '@/components/animate-ui/primitives/animate/tabs';\nimport { cn } from '@/lib/utils';\n\ntype TabsProps = TabsPrimitiveProps;\n\nfunction Tabs({ className, ...props }: TabsProps) {\n  return (\n    <TabsPrimitive\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n}\n\ntype TabsListProps = TabsListPrimitiveProps;\n\nfunction TabsList({ className, ...props }: TabsListProps) {\n  return (\n    <TabsHighlightPrimitive className=\"absolute z-0 inset-0 border border-transparent rounded-md bg-background dark:border-input dark:bg-input/30 shadow-sm\">\n      <TabsListPrimitive\n        className={cn(\n          'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n          className,\n        )}\n        {...props}\n      />\n    </TabsHighlightPrimitive>\n  );\n}\n\ntype TabsTriggerProps = TabsTriggerPrimitiveProps;\n\nfunction TabsTrigger({ className, ...props }: TabsTriggerProps) {\n  return (\n    <TabsHighlightItemPrimitive value={props.value} className=\"flex-1\">\n      <TabsTriggerPrimitive\n        className={cn(\n          \"data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md w-full px-2 py-1 text-sm font-medium whitespace-nowrap transition-colors duration-500 ease-in-out focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        {...props}\n      />\n    </TabsHighlightItemPrimitive>\n  );\n}\n\ntype TabsContentsProps = TabsContentsPrimitiveProps;\n\nfunction TabsContents(props: TabsContentsProps) {\n  return <TabsContentsPrimitive {...props} />;\n}\n\ntype TabsContentProps = TabsContentPrimitiveProps;\n\nfunction TabsContent({ className, ...props }: TabsContentProps) {\n  return (\n    <TabsContentPrimitive\n      className={cn('outline-none', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-tabs',
  },
  'components-animate-tooltip': {
    name: 'components-animate-tooltip',
    description:
      'A tooltip is a small box that appears when hovering over an element.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-tooltip',
    ],
    files: [
      {
        path: 'registry/components/animate/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/animate/tooltip.tsx',
        content:
          "import * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport {\n  TooltipProvider as TooltipProviderPrimitive,\n  Tooltip as TooltipPrimitive,\n  TooltipTrigger as TooltipTriggerPrimitive,\n  TooltipContent as TooltipContentPrimitive,\n  TooltipArrow as TooltipArrowPrimitive,\n  type TooltipProviderProps as TooltipProviderPrimitiveProps,\n  type TooltipProps as TooltipPrimitiveProps,\n  type TooltipTriggerProps as TooltipTriggerPrimitiveProps,\n  type TooltipContentProps as TooltipContentPrimitiveProps,\n} from '@/components/animate-ui/primitives/animate/tooltip';\nimport { cn } from '@/lib/utils';\n\ntype TooltipProviderProps = TooltipProviderPrimitiveProps;\n\nfunction TooltipProvider({ openDelay = 0, ...props }: TooltipProviderProps) {\n  return <TooltipProviderPrimitive {...props} />;\n}\n\ntype TooltipProps = TooltipPrimitiveProps;\n\nfunction Tooltip({ sideOffset = 10, ...props }: TooltipProps) {\n  return <TooltipPrimitive sideOffset={sideOffset} {...props} />;\n}\n\ntype TooltipTriggerProps = TooltipTriggerPrimitiveProps;\n\nfunction TooltipTrigger({ ...props }: TooltipTriggerProps) {\n  return <TooltipTriggerPrimitive {...props} />;\n}\n\ntype TooltipContentProps = Omit<TooltipContentPrimitiveProps, 'asChild'> & {\n  children: React.ReactNode;\n  layout?: boolean | 'position' | 'size' | 'preserve-aspect';\n};\n\nfunction TooltipContent({\n  className,\n  children,\n  layout = 'preserve-aspect',\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipContentPrimitive\n      className={cn(\n        'bg-primary text-primary-foreground z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance',\n        className,\n      )}\n      {...props}\n    >\n      <motion.div layout={layout} className=\"overflow-hidden\">\n        {children}\n      </motion.div>\n      <TooltipArrowPrimitive\n        className=\"fill-primary size-3 data-[side='bottom']:translate-y-[1px] data-[side='right']:translate-x-[1px] data-[side='left']:translate-x-[-1px] data-[side='top']:translate-y-[-1px]\"\n        tipRadius={2}\n      />\n    </TooltipContentPrimitive>\n  );\n}\n\nexport {\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/animate/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-animate-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-animate-tooltip',
  },
  'components-backgrounds-bubble': {
    name: 'components-backgrounds-bubble',
    description:
      'An interactive background featuring smoothly animated gradient bubbles, creating a playful, dynamic, and visually engaging backdrop.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/bubble/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/bubble.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  type SpringOptions,\n} from \'motion/react\';\n\nimport { cn } from \'@/lib/utils\';\n\ntype BubbleColors = {\n  first: string;\n  second: string;\n  third: string;\n  fourth: string;\n  fifth: string;\n  sixth: string;\n};\n\ntype BubbleBackgroundProps = React.ComponentProps<\'div\'> & {\n  interactive?: boolean;\n  transition?: SpringOptions;\n  colors?: BubbleColors;\n};\n\nfunction BubbleBackground({\n  ref,\n  className,\n  children,\n  interactive = false,\n  transition = { stiffness: 100, damping: 20 },\n  colors = {\n    first: \'18,113,255\',\n    second: \'221,74,255\',\n    third: \'0,220,255\',\n    fourth: \'200,50,50\',\n    fifth: \'180,180,50\',\n    sixth: \'140,100,255\',\n  },\n  ...props\n}: BubbleBackgroundProps) {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  const springX = useSpring(mouseX, transition);\n  const springY = useSpring(mouseY, transition);\n\n  React.useEffect(() => {\n    if (!interactive) return;\n\n    const currentContainer = containerRef.current;\n    if (!currentContainer) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const rect = currentContainer.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      mouseX.set(e.clientX - centerX);\n      mouseY.set(e.clientY - centerY);\n    };\n\n    currentContainer?.addEventListener(\'mousemove\', handleMouseMove);\n    return () =>\n      currentContainer?.removeEventListener(\'mousemove\', handleMouseMove);\n  }, [interactive, mouseX, mouseY]);\n\n  return (\n    <div\n      ref={containerRef}\n      data-slot="bubble-background"\n      className={cn(\n        \'relative size-full overflow-hidden bg-gradient-to-br from-violet-900 to-blue-900\',\n        className,\n      )}\n      {...props}\n    >\n      <style>\n        {`\n            :root {\n              --first-color: ${colors.first};\n              --second-color: ${colors.second};\n              --third-color: ${colors.third};\n              --fourth-color: ${colors.fourth};\n              --fifth-color: ${colors.fifth};\n              --sixth-color: ${colors.sixth};\n            }\n          `}\n      </style>\n\n      <svg\n        xmlns="http://www.w3.org/2000/svg"\n        className="absolute top-0 left-0 w-0 h-0"\n      >\n        <defs>\n          <filter id="goo">\n            <feGaussianBlur\n              in="SourceGraphic"\n              stdDeviation="10"\n              result="blur"\n            />\n            <feColorMatrix\n              in="blur"\n              mode="matrix"\n              values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8"\n              result="goo"\n            />\n            <feBlend in="SourceGraphic" in2="goo" />\n          </filter>\n        </defs>\n      </svg>\n\n      <div\n        className="absolute inset-0"\n        style={{ filter: \'url(#goo) blur(40px)\' }}\n      >\n        <motion.div\n          className="absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--first-color),0.8)_0%,rgba(var(--first-color),0)_50%)]"\n          animate={{ y: [-50, 50, -50] }}\n          transition={{ duration: 30, ease: \'easeInOut\', repeat: Infinity }}\n        />\n\n        <motion.div\n          className="absolute inset-0 flex justify-center items-center origin-[calc(50%-400px)]"\n          animate={{ rotate: 360 }}\n          transition={{\n            duration: 20,\n            ease: \'linear\',\n            repeat: Infinity,\n            repeatType: \'loop\',\n          }}\n        >\n          <div className="rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--second-color),0.8)_0%,rgba(var(--second-color),0)_50%)]" />\n        </motion.div>\n\n        <motion.div\n          className="absolute inset-0 flex justify-center items-center origin-[calc(50%+400px)]"\n          animate={{ rotate: 360 }}\n          transition={{ duration: 40, ease: \'linear\', repeat: Infinity }}\n        >\n          <div className="absolute rounded-full size-[80%] bg-[radial-gradient(circle_at_center,rgba(var(--third-color),0.8)_0%,rgba(var(--third-color),0)_50%)] mix-blend-hard-light top-[calc(50%+200px)] left-[calc(50%-500px)]" />\n        </motion.div>\n\n        <motion.div\n          className="absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fourth-color),0.8)_0%,rgba(var(--fourth-color),0)_50%)] opacity-70"\n          animate={{ x: [-50, 50, -50] }}\n          transition={{ duration: 40, ease: \'easeInOut\', repeat: Infinity }}\n        />\n\n        <motion.div\n          className="absolute inset-0 flex justify-center items-center origin-[calc(50%_-_800px)_calc(50%_+_200px)]"\n          animate={{ rotate: 360 }}\n          transition={{ duration: 20, ease: \'linear\', repeat: Infinity }}\n        >\n          <div className="absolute rounded-full size-[160%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fifth-color),0.8)_0%,rgba(var(--fifth-color),0)_50%)] top-[calc(50%-80%)] left-[calc(50%-80%)]" />\n        </motion.div>\n\n        {interactive && (\n          <motion.div\n            className="absolute rounded-full size-full mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--sixth-color),0.8)_0%,rgba(var(--sixth-color),0)_50%)] opacity-70"\n            style={{\n              x: springX,\n              y: springY,\n            }}\n          />\n        )}\n      </div>\n\n      {children}\n    </div>\n  );\n}\n\nexport { BubbleBackground, type BubbleBackgroundProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/bubble/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-bubble';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-bubble',
  },
  'components-backgrounds-fireworks': {
    name: 'components-backgrounds-fireworks',
    description: 'A background component that displays a fireworks animation.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/fireworks/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/fireworks.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst rand = (min: number, max: number): number =>\n  Math.random() * (max - min) + min;\n\nconst randInt = (min: number, max: number): number =>\n  Math.floor(Math.random() * (max - min) + min);\n\nconst randColor = (): string => `hsl(${randInt(0, 360)}, 100%, 50%)`;\n\ntype ParticleType = {\n  x: number;\n  y: number;\n  color: string;\n  speed: number;\n  direction: number;\n  vx: number;\n  vy: number;\n  gravity: number;\n  friction: number;\n  alpha: number;\n  decay: number;\n  size: number;\n  update: () => void;\n  draw: (ctx: CanvasRenderingContext2D) => void;\n  isAlive: () => boolean;\n};\n\nfunction createParticle(\n  x: number,\n  y: number,\n  color: string,\n  speed: number,\n  direction: number,\n  gravity: number,\n  friction: number,\n  size: number,\n): ParticleType {\n  const vx = Math.cos(direction) * speed;\n  const vy = Math.sin(direction) * speed;\n  const alpha = 1;\n  const decay = rand(0.005, 0.02);\n\n  return {\n    x,\n    y,\n    color,\n    speed,\n    direction,\n    vx,\n    vy,\n    gravity,\n    friction,\n    alpha,\n    decay,\n    size,\n    update() {\n      this.vx *= this.friction;\n      this.vy *= this.friction;\n      this.vy += this.gravity;\n      this.x += this.vx;\n      this.y += this.vy;\n      this.alpha -= this.decay;\n    },\n    draw(ctx: CanvasRenderingContext2D) {\n      ctx.save();\n      ctx.globalAlpha = this.alpha;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);\n      ctx.fillStyle = this.color;\n      ctx.fill();\n      ctx.restore();\n    },\n    isAlive() {\n      return this.alpha > 0;\n    },\n  };\n}\n\ntype FireworkType = {\n  x: number;\n  y: number;\n  targetY: number;\n  color: string;\n  speed: number;\n  size: number;\n  angle: number;\n  vx: number;\n  vy: number;\n  trail: { x: number; y: number }[];\n  trailLength: number;\n  exploded: boolean;\n  update: () => boolean;\n  explode: () => void;\n  draw: (ctx: CanvasRenderingContext2D) => void;\n};\n\nfunction createFirework(\n  x: number,\n  y: number,\n  targetY: number,\n  color: string,\n  speed: number,\n  size: number,\n  particleSpeed: { min: number; max: number } | number,\n  particleSize: { min: number; max: number } | number,\n  onExplode: (particles: ParticleType[]) => void,\n): FireworkType {\n  const angle = -Math.PI / 2 + rand(-0.3, 0.3);\n  const vx = Math.cos(angle) * speed;\n  const vy = Math.sin(angle) * speed;\n  const trail: { x: number; y: number }[] = [];\n  const trailLength = randInt(10, 25);\n\n  return {\n    x,\n    y,\n    targetY,\n    color,\n    speed,\n    size,\n    angle,\n    vx,\n    vy,\n    trail,\n    trailLength,\n    exploded: false,\n    update() {\n      this.trail.push({ x: this.x, y: this.y });\n      if (this.trail.length > this.trailLength) {\n        this.trail.shift();\n      }\n      this.x += this.vx;\n      this.y += this.vy;\n      this.vy += 0.02;\n      if (this.vy >= 0 || this.y <= this.targetY) {\n        this.explode();\n        return false;\n      }\n      return true;\n    },\n    explode() {\n      const numParticles = randInt(50, 150);\n      const particles: ParticleType[] = [];\n      for (let i = 0; i < numParticles; i++) {\n        const particleAngle = rand(0, Math.PI * 2);\n        const localParticleSpeed = getValueByRange(particleSpeed);\n        const localParticleSize = getValueByRange(particleSize);\n        particles.push(\n          createParticle(\n            this.x,\n            this.y,\n            this.color,\n            localParticleSpeed,\n            particleAngle,\n            0.05,\n            0.98,\n            localParticleSize,\n          ),\n        );\n      }\n      onExplode(particles);\n    },\n    draw(ctx: CanvasRenderingContext2D) {\n      ctx.save();\n      ctx.beginPath();\n      if (this.trail.length > 1) {\n        ctx.moveTo(this.trail[0]?.x ?? this.x, this.trail[0]?.y ?? this.y);\n        for (const point of this.trail) {\n          ctx.lineTo(point.x, point.y);\n        }\n      } else {\n        ctx.moveTo(this.x, this.y);\n        ctx.lineTo(this.x, this.y);\n      }\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = this.size;\n      ctx.lineCap = 'round';\n      ctx.stroke();\n      ctx.restore();\n    },\n  };\n}\n\nfunction getValueByRange(range: { min: number; max: number } | number): number {\n  if (typeof range === 'number') {\n    return range;\n  }\n  return rand(range.min, range.max);\n}\n\nfunction getColor(color: string | string[] | undefined): string {\n  if (Array.isArray(color)) {\n    return color[randInt(0, color.length)] ?? randColor();\n  }\n  return color ?? randColor();\n}\n\ntype FireworksBackgroundProps = Omit<React.ComponentProps<'div'>, 'color'> & {\n  canvasProps?: React.ComponentProps<'canvas'>;\n  population?: number;\n  color?: string | string[];\n  fireworkSpeed?: { min: number; max: number } | number;\n  fireworkSize?: { min: number; max: number } | number;\n  particleSpeed?: { min: number; max: number } | number;\n  particleSize?: { min: number; max: number } | number;\n};\n\nfunction FireworksBackground({\n  ref,\n  className,\n  canvasProps,\n  population = 1,\n  color,\n  fireworkSpeed = { min: 4, max: 8 },\n  fireworkSize = { min: 2, max: 5 },\n  particleSpeed = { min: 2, max: 7 },\n  particleSize = { min: 1, max: 5 },\n  ...props\n}: FireworksBackgroundProps) {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current;\n    const container = containerRef.current;\n    if (!canvas || !container) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    let maxX = window.innerWidth;\n    let ratio = container.offsetHeight / container.offsetWidth;\n    let maxY = maxX * ratio;\n    canvas.width = maxX;\n    canvas.height = maxY;\n\n    const setCanvasSize = () => {\n      maxX = window.innerWidth;\n      ratio = container.offsetHeight / container.offsetWidth;\n      maxY = maxX * ratio;\n      canvas.width = maxX;\n      canvas.height = maxY;\n    };\n    window.addEventListener('resize', setCanvasSize);\n\n    const explosions: ParticleType[] = [];\n    const fireworks: FireworkType[] = [];\n\n    const handleExplosion = (particles: ParticleType[]) => {\n      explosions.push(...particles);\n    };\n\n    const launchFirework = () => {\n      const x = rand(maxX * 0.1, maxX * 0.9);\n      const y = maxY;\n      const targetY = rand(maxY * 0.1, maxY * 0.4);\n      const fireworkColor = getColor(color);\n      const speed = getValueByRange(fireworkSpeed);\n      const size = getValueByRange(fireworkSize);\n      fireworks.push(\n        createFirework(\n          x,\n          y,\n          targetY,\n          fireworkColor,\n          speed,\n          size,\n          particleSpeed,\n          particleSize,\n          handleExplosion,\n        ),\n      );\n      const timeout = rand(300, 800) / population;\n      setTimeout(launchFirework, timeout);\n    };\n\n    launchFirework();\n\n    let animationFrameId: number;\n    const animate = () => {\n      ctx.clearRect(0, 0, maxX, maxY);\n\n      for (let i = fireworks.length - 1; i >= 0; i--) {\n        const firework = fireworks[i];\n        if (!firework?.update()) {\n          fireworks.splice(i, 1);\n        } else {\n          firework.draw(ctx);\n        }\n      }\n\n      for (let i = explosions.length - 1; i >= 0; i--) {\n        const particle = explosions[i];\n        particle?.update();\n        if (particle?.isAlive()) {\n          particle.draw(ctx);\n        } else {\n          explosions.splice(i, 1);\n        }\n      }\n\n      animationFrameId = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    const handleClick = (event: MouseEvent) => {\n      const x = event.clientX;\n      const y = maxY;\n      const targetY = event.clientY;\n      const fireworkColor = getColor(color);\n      const speed = getValueByRange(fireworkSpeed);\n      const size = getValueByRange(fireworkSize);\n      fireworks.push(\n        createFirework(\n          x,\n          y,\n          targetY,\n          fireworkColor,\n          speed,\n          size,\n          particleSpeed,\n          particleSize,\n          handleExplosion,\n        ),\n      );\n    };\n\n    container.addEventListener('click', handleClick);\n\n    return () => {\n      window.removeEventListener('resize', setCanvasSize);\n      container.removeEventListener('click', handleClick);\n      cancelAnimationFrame(animationFrameId);\n    };\n  }, [\n    population,\n    color,\n    fireworkSpeed,\n    fireworkSize,\n    particleSpeed,\n    particleSize,\n  ]);\n\n  return (\n    <div\n      ref={containerRef}\n      data-slot=\"fireworks-background\"\n      className={cn('relative size-full overflow-hidden', className)}\n      {...props}\n    >\n      <canvas\n        {...canvasProps}\n        ref={canvasRef}\n        className={cn('absolute inset-0 size-full', canvasProps?.className)}\n      />\n    </div>\n  );\n}\n\nexport { FireworksBackground, type FireworksBackgroundProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/fireworks/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-fireworks';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-fireworks',
  },
  'components-backgrounds-gradient': {
    name: 'components-backgrounds-gradient',
    description:
      'A background component featuring a subtle yet engaging animated gradient effect, smoothly transitioning colors to enhance visual depth.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/gradient/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/gradient.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype GradientBackgroundProps = HTMLMotionProps<'div'>;\n\nfunction GradientBackground({\n  className,\n  transition = { duration: 15, ease: 'easeInOut', repeat: Infinity },\n  ...props\n}: GradientBackgroundProps) {\n  return (\n    <motion.div\n      data-slot=\"gradient-background\"\n      className={cn(\n        'size-full bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 bg-[length:400%_400%]',\n        className,\n      )}\n      animate={{ backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'] }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\nexport { GradientBackground, type GradientBackgroundProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/gradient/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-gradient';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-gradient',
  },
  'components-backgrounds-hexagon': {
    name: 'components-backgrounds-hexagon',
    description:
      'A background component featuring an interactive hexagon grid.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/hexagon/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/hexagon.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ntype HexagonBackgroundProps = React.ComponentProps<'div'> & {\n  hexagonProps?: React.ComponentProps<'div'>;\n  hexagonSize?: number; // value greater than 50\n  hexagonMargin?: number;\n};\n\nfunction HexagonBackground({\n  className,\n  children,\n  hexagonProps,\n  hexagonSize = 75,\n  hexagonMargin = 3,\n  ...props\n}: HexagonBackgroundProps) {\n  const hexagonWidth = hexagonSize;\n  const hexagonHeight = hexagonSize * 1.1;\n  const rowSpacing = hexagonSize * 0.8;\n  const baseMarginTop = -36 - 0.275 * (hexagonSize - 100);\n  const computedMarginTop = baseMarginTop + hexagonMargin;\n  const oddRowMarginLeft = -(hexagonSize / 2);\n  const evenRowMarginLeft = hexagonMargin / 2;\n\n  const [gridDimensions, setGridDimensions] = React.useState({\n    rows: 0,\n    columns: 0,\n  });\n\n  const updateGridDimensions = React.useCallback(() => {\n    const rows = Math.ceil(window.innerHeight / rowSpacing);\n    const columns = Math.ceil(window.innerWidth / hexagonWidth) + 1;\n    setGridDimensions({ rows, columns });\n  }, [rowSpacing, hexagonWidth]);\n\n  React.useEffect(() => {\n    updateGridDimensions();\n    window.addEventListener('resize', updateGridDimensions);\n    return () => window.removeEventListener('resize', updateGridDimensions);\n  }, [updateGridDimensions]);\n\n  return (\n    <div\n      data-slot=\"hexagon-background\"\n      className={cn(\n        'relative size-full overflow-hidden dark:bg-neutral-900 bg-neutral-100',\n        className,\n      )}\n      {...props}\n    >\n      <style>{`:root { --hexagon-margin: ${hexagonMargin}px; }`}</style>\n      <div className=\"absolute top-0 -left-0 size-full overflow-hidden\">\n        {Array.from({ length: gridDimensions.rows }).map((_, rowIndex) => (\n          <div\n            key={`row-${rowIndex}`}\n            style={{\n              marginTop: computedMarginTop,\n              marginLeft:\n                ((rowIndex + 1) % 2 === 0\n                  ? evenRowMarginLeft\n                  : oddRowMarginLeft) - 10,\n            }}\n            className=\"inline-flex\"\n          >\n            {Array.from({ length: gridDimensions.columns }).map(\n              (_, colIndex) => (\n                <div\n                  key={`hexagon-${rowIndex}-${colIndex}`}\n                  {...hexagonProps}\n                  style={{\n                    width: hexagonWidth,\n                    height: hexagonHeight,\n                    marginLeft: hexagonMargin,\n                    ...hexagonProps?.style,\n                  }}\n                  className={cn(\n                    'relative',\n                    '[clip-path:polygon(50%_0%,_100%_25%,_100%_75%,_50%_100%,_0%_75%,_0%_25%)]',\n                    \"before:content-[''] before:absolute before:top-0 before:left-0 before:w-full before:h-full dark:before:bg-neutral-950 before:bg-white before:opacity-100 before:transition-all before:duration-1000\",\n                    \"after:content-[''] after:absolute after:inset-[var(--hexagon-margin)] dark:after:bg-neutral-950 after:bg-white\",\n                    'after:[clip-path:polygon(50%_0%,_100%_25%,_100%_75%,_50%_100%,_0%_75%,_0%_25%)]',\n                    'hover:before:bg-neutral-200 dark:hover:before:bg-neutral-800 hover:before:opacity-100 hover:before:duration-0 dark:hover:after:bg-neutral-900 hover:after:bg-neutral-100 hover:after:opacity-100 hover:after:duration-0',\n                    hexagonProps?.className,\n                  )}\n                />\n              ),\n            )}\n          </div>\n        ))}\n      </div>\n      {children}\n    </div>\n  );\n}\n\nexport { HexagonBackground, type HexagonBackgroundProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/hexagon/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-hexagon';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-hexagon',
  },
  'components-backgrounds-hole': {
    name: 'components-backgrounds-hole',
    description: 'A background component featuring an animated hole grid.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/hole/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/hole.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype HoleBackgroundProps = React.ComponentProps<'div'> & {\n  strokeColor?: string;\n  numberOfLines?: number;\n  numberOfDiscs?: number;\n  particleRGBColor?: [number, number, number];\n};\n\nfunction HoleBackground({\n  strokeColor = '#737373',\n  numberOfLines = 50,\n  numberOfDiscs = 50,\n  particleRGBColor = [255, 255, 255],\n  className,\n  children,\n  ...props\n}: HoleBackgroundProps) {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  const animationFrameIdRef = React.useRef<number>(0);\n  const stateRef = React.useRef<any>({\n    discs: [] as any[],\n    lines: [] as any[],\n    particles: [] as any[],\n    clip: {},\n    startDisc: {},\n    endDisc: {},\n    rect: { width: 0, height: 0 },\n    render: { width: 0, height: 0, dpi: 1 },\n    particleArea: {},\n    linesCanvas: null,\n  });\n\n  const linear = (p: number) => p;\n  const easeInExpo = (p: number) => (p === 0 ? 0 : Math.pow(2, 10 * (p - 1)));\n\n  const tweenValue = React.useCallback(\n    (start: number, end: number, p: number, ease: 'inExpo' | null = null) => {\n      const delta = end - start;\n      const easeFn = ease === 'inExpo' ? easeInExpo : linear;\n      return start + delta * easeFn(p);\n    },\n    [],\n  );\n\n  const tweenDisc = React.useCallback(\n    (disc: any) => {\n      const { startDisc, endDisc } = stateRef.current;\n      disc.x = tweenValue(startDisc.x, endDisc.x, disc.p);\n      disc.y = tweenValue(startDisc.y, endDisc.y, disc.p, 'inExpo');\n      disc.w = tweenValue(startDisc.w, endDisc.w, disc.p);\n      disc.h = tweenValue(startDisc.h, endDisc.h, disc.p);\n    },\n    [tweenValue],\n  );\n\n  const setSize = React.useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    stateRef.current.rect = { width: rect.width, height: rect.height };\n    stateRef.current.render = {\n      width: rect.width,\n      height: rect.height,\n      dpi: window.devicePixelRatio || 1,\n    };\n    canvas.width = stateRef.current.render.width * stateRef.current.render.dpi;\n    canvas.height =\n      stateRef.current.render.height * stateRef.current.render.dpi;\n  }, []);\n\n  const setDiscs = React.useCallback(() => {\n    const { width, height } = stateRef.current.rect;\n    stateRef.current.discs = [];\n    stateRef.current.startDisc = {\n      x: width * 0.5,\n      y: height * 0.45,\n      w: width * 0.75,\n      h: height * 0.7,\n    };\n    stateRef.current.endDisc = {\n      x: width * 0.5,\n      y: height * 0.95,\n      w: 0,\n      h: 0,\n    };\n    let prevBottom = height;\n    stateRef.current.clip = {};\n    for (let i = 0; i < numberOfDiscs; i++) {\n      const p = i / numberOfDiscs;\n      const disc = { p, x: 0, y: 0, w: 0, h: 0 };\n      tweenDisc(disc);\n      const bottom = disc.y + disc.h;\n      if (bottom <= prevBottom) {\n        stateRef.current.clip = { disc: { ...disc }, i };\n      }\n      prevBottom = bottom;\n      stateRef.current.discs.push(disc);\n    }\n    const clipPath = new Path2D();\n    const disc = stateRef.current.clip.disc;\n    clipPath.ellipse(disc.x, disc.y, disc.w, disc.h, 0, 0, Math.PI * 2);\n    clipPath.rect(disc.x - disc.w, 0, disc.w * 2, disc.y);\n    stateRef.current.clip.path = clipPath;\n  }, [numberOfDiscs, tweenDisc]);\n\n  const setLines = React.useCallback(() => {\n    const { width, height } = stateRef.current.rect;\n    stateRef.current.lines = [];\n    const linesAngle = (Math.PI * 2) / numberOfLines;\n    for (let i = 0; i < numberOfLines; i++) {\n      stateRef.current.lines.push([]);\n    }\n    stateRef.current.discs.forEach((disc: any) => {\n      for (let i = 0; i < numberOfLines; i++) {\n        const angle = i * linesAngle;\n        const p = {\n          x: disc.x + Math.cos(angle) * disc.w,\n          y: disc.y + Math.sin(angle) * disc.h,\n        };\n        stateRef.current.lines[i].push(p);\n      }\n    });\n    const offCanvas = document.createElement('canvas');\n    offCanvas.width = width;\n    offCanvas.height = height;\n    const ctx = offCanvas.getContext('2d');\n    if (!ctx) return;\n    stateRef.current.lines.forEach((line: any) => {\n      ctx.save();\n      let lineIsIn = false;\n      line.forEach((p1: any, j: number) => {\n        if (j === 0) return;\n        const p0 = line[j - 1];\n        if (\n          !lineIsIn &&\n          (ctx.isPointInPath(stateRef.current.clip.path, p1.x, p1.y) ||\n            ctx.isPointInStroke(stateRef.current.clip.path, p1.x, p1.y))\n        ) {\n          lineIsIn = true;\n        } else if (lineIsIn) {\n          ctx.clip(stateRef.current.clip.path);\n        }\n        ctx.beginPath();\n        ctx.moveTo(p0.x, p0.y);\n        ctx.lineTo(p1.x, p1.y);\n        ctx.strokeStyle = strokeColor;\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.closePath();\n      });\n      ctx.restore();\n    });\n    stateRef.current.linesCanvas = offCanvas;\n  }, [numberOfLines, strokeColor]);\n\n  const initParticle = React.useCallback(\n    (start: boolean = false) => {\n      const sx =\n        stateRef.current.particleArea.sx +\n        stateRef.current.particleArea.sw * Math.random();\n      const ex =\n        stateRef.current.particleArea.ex +\n        stateRef.current.particleArea.ew * Math.random();\n      const dx = ex - sx;\n      const y = start\n        ? stateRef.current.particleArea.h * Math.random()\n        : stateRef.current.particleArea.h;\n      const r = 0.5 + Math.random() * 4;\n      const vy = 0.5 + Math.random();\n      return {\n        x: sx,\n        sx,\n        dx,\n        y,\n        vy,\n        p: 0,\n        r,\n        c: `rgba(${particleRGBColor[0]}, ${particleRGBColor[1]}, ${particleRGBColor[2]}, ${Math.random()})`,\n      };\n    },\n    [particleRGBColor],\n  );\n\n  const setParticles = React.useCallback(() => {\n    const { width, height } = stateRef.current.rect;\n    stateRef.current.particles = [];\n    const disc = stateRef.current.clip.disc;\n    stateRef.current.particleArea = {\n      sw: disc.w * 0.5,\n      ew: disc.w * 2,\n      h: height * 0.85,\n    };\n    stateRef.current.particleArea.sx =\n      (width - stateRef.current.particleArea.sw) / 2;\n    stateRef.current.particleArea.ex =\n      (width - stateRef.current.particleArea.ew) / 2;\n    const totalParticles = 100;\n    for (let i = 0; i < totalParticles; i++) {\n      stateRef.current.particles.push(initParticle(true));\n    }\n  }, [initParticle]);\n\n  const drawDiscs = React.useCallback(\n    (ctx: CanvasRenderingContext2D) => {\n      ctx.strokeStyle = strokeColor;\n      ctx.lineWidth = 2;\n      const outerDisc = stateRef.current.startDisc;\n      ctx.beginPath();\n      ctx.ellipse(\n        outerDisc.x,\n        outerDisc.y,\n        outerDisc.w,\n        outerDisc.h,\n        0,\n        0,\n        Math.PI * 2,\n      );\n      ctx.stroke();\n      ctx.closePath();\n      stateRef.current.discs.forEach((disc: any, i: number) => {\n        if (i % 5 !== 0) return;\n        if (disc.w < stateRef.current.clip.disc.w - 5) {\n          ctx.save();\n          ctx.clip(stateRef.current.clip.path);\n        }\n        ctx.beginPath();\n        ctx.ellipse(disc.x, disc.y, disc.w, disc.h, 0, 0, Math.PI * 2);\n        ctx.stroke();\n        ctx.closePath();\n        if (disc.w < stateRef.current.clip.disc.w - 5) {\n          ctx.restore();\n        }\n      });\n    },\n    [strokeColor],\n  );\n\n  const drawLines = React.useCallback((ctx: CanvasRenderingContext2D) => {\n    if (stateRef.current.linesCanvas) {\n      ctx.drawImage(stateRef.current.linesCanvas, 0, 0);\n    }\n  }, []);\n\n  const drawParticles = React.useCallback((ctx: CanvasRenderingContext2D) => {\n    ctx.save();\n    ctx.clip(stateRef.current.clip.path);\n    stateRef.current.particles.forEach((particle: any) => {\n      ctx.fillStyle = particle.c;\n      ctx.beginPath();\n      ctx.rect(particle.x, particle.y, particle.r, particle.r);\n      ctx.closePath();\n      ctx.fill();\n    });\n    ctx.restore();\n  }, []);\n\n  const moveDiscs = React.useCallback(() => {\n    stateRef.current.discs.forEach((disc: any) => {\n      disc.p = (disc.p + 0.001) % 1;\n      tweenDisc(disc);\n    });\n  }, [tweenDisc]);\n\n  const moveParticles = React.useCallback(() => {\n    stateRef.current.particles.forEach((particle: any, idx: number) => {\n      particle.p = 1 - particle.y / stateRef.current.particleArea.h;\n      particle.x = particle.sx + particle.dx * particle.p;\n      particle.y -= particle.vy;\n      if (particle.y < 0) {\n        stateRef.current.particles[idx] = initParticle();\n      }\n    });\n  }, [initParticle]);\n\n  const tick = React.useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.save();\n    ctx.scale(stateRef.current.render.dpi, stateRef.current.render.dpi);\n    moveDiscs();\n    moveParticles();\n    drawDiscs(ctx);\n    drawLines(ctx);\n    drawParticles(ctx);\n    ctx.restore();\n    animationFrameIdRef.current = requestAnimationFrame(tick);\n  }, [moveDiscs, moveParticles, drawDiscs, drawLines, drawParticles]);\n\n  const init = React.useCallback(() => {\n    setSize();\n    setDiscs();\n    setLines();\n    setParticles();\n  }, [setSize, setDiscs, setLines, setParticles]);\n\n  React.useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    init();\n    tick();\n    const handleResize = () => {\n      setSize();\n      setDiscs();\n      setLines();\n      setParticles();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      cancelAnimationFrame(animationFrameIdRef.current);\n    };\n  }, [init, tick, setSize, setDiscs, setLines, setParticles]);\n\n  return (\n    <div\n      data-slot=\"hole-background\"\n      className={cn(\n        'relative size-full overflow-hidden',\n        'before:content-[\"\"] before:absolute before:top-1/2 before:left-1/2 before:block before:size-[140%] dark:before:[background:radial-gradient(ellipse_at_50%_55%,transparent_10%,black_50%)] before:[background:radial-gradient(ellipse_at_50%_55%,transparent_10%,white_50%)] before:[transform:translate3d(-50%,-50%,0)]',\n        'after:content-[\"\"] after:absolute after:z-[5] after:top-1/2 after:left-1/2 after:block after:size-full after:[background:radial-gradient(ellipse_at_50%_75%,#a900ff_20%,transparent_75%)] after:[transform:translate3d(-50%,-50%,0)] after:mix-blend-overlay',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 block size-full dark:opacity-20 opacity-10\"\n      />\n      <motion.div\n        className={cn(\n          'absolute top-[-71.5%] left-1/2 z-[3] w-[30%] h-[140%] rounded-b-full blur-3xl opacity-75 dark:mix-blend-plus-lighter mix-blend-plus-darker [transform:translate3d(-50%,0,0)] [background-position:0%_100%] [background-size:100%_200%]',\n          'dark:[background:linear-gradient(20deg,#00f8f1,#ffbd1e20_16.5%,#fe848f_33%,#fe848f20_49.5%,#00f8f1_66%,#00f8f160_85.5%,#ffbd1e_100%)_0_100%_/_100%_200%] [background:linear-gradient(20deg,#00f8f1,#ffbd1e40_16.5%,#fe848f_33%,#fe848f40_49.5%,#00f8f1_66%,#00f8f180_85.5%,#ffbd1e_100%)_0_100%_/_100%_200%]',\n        )}\n        animate={{ backgroundPosition: '0% 300%' }}\n        transition={{ duration: 5, ease: 'linear', repeat: Infinity }}\n      />\n      <div className=\"absolute top-0 left-0 z-[7] size-full dark:[background:repeating-linear-gradient(transparent,transparent_1px,white_1px,white_2px)] mix-blend-overlay opacity-50\" />\n    </div>\n  );\n}\n\nexport { HoleBackground, type HoleBackgroundProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/hole/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-hole';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-hole',
  },
  'components-backgrounds-stars': {
    name: 'components-backgrounds-stars',
    description:
      'An interactive background featuring animated dots of varying sizes and speeds, simulating a dynamic and immersive starry space effect.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/backgrounds/stars/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/backgrounds/stars.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  type HTMLMotionProps,\n  motion,\n  useMotionValue,\n  useSpring,\n  type SpringOptions,\n  type Transition,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype StarLayerProps = HTMLMotionProps<'div'> & {\n  count: number;\n  size: number;\n  transition: Transition;\n  starColor: string;\n};\n\nfunction generateStars(count: number, starColor: string) {\n  const shadows: string[] = [];\n  for (let i = 0; i < count; i++) {\n    const x = Math.floor(Math.random() * 4000) - 2000;\n    const y = Math.floor(Math.random() * 4000) - 2000;\n    shadows.push(`${x}px ${y}px ${starColor}`);\n  }\n  return shadows.join(', ');\n}\n\nfunction StarLayer({\n  count = 1000,\n  size = 1,\n  transition = { repeat: Infinity, duration: 50, ease: 'linear' },\n  starColor = '#fff',\n  className,\n  ...props\n}: StarLayerProps) {\n  const [boxShadow, setBoxShadow] = React.useState<string>('');\n\n  React.useEffect(() => {\n    setBoxShadow(generateStars(count, starColor));\n  }, [count, starColor]);\n\n  return (\n    <motion.div\n      data-slot=\"star-layer\"\n      animate={{ y: [0, -2000] }}\n      transition={transition}\n      className={cn('absolute top-0 left-0 w-full h-[2000px]', className)}\n      {...props}\n    >\n      <div\n        className=\"absolute bg-transparent rounded-full\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n      <div\n        className=\"absolute bg-transparent rounded-full top-[2000px]\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n    </motion.div>\n  );\n}\n\ntype StarsBackgroundProps = React.ComponentProps<'div'> & {\n  factor?: number;\n  speed?: number;\n  transition?: SpringOptions;\n  starColor?: string;\n  pointerEvents?: boolean;\n};\n\nfunction StarsBackground({\n  children,\n  className,\n  factor = 0.05,\n  speed = 50,\n  transition = { stiffness: 50, damping: 20 },\n  starColor = '#fff',\n  pointerEvents = true,\n  ...props\n}: StarsBackgroundProps) {\n  const offsetX = useMotionValue(1);\n  const offsetY = useMotionValue(1);\n\n  const springX = useSpring(offsetX, transition);\n  const springY = useSpring(offsetY, transition);\n\n  const handleMouseMove = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      const centerX = window.innerWidth / 2;\n      const centerY = window.innerHeight / 2;\n      const newOffsetX = -(e.clientX - centerX) * factor;\n      const newOffsetY = -(e.clientY - centerY) * factor;\n      offsetX.set(newOffsetX);\n      offsetY.set(newOffsetY);\n    },\n    [offsetX, offsetY, factor],\n  );\n\n  return (\n    <div\n      data-slot=\"stars-background\"\n      className={cn(\n        'relative size-full overflow-hidden bg-[radial-gradient(ellipse_at_bottom,_#262626_0%,_#000_100%)]',\n        className,\n      )}\n      onMouseMove={handleMouseMove}\n      {...props}\n    >\n      <motion.div\n        style={{ x: springX, y: springY }}\n        className={cn({ 'pointer-events-none': !pointerEvents })}\n      >\n        <StarLayer\n          count={1000}\n          size={1}\n          transition={{ repeat: Infinity, duration: speed, ease: 'linear' }}\n          starColor={starColor}\n        />\n        <StarLayer\n          count={400}\n          size={2}\n          transition={{\n            repeat: Infinity,\n            duration: speed * 2,\n            ease: 'linear',\n          }}\n          starColor={starColor}\n        />\n        <StarLayer\n          count={200}\n          size={3}\n          transition={{\n            repeat: Infinity,\n            duration: speed * 3,\n            ease: 'linear',\n          }}\n          starColor={starColor}\n        />\n      </motion.div>\n      {children}\n    </div>\n  );\n}\n\nexport {\n  StarLayer,\n  StarsBackground,\n  type StarLayerProps,\n  type StarsBackgroundProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/backgrounds/stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-backgrounds-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-backgrounds-stars',
  },
  'components-base-accordion': {
    name: 'components-base-accordion',
    description: 'A set of collapsible panels with headings.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-accordion',
    ],
    files: [
      {
        path: 'registry/components/base/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/accordion.tsx',
        content:
          "import * as React from 'react';\nimport { ChevronDownIcon } from 'lucide-react';\n\nimport {\n  Accordion as AccordionPrimitive,\n  AccordionItem as AccordionItemPrimitive,\n  AccordionHeader as AccordionHeaderPrimitive,\n  AccordionTrigger as AccordionTriggerPrimitive,\n  AccordionPanel as AccordionPanelPrimitive,\n  type AccordionProps as AccordionPrimitiveProps,\n  type AccordionItemProps as AccordionItemPrimitiveProps,\n  type AccordionTriggerProps as AccordionTriggerPrimitiveProps,\n  type AccordionPanelProps as AccordionPanelPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/accordion';\nimport { cn } from '@/lib/utils';\n\ntype AccordionProps = AccordionPrimitiveProps;\n\nfunction Accordion(props: AccordionProps) {\n  return <AccordionPrimitive {...props} />;\n}\n\ntype AccordionItemProps = AccordionItemPrimitiveProps;\n\nfunction AccordionItem({ className, ...props }: AccordionItemProps) {\n  return (\n    <AccordionItemPrimitive\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  );\n}\n\ntype AccordionTriggerProps = AccordionTriggerPrimitiveProps & {\n  showArrow?: boolean;\n};\n\nfunction AccordionTrigger({\n  className,\n  children,\n  showArrow = true,\n  ...props\n}: AccordionTriggerProps) {\n  return (\n    <AccordionHeaderPrimitive className=\"flex\">\n      <AccordionTriggerPrimitive\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-panel-open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n        )}\n      </AccordionTriggerPrimitive>\n    </AccordionHeaderPrimitive>\n  );\n}\n\ntype AccordionPanelProps = AccordionPanelPrimitiveProps & {\n  children: React.ReactNode;\n};\n\nfunction AccordionPanel({\n  className,\n  children,\n  ...props\n}: AccordionPanelProps) {\n  return (\n    <AccordionPanelPrimitive {...props}>\n      <div className={cn('text-sm pt-0 pb-4', className)}>{children}</div>\n    </AccordionPanelPrimitive>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionPanel,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionTriggerProps,\n  type AccordionPanelProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-accordion',
  },
  'components-base-checkbox': {
    name: 'components-base-checkbox',
    description: 'An easily stylable checkbox component.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-checkbox'],
    files: [
      {
        path: 'registry/components/base/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/checkbox.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxIndicator as CheckboxIndicatorPrimitive,\n  type CheckboxProps as CheckboxPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/checkbox';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst checkboxVariants = cva(\n  'peer shrink-0 flex items-center justify-center outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-500 focus-visible:ring-offset-2 [&[data-checked],&[data-indeterminate]]:bg-primary [&[data-checked],&[data-indeterminate]]:text-primary-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background border',\n        accent: 'bg-input',\n      },\n      size: {\n        default: 'size-5 rounded-sm',\n        sm: 'size-4.5 rounded-[5px]',\n        lg: 'size-6 rounded-[7px]',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst checkboxIndicatorVariants = cva('', {\n  variants: {\n    size: {\n      default: 'size-3.5',\n      sm: 'size-3',\n      lg: 'size-4',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\ntype CheckboxProps = CheckboxPrimitiveProps &\n  VariantProps<typeof checkboxVariants> & {\n    children?: React.ReactNode;\n  };\n\nfunction Checkbox({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: CheckboxProps) {\n  return (\n    <CheckboxPrimitive\n      className={cn(checkboxVariants({ variant, size, className }))}\n      {...props}\n    >\n      {children}\n      <CheckboxIndicatorPrimitive\n        className={cn(checkboxIndicatorVariants({ size }))}\n      />\n    </CheckboxPrimitive>\n  );\n}\n\nexport { Checkbox, type CheckboxProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-checkbox',
  },
  'components-base-files': {
    name: 'components-base-files',
    description:
      'A component that allows you to display a list of files and folders.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-files'],
    files: [
      {
        path: 'registry/components/base/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/files.tsx',
        content:
          "import * as React from 'react';\nimport { FolderIcon, FolderOpenIcon, FileIcon } from 'lucide-react';\n\nimport {\n  Files as FilesPrimitive,\n  FilesHighlight as FilesHighlightPrimitive,\n  FolderItem as FolderItemPrimitive,\n  FolderHeader as FolderHeaderPrimitive,\n  FolderTrigger as FolderTriggerPrimitive,\n  FolderHighlight as FolderHighlightPrimitive,\n  Folder as FolderPrimitive,\n  FolderIcon as FolderIconPrimitive,\n  FileLabel as FileLabelPrimitive,\n  FolderPanel as FolderPanelPrimitive,\n  FileHighlight as FileHighlightPrimitive,\n  File as FilePrimitive,\n  FileIcon as FileIconPrimitive,\n  type FilesProps as FilesPrimitiveProps,\n  type FolderItemProps as FolderItemPrimitiveProps,\n  type FolderPanelProps as FolderPanelPrimitiveProps,\n  type FileProps as FilePrimitiveProps,\n  type FileLabelProps as FileLabelPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/files';\nimport { cn } from '@/lib/utils';\n\ntype GitStatus = 'untracked' | 'modified' | 'deleted';\n\ntype FilesProps = FilesPrimitiveProps;\n\nfunction Files({ className, children, ...props }: FilesProps) {\n  return (\n    <FilesPrimitive className={cn('p-2 w-full', className)} {...props}>\n      <FilesHighlightPrimitive className=\"bg-accent rounded-lg pointer-events-none\">\n        {children}\n      </FilesHighlightPrimitive>\n    </FilesPrimitive>\n  );\n}\n\ntype SubFilesProps = FilesProps;\n\nfunction SubFiles(props: SubFilesProps) {\n  return <FilesPrimitive {...props} />;\n}\n\ntype FolderItemProps = FolderItemPrimitiveProps;\n\nfunction FolderItem(props: FolderItemProps) {\n  return <FolderItemPrimitive {...props} />;\n}\n\ntype FolderTriggerProps = FileLabelPrimitiveProps & {\n  gitStatus?: GitStatus;\n};\n\nfunction FolderTrigger({\n  children,\n  className,\n  gitStatus,\n  ...props\n}: FolderTriggerProps) {\n  return (\n    <FolderHeaderPrimitive>\n      <FolderTriggerPrimitive className=\"w-full text-start\">\n        <FolderHighlightPrimitive>\n          <FolderPrimitive className=\"flex items-center justify-between gap-2 p-2 pointer-events-none\">\n            <div\n              className={cn(\n                'flex items-center gap-2',\n                gitStatus === 'untracked' && 'text-green-400',\n                gitStatus === 'modified' && 'text-amber-400',\n                gitStatus === 'deleted' && 'text-red-400',\n              )}\n            >\n              <FolderIconPrimitive\n                closeIcon={<FolderIcon className=\"size-4.5\" />}\n                openIcon={<FolderOpenIcon className=\"size-4.5\" />}\n              />\n              <FileLabelPrimitive\n                className={cn('text-sm', className)}\n                {...props}\n              >\n                {children}\n              </FileLabelPrimitive>\n            </div>\n\n            {gitStatus && (\n              <span\n                className={cn(\n                  'rounded-full size-2',\n                  gitStatus === 'untracked' && 'bg-green-400',\n                  gitStatus === 'modified' && 'bg-amber-400',\n                  gitStatus === 'deleted' && 'bg-red-400',\n                )}\n              />\n            )}\n          </FolderPrimitive>\n        </FolderHighlightPrimitive>\n      </FolderTriggerPrimitive>\n    </FolderHeaderPrimitive>\n  );\n}\n\ntype FolderPanelProps = FolderPanelPrimitiveProps;\n\nfunction FolderPanel(props: FolderPanelProps) {\n  return (\n    <div className=\"relative ml-6 before:absolute before:-left-2 before:inset-y-0 before:w-px before:h-full before:bg-border\">\n      <FolderPanelPrimitive {...props} />\n    </div>\n  );\n}\n\ntype FileItemProps = FilePrimitiveProps & {\n  icon?: React.ElementType;\n  gitStatus?: GitStatus;\n};\n\nfunction FileItem({\n  icon: Icon = FileIcon,\n  className,\n  children,\n  gitStatus,\n  ...props\n}: FileItemProps) {\n  return (\n    <FileHighlightPrimitive>\n      <FilePrimitive\n        className={cn(\n          'flex items-center justify-between gap-2 p-2 pointer-events-none',\n          gitStatus === 'untracked' && 'text-green-400',\n          gitStatus === 'modified' && 'text-amber-400',\n          gitStatus === 'deleted' && 'text-red-400',\n        )}\n      >\n        <div className=\"flex items-center gap-2\">\n          <FileIconPrimitive>\n            <Icon className=\"size-4.5\" />\n          </FileIconPrimitive>\n          <FileLabelPrimitive className={cn('text-sm', className)} {...props}>\n            {children}\n          </FileLabelPrimitive>\n        </div>\n\n        {gitStatus && (\n          <span className=\"text-sm font-medium\">\n            {gitStatus === 'untracked' && 'U'}\n            {gitStatus === 'modified' && 'M'}\n            {gitStatus === 'deleted' && 'D'}\n          </span>\n        )}\n      </FilePrimitive>\n    </FileHighlightPrimitive>\n  );\n}\n\nexport {\n  Files,\n  FolderItem,\n  FolderTrigger,\n  FolderPanel,\n  FileItem,\n  SubFiles,\n  type FilesProps,\n  type FolderItemProps,\n  type FolderTriggerProps,\n  type FolderPanelProps,\n  type FileItemProps,\n  type SubFilesProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/base/files/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-files',
  },
  'components-base-popover': {
    name: 'components-base-popover',
    description: 'An accessible popup anchored to a button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-popover'],
    files: [
      {
        path: 'registry/components/base/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/popover.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Popover as PopoverPrimitive,\n  PopoverTrigger as PopoverTriggerPrimitive,\n  PopoverPositioner as PopoverPositionerPrimitive,\n  PopoverPopup as PopoverPopupPrimitive,\n  PopoverPortal as PopoverPortalPrimitive,\n  PopoverClose as PopoverClosePrimitive,\n  PopoverBackdrop as PopoverBackdropPrimitive,\n  PopoverTitle as PopoverTitlePrimitive,\n  PopoverDescription as PopoverDescriptionPrimitive,\n  type PopoverProps as PopoverPrimitiveProps,\n  type PopoverTriggerProps as PopoverTriggerPrimitiveProps,\n  type PopoverPositionerProps as PopoverPositionerPrimitiveProps,\n  type PopoverPopupProps as PopoverPopupPrimitiveProps,\n  type PopoverCloseProps as PopoverClosePrimitiveProps,\n  type PopoverBackdropProps as PopoverBackdropPrimitiveProps,\n  type PopoverTitleProps as PopoverTitlePrimitiveProps,\n  type PopoverDescriptionProps as PopoverDescriptionPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/popover';\nimport { cn } from '@/lib/utils';\n\ntype PopoverProps = PopoverPrimitiveProps;\n\nfunction Popover(props: PopoverProps) {\n  return <PopoverPrimitive {...props} />;\n}\n\ntype PopoverTriggerProps = PopoverTriggerPrimitiveProps;\n\nfunction PopoverTrigger(props: PopoverTriggerProps) {\n  return <PopoverTriggerPrimitive {...props} />;\n}\n\ntype PopoverPanelProps = PopoverPositionerPrimitiveProps &\n  PopoverPopupPrimitiveProps;\n\nfunction PopoverPanel({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  initialFocus,\n  finalFocus,\n  style,\n  children,\n  ...props\n}: PopoverPanelProps) {\n  return (\n    <PopoverPortalPrimitive>\n      <PopoverPositionerPrimitive\n        align={align}\n        sideOffset={sideOffset}\n        className=\"z-50\"\n        {...props}\n      >\n        <PopoverPopupPrimitive\n          initialFocus={initialFocus}\n          finalFocus={finalFocus}\n          className={cn(\n            'bg-popover text-popover-foreground w-72 rounded-md border p-4 shadow-md outline-hidden origin-(--transform-origin)',\n            className,\n          )}\n          style={style}\n        >\n          {children}\n        </PopoverPopupPrimitive>\n      </PopoverPositionerPrimitive>\n    </PopoverPortalPrimitive>\n  );\n}\n\ntype PopoverCloseProps = PopoverClosePrimitiveProps;\n\nfunction PopoverClose(props: PopoverCloseProps) {\n  return <PopoverClosePrimitive {...props} />;\n}\n\ntype PopoverBackdropProps = PopoverBackdropPrimitiveProps;\n\nfunction PopoverBackdrop(props: PopoverBackdropProps) {\n  return <PopoverBackdropPrimitive {...props} />;\n}\n\ntype PopoverTitleProps = PopoverTitlePrimitiveProps;\n\nfunction PopoverTitle(props: PopoverTitleProps) {\n  return <PopoverTitlePrimitive {...props} />;\n}\n\ntype PopoverDescriptionProps = PopoverDescriptionPrimitiveProps;\n\nfunction PopoverDescription(props: PopoverDescriptionProps) {\n  return <PopoverDescriptionPrimitive {...props} />;\n}\n\nexport {\n  Popover,\n  PopoverTrigger,\n  PopoverPanel,\n  PopoverClose,\n  PopoverBackdrop,\n  PopoverTitle,\n  PopoverDescription,\n  type PopoverProps,\n  type PopoverTriggerProps,\n  type PopoverPanelProps,\n  type PopoverCloseProps,\n  type PopoverBackdropProps,\n  type PopoverTitleProps,\n  type PopoverDescriptionProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-popover',
  },
  'components-base-preview-card': {
    name: 'components-base-preview-card',
    description:
      'A popup that appears when a link is hovered, showing a preview for sighted users.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-preview-card',
    ],
    files: [
      {
        path: 'registry/components/base/preview-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/preview-card.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  PreviewCard as PreviewCardPrimitive,\n  PreviewCardTrigger as PreviewCardTriggerPrimitive,\n  PreviewCardPortal as PreviewCardPortalPrimitive,\n  PreviewCardPositioner as PreviewCardPositionerPrimitive,\n  PreviewCardPopup as PreviewCardPopupPrimitive,\n  PreviewCardBackdrop as PreviewCardBackdropPrimitive,\n  type PreviewCardProps as PreviewCardPrimitiveProps,\n  type PreviewCardTriggerProps as PreviewCardTriggerPrimitiveProps,\n  type PreviewCardPositionerProps as PreviewCardPositionerPrimitiveProps,\n  type PreviewCardPopupProps as PreviewCardPopupPrimitiveProps,\n  type PreviewCardBackdropProps as PreviewCardBackdropPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/preview-card';\nimport { cn } from '@/lib/utils';\n\ntype PreviewCardProps = PreviewCardPrimitiveProps;\n\nfunction PreviewCard(props: PreviewCardProps) {\n  return <PreviewCardPrimitive {...props} />;\n}\n\ntype PreviewCardTriggerProps = PreviewCardTriggerPrimitiveProps;\n\nfunction PreviewCardTrigger(props: PreviewCardTriggerProps) {\n  return <PreviewCardTriggerPrimitive {...props} />;\n}\n\ntype PreviewCardPanelProps = PreviewCardPositionerPrimitiveProps &\n  PreviewCardPopupPrimitiveProps;\n\nfunction PreviewCardPanel({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  style,\n  children,\n  ...props\n}: PreviewCardPanelProps) {\n  return (\n    <PreviewCardPortalPrimitive>\n      <PreviewCardPositionerPrimitive\n        align={align}\n        sideOffset={sideOffset}\n        className=\"z-50\"\n        {...props}\n      >\n        <PreviewCardPopupPrimitive\n          className={cn(\n            'bg-popover text-popover-foreground w-64 origin-(--transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n            className,\n          )}\n          style={style}\n        >\n          {children}\n        </PreviewCardPopupPrimitive>\n      </PreviewCardPositionerPrimitive>\n    </PreviewCardPortalPrimitive>\n  );\n}\n\ntype PreviewCardBackdropProps = PreviewCardBackdropPrimitiveProps;\n\nfunction PreviewCardBackdrop(props: PreviewCardBackdropProps) {\n  return <PreviewCardBackdropPrimitive {...props} />;\n}\n\nexport {\n  PreviewCard,\n  PreviewCardTrigger,\n  PreviewCardPanel,\n  PreviewCardBackdrop,\n  type PreviewCardProps,\n  type PreviewCardTriggerProps,\n  type PreviewCardPanelProps,\n  type PreviewCardBackdropProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/preview-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-preview-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-preview-card',
  },
  'components-base-progress': {
    name: 'components-base-progress',
    description: 'Displays the status of a task that takes a long time.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-progress'],
    files: [
      {
        path: 'registry/components/base/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/progress.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Progress as ProgressPrimitive,\n  ProgressTrack as ProgressTrackPrimitive,\n  ProgressIndicator as ProgressIndicatorPrimitive,\n  ProgressLabel as ProgressLabelPrimitive,\n  ProgressValue as ProgressValuePrimitive,\n  type ProgressProps as ProgressPrimitiveProps,\n  type ProgressTrackProps as ProgressTrackPrimitiveProps,\n  type ProgressLabelProps as ProgressLabelPrimitiveProps,\n  type ProgressValueProps as ProgressValuePrimitiveProps,\n} from '@/components/animate-ui/primitives/base/progress';\nimport { cn } from '@/lib/utils';\n\ntype ProgressProps = ProgressPrimitiveProps;\n\nfunction Progress(props: ProgressProps) {\n  return <ProgressPrimitive {...props} />;\n}\n\ntype ProgressTrackProps = ProgressTrackPrimitiveProps;\n\nfunction ProgressTrack({ className, ...props }: ProgressTrackProps) {\n  return (\n    <ProgressTrackPrimitive\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressIndicatorPrimitive className=\"bg-primary rounded-full h-full w-full flex-1\" />\n    </ProgressTrackPrimitive>\n  );\n}\n\ntype ProgressLabelProps = ProgressLabelPrimitiveProps;\n\nfunction ProgressLabel(props: ProgressLabelProps) {\n  return <ProgressLabelPrimitive className=\"text-sm font-medium\" {...props} />;\n}\n\ntype ProgressValueProps = ProgressValuePrimitiveProps;\n\nfunction ProgressValue(props: ProgressValueProps) {\n  return <ProgressValuePrimitive className=\"text-sm\" {...props} />;\n}\n\nexport {\n  Progress,\n  ProgressTrack,\n  ProgressLabel,\n  ProgressValue,\n  type ProgressProps,\n  type ProgressTrackProps,\n  type ProgressLabelProps,\n  type ProgressValueProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-progress',
  },
  'components-base-switch': {
    name: 'components-base-switch',
    description: 'A control that indicates whether a setting is on or off.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-switch'],
    files: [
      {
        path: 'registry/components/base/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/switch.tsx',
        content:
          'import * as React from \'react\';\n\nimport {\n  Switch as SwitchPrimitive,\n  SwitchThumb as SwitchThumbPrimitive,\n  SwitchIcon as SwitchIconPrimitive,\n  type SwitchProps as SwitchPrimitiveProps,\n} from \'@/components/animate-ui/primitives/base/switch\';\nimport { cn } from \'@/lib/utils\';\n\ntype SwitchProps = SwitchPrimitiveProps & {\n  pressedWidth?: number;\n  startIcon?: React.ReactElement;\n  endIcon?: React.ReactElement;\n  thumbIcon?: React.ReactElement;\n};\n\nfunction Switch({\n  className,\n  pressedWidth = 19,\n  startIcon,\n  endIcon,\n  thumbIcon,\n  ...props\n}: SwitchProps) {\n  return (\n    <SwitchPrimitive\n      className={cn(\n        \'relative peer focus-visible:border-ring focus-visible:ring-ring/50 flex h-5 w-8 px-px shrink-0 items-center justify-start rounded-full border border-transparent shadow-xs outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\',\n        \'data-[checked]:bg-primary data-[unchecked]:bg-input dark:data-[unchecked]:bg-input/80 data-[checked]:justify-end\',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchThumbPrimitive\n        className={cn(\n          \'relative z-10 bg-background dark:data-[unchecked]:bg-foreground dark:data-[checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0\',\n        )}\n        pressedAnimation={{ width: pressedWidth }}\n      >\n        {thumbIcon && (\n          <SwitchIconPrimitive\n            position="thumb"\n            className="absolute [&_svg]:size-[9px] left-1/2 top-1/2 -translate-1/2 dark:text-neutral-500 text-neutral-400"\n          >\n            {thumbIcon}\n          </SwitchIconPrimitive>\n        )}\n      </SwitchThumbPrimitive>\n\n      {startIcon && (\n        <SwitchIconPrimitive\n          position="left"\n          className="absolute [&_svg]:size-[9px] left-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-500 text-neutral-400"\n        >\n          {startIcon}\n        </SwitchIconPrimitive>\n      )}\n      {endIcon && (\n        <SwitchIconPrimitive\n          position="right"\n          className="absolute [&_svg]:size-[9px] right-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-400 text-neutral-500"\n        >\n          {endIcon}\n        </SwitchIconPrimitive>\n      )}\n    </SwitchPrimitive>\n  );\n}\n\nexport { Switch, type SwitchProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/base/switch/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-switch',
  },
  'components-base-toggle': {
    name: 'components-base-toggle',
    description: 'A two-state button that can be on or off.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-toggle'],
    files: [
      {
        path: 'registry/components/base/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/toggle.tsx',
        content:
          "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport {\n  Toggle as TogglePrimitive,\n  ToggleItem as ToggleItemPrimitive,\n  ToggleHighlight as ToggleHighlightPrimitive,\n  type ToggleProps as TogglePrimitiveProps,\n  type ToggleItemProps as ToggleItemPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/toggle';\nimport { cn } from '@/lib/utils';\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted/40 hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,background-color,box-shadow] duration-200 ease-in-out aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent/40 hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype ToggleProps = TogglePrimitiveProps &\n  ToggleItemPrimitiveProps &\n  VariantProps<typeof toggleVariants>;\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  pressed,\n  defaultPressed,\n  onPressedChange,\n  disabled,\n  ...props\n}: ToggleProps) {\n  return (\n    <TogglePrimitive\n      pressed={pressed}\n      defaultPressed={defaultPressed}\n      onPressedChange={onPressedChange}\n      disabled={disabled}\n      className=\"relative\"\n    >\n      <ToggleHighlightPrimitive className=\"bg-accent rounded-md\" />\n      <ToggleItemPrimitive\n        className={cn(toggleVariants({ variant, size, className }))}\n        {...props}\n      />\n    </TogglePrimitive>\n  );\n}\n\nexport { Toggle, toggleVariants, type ToggleProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/base/toggle/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-toggle',
  },
  'components-base-toggle-group': {
    name: 'components-base-toggle-group',
    description: 'Provides a shared state to a series of toggle buttons.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-toggle-group',
    ],
    files: [
      {
        path: 'registry/components/base/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/toggle-group.tsx',
        content:
          "import * as React from 'react';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport {\n  ToggleGroup as ToggleGroupPrimitive,\n  Toggle as TogglePrimitive,\n  ToggleGroupHighlight as ToggleGroupHighlightPrimitive,\n  ToggleHighlight as ToggleHighlightPrimitive,\n  useToggleGroup as useToggleGroupPrimitive,\n  type ToggleGroupProps as ToggleGroupPrimitiveProps,\n  type ToggleProps as TogglePrimitiveProps,\n} from '@/components/animate-ui/primitives/base/toggle-group';\nimport { toggleVariants } from '@/components/animate-ui/components/base/toggle';\nimport { cn } from '@/lib/utils';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\nconst [ToggleGroupProvider, useToggleGroup] =\n  getStrictContext<VariantProps<typeof toggleVariants>>('ToggleGroupContext');\n\ntype ToggleGroupProps = ToggleGroupPrimitiveProps &\n  VariantProps<typeof toggleVariants>;\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  toggleMultiple,\n  ...props\n}: ToggleGroupProps) {\n  return (\n    <ToggleGroupPrimitive\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex gap-0.5 w-fit items-center rounded-lg data-[variant=outline]:shadow-xs data-[variant=outline]:border data-[variant=outline]:p-0.5',\n        className,\n      )}\n      toggleMultiple={toggleMultiple}\n      {...props}\n    >\n      <ToggleGroupProvider value={{ variant, size }}>\n        {!toggleMultiple ? (\n          <ToggleGroupHighlightPrimitive className=\"bg-accent rounded-md\">\n            {children}\n          </ToggleGroupHighlightPrimitive>\n        ) : (\n          children\n        )}\n      </ToggleGroupProvider>\n    </ToggleGroupPrimitive>\n  );\n}\n\ntype ToggleProps = TogglePrimitiveProps & VariantProps<typeof toggleVariants>;\n\nfunction Toggle({ className, children, variant, size, ...props }: ToggleProps) {\n  const { variant: contextVariant, size: contextSize } = useToggleGroup();\n  const { toggleMultiple } = useToggleGroupPrimitive();\n\n  return (\n    <ToggleHighlightPrimitive\n      value={props.value?.toString()}\n      className={cn(toggleMultiple && 'bg-accent rounded-md')}\n    >\n      <TogglePrimitive\n        data-variant={contextVariant || variant}\n        data-size={contextSize || size}\n        className={cn(\n          toggleVariants({\n            variant: contextVariant || variant,\n            size: contextSize || size,\n          }),\n          'min-w-0 border-0 flex-1 shrink-0 shadow-none rounded-md focus:z-10 focus-visible:z-10',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </TogglePrimitive>\n    </ToggleHighlightPrimitive>\n  );\n}\n\nexport { ToggleGroup, Toggle, type ToggleGroupProps, type ToggleProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-toggle-group',
  },
  'components-base-tooltip': {
    name: 'components-base-tooltip',
    description:
      'A popup that appears when an element is hovered or focused, showing a hint for sighted users.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-tooltip'],
    files: [
      {
        path: 'registry/components/base/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/base/tooltip.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  TooltipProvider as TooltipProviderPrimitive,\n  Tooltip as TooltipPrimitive,\n  TooltipTrigger as TooltipTriggerPrimitive,\n  TooltipPositioner as TooltipPositionerPrimitive,\n  TooltipPopup as TooltipPopupPrimitive,\n  TooltipArrow as TooltipArrowPrimitive,\n  TooltipPortal as TooltipPortalPrimitive,\n  type TooltipProviderProps as TooltipProviderPrimitiveProps,\n  type TooltipProps as TooltipPrimitiveProps,\n  type TooltipTriggerProps as TooltipTriggerPrimitiveProps,\n  type TooltipPositionerProps as TooltipPositionerPrimitiveProps,\n  type TooltipPopupProps as TooltipPopupPrimitiveProps,\n} from '@/components/animate-ui/primitives/base/tooltip';\nimport { cn } from '@/lib/utils';\n\ntype TooltipProviderProps = TooltipProviderPrimitiveProps;\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: TooltipProviderProps) {\n  return <TooltipProviderPrimitive delayDuration={delayDuration} {...props} />;\n}\n\ntype TooltipProps = TooltipPrimitiveProps & {\n  delayDuration?: TooltipPrimitiveProps['delayDuration'];\n};\n\nfunction Tooltip({ delayDuration = 0, ...props }: TooltipProps) {\n  return (\n    <TooltipProvider delayDuration={delayDuration}>\n      <TooltipPrimitive {...props} />\n    </TooltipProvider>\n  );\n}\n\ntype TooltipTriggerProps = TooltipTriggerPrimitiveProps;\n\nfunction TooltipTrigger({ ...props }: TooltipTriggerProps) {\n  return <TooltipTriggerPrimitive {...props} />;\n}\n\ntype TooltipPanelProps = TooltipPositionerPrimitiveProps &\n  TooltipPopupPrimitiveProps;\n\nfunction TooltipPanel({\n  className,\n  sideOffset = 4,\n  children,\n  style,\n  ...props\n}: TooltipPanelProps) {\n  return (\n    <TooltipPortalPrimitive>\n      <TooltipPositionerPrimitive\n        sideOffset={sideOffset}\n        className=\"z-50\"\n        {...props}\n      >\n        <TooltipPopupPrimitive\n          className={cn(\n            'bg-primary text-primary-foreground w-fit origin-(--transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n            className,\n          )}\n          style={style}\n        >\n          {children}\n          <TooltipArrowPrimitive className=\"bg-primary fill-primary z-50 size-2.5 data-[side='bottom']:-top-[4px] data-[side='right']:-left-[4px] data-[side='left']:-right-[4px] data-[side='inline-start']:-right-[4px] data-[side='inline-end']:-left-[4px] rotate-45 rounded-[2px]\" />\n        </TooltipPopupPrimitive>\n      </TooltipPositionerPrimitive>\n    </TooltipPortalPrimitive>\n  );\n}\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipPanel,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipPanelProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/base/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-base-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-base-tooltip',
  },
  'components-buttons-button': {
    name: 'components-buttons-button',
    description: 'A button component with a variety of styles and animations.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-button',
    ],
    files: [
      {
        path: 'registry/components/buttons/button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/button.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/button';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[box-shadow,_color,_background-color,_border-color,_outline-color,_text-decoration-color,_fill,_stroke] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        accent: 'bg-accent text-accent-foreground shadow-xs hover:bg-accent/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-sm': 'size-8 rounded-md',\n        'icon-lg': 'size-10 rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype ButtonProps = ButtonPrimitiveProps & VariantProps<typeof buttonVariants>;\n\nfunction Button({ className, variant, size, ...props }: ButtonProps) {\n  return (\n    <ButtonPrimitive\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants, type ButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/button/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-button';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-button',
  },
  'components-buttons-copy': {
    name: 'components-buttons-copy',
    description:
      'A copy button component with a variety of styles and animations.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', 'class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-button',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/components/buttons/copy/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/copy.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/button';\nimport { cn } from '@/lib/utils';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\nconst buttonVariants = cva(\n  \"flex items-center justify-center rounded-md transition-[box-shadow,_color,_background-color,_border-color,_outline-color,_text-decoration-color,_fill,_stroke] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        accent: 'bg-accent text-accent-foreground shadow-xs hover:bg-accent/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'size-9',\n        xs: \"size-7 [&_svg:not([class*='size-'])]:size-3.5 rounded-md\",\n        sm: 'size-8 rounded-md',\n        lg: 'size-10 rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype CopyButtonProps = Omit<ButtonPrimitiveProps, 'children'> &\n  VariantProps<typeof buttonVariants> & {\n    content: string;\n    copied?: boolean;\n    onCopiedChange?: (copied: boolean, content?: string) => void;\n    delay?: number;\n  };\n\nfunction CopyButton({\n  className,\n  content,\n  copied,\n  onCopiedChange,\n  onClick,\n  variant,\n  size,\n  delay = 3000,\n  ...props\n}: CopyButtonProps) {\n  const [isCopied, setIsCopied] = useControlledState({\n    value: copied,\n    onChange: onCopiedChange,\n  });\n\n  const handleCopy = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n      if (copied) return;\n      if (content) {\n        navigator.clipboard\n          .writeText(content)\n          .then(() => {\n            setIsCopied(true);\n            onCopiedChange?.(true, content);\n            setTimeout(() => {\n              setIsCopied(false);\n              onCopiedChange?.(false);\n            }, delay);\n          })\n          .catch((error) => {\n            console.error('Error copying command', error);\n          });\n      }\n    },\n    [onCopiedChange, delay],\n  );\n\n  const Icon = isCopied ? CheckIcon : CopyIcon;\n\n  return (\n    <ButtonPrimitive\n      data-slot=\"copy-button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      onClick={handleCopy}\n      {...props}\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.span\n          key={isCopied ? 'check' : 'copy'}\n          data-slot=\"copy-button-icon\"\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          exit={{ scale: 0 }}\n          transition={{ duration: 0.15 }}\n        >\n          <Icon />\n        </motion.span>\n      </AnimatePresence>\n    </ButtonPrimitive>\n  );\n}\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/copy/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-copy';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-copy',
  },
  'components-buttons-flip': {
    name: 'components-buttons-flip',
    description: 'A button that flips between two states on hover.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-button',
      'https://animate-ui.com/r/primitives-buttons-flip',
    ],
    files: [
      {
        path: 'registry/components/buttons/flip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/flip.tsx',
        content:
          "import * as React from 'react';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport {\n  FlipButton as FlipButtonPrimitive,\n  FlipButtonFront as FlipButtonFrontPrimitive,\n  FlipButtonBack as FlipButtonBackPrimitive,\n  type FlipButtonProps as FlipButtonPrimitiveProps,\n  type FlipButtonFrontProps as FlipButtonFrontPrimitiveProps,\n  type FlipButtonBackProps as FlipButtonBackPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/flip';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { buttonVariants } from '@/components/animate-ui/components/buttons/button';\nimport { cn } from '@/lib/utils';\n\ntype FlipButtonContextType = VariantProps<typeof buttonVariants>;\n\nconst [FlipButtonProvider, useFlipButton] =\n  getStrictContext<FlipButtonContextType>('FlipButtonContext');\n\ntype FlipButtonProps = FlipButtonPrimitiveProps &\n  VariantProps<typeof buttonVariants>;\n\nfunction FlipButton({ variant, size, ...props }: FlipButtonProps) {\n  return (\n    <FlipButtonProvider value={{ variant, size }}>\n      <FlipButtonPrimitive {...props} />\n    </FlipButtonProvider>\n  );\n}\n\ntype FlipButtonFrontProps = FlipButtonFrontPrimitiveProps &\n  VariantProps<typeof buttonVariants>;\n\nfunction FlipButtonFront({\n  variant,\n  size,\n  className,\n  ...props\n}: FlipButtonFrontProps) {\n  const { variant: buttonVariant, size: buttonSize } = useFlipButton();\n  return (\n    <FlipButtonFrontPrimitive\n      className={cn(\n        buttonVariants({\n          variant: variant ?? buttonVariant,\n          size: size ?? buttonSize,\n          className,\n        }),\n      )}\n      {...props}\n    />\n  );\n}\n\ntype FlipButtonBackProps = FlipButtonBackPrimitiveProps &\n  VariantProps<typeof buttonVariants>;\n\nfunction FlipButtonBack({\n  variant,\n  size,\n  className,\n  ...props\n}: FlipButtonBackProps) {\n  const { variant: buttonVariant, size: buttonSize } = useFlipButton();\n  return (\n    <FlipButtonBackPrimitive\n      className={cn(\n        buttonVariants({\n          variant: variant ?? buttonVariant,\n          size: size ?? buttonSize,\n          className,\n        }),\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  FlipButton,\n  FlipButtonFront,\n  FlipButtonBack,\n  type FlipButtonProps,\n  type FlipButtonFrontProps,\n  type FlipButtonBackProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/flip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-flip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-flip',
  },
  'components-buttons-github-stars': {
    name: 'components-buttons-github-stars',
    description:
      'A clickable button that links to a GitHub repository and displays the number of stars.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-button',
      'https://animate-ui.com/r/primitives-animate-github-stars',
    ],
    files: [
      {
        path: 'registry/components/buttons/github-stars/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/github-stars.tsx',
        content:
          "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { StarIcon } from 'lucide-react';\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/button';\nimport {\n  GithubStars,\n  GithubStarsIcon,\n  GithubStarsLogo,\n  GithubStarsNumber,\n  GithubStarsParticles,\n  type GithubStarsProps,\n} from '@/components/animate-ui/primitives/animate/github-stars';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[box-shadow,_color,_background-color,_border-color,_outline-color,_text-decoration-color,_fill,_stroke] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        accent: 'bg-accent text-accent-foreground shadow-xs hover:bg-accent/90',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst buttonStarVariants = cva('', {\n  variants: {\n    variant: {\n      default:\n        'fill-neutral-700 stroke-neutral-700 dark:fill-neutral-300 dark:stroke-neutral-300',\n      accent:\n        'fill-neutral-300 stroke-neutral-300 dark:fill-neutral-700 dark:stroke-neutral-700',\n      outline:\n        'fill-neutral-300 stroke-neutral-300 dark:fill-neutral-700 dark:stroke-neutral-700',\n      ghost:\n        'fill-neutral-300 stroke-neutral-300 dark:fill-neutral-700 dark:stroke-neutral-700',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\ntype GitHubStarsButtonProps = Omit<\n  ButtonPrimitiveProps & GithubStarsProps,\n  'asChild' | 'children'\n> &\n  VariantProps<typeof buttonVariants>;\n\nfunction GitHubStarsButton({\n  className,\n  username,\n  repo,\n  value,\n  delay,\n  inView,\n  inViewMargin,\n  inViewOnce,\n  variant,\n  size,\n  ...props\n}: GitHubStarsButtonProps) {\n  return (\n    <GithubStars\n      asChild\n      username={username}\n      repo={repo}\n      value={value}\n      delay={delay}\n      inView={inView}\n      inViewMargin={inViewMargin}\n      inViewOnce={inViewOnce}\n    >\n      <ButtonPrimitive\n        className={cn(buttonVariants({ variant, size, className }))}\n        {...props}\n      >\n        <GithubStarsLogo />\n        <GithubStarsNumber />\n        <GithubStarsParticles className=\"text-yellow-500\">\n          <GithubStarsIcon\n            icon={StarIcon}\n            data-variant={variant}\n            className={cn(buttonStarVariants({ variant }))}\n            activeClassName=\"text-yellow-500\"\n            size={18}\n          />\n        </GithubStarsParticles>\n      </ButtonPrimitive>\n    </GithubStars>\n  );\n}\n\nexport { GitHubStarsButton, type GitHubStarsButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/github-stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-github-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-github-stars',
  },
  'components-buttons-icon': {
    name: 'components-buttons-icon',
    description:
      'An icon button component with a variety of styles and animations.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-button',
    ],
    files: [
      {
        path: 'registry/components/buttons/icon/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/icon.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport {\n  Button as ButtonPrimitive,\n  type ButtonProps as ButtonPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/button';\nimport { cn } from '@/lib/utils';\nimport {\n  Particles,\n  ParticlesEffect,\n} from '@/components/animate-ui/primitives/effects/particles';\n\nconst buttonVariants = cva(\n  \"flex items-center justify-center rounded-md transition-[box-shadow,_color,_background-color,_border-color,_outline-color,_text-decoration-color,_fill,_stroke] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        accent: 'bg-accent text-accent-foreground shadow-xs hover:bg-accent/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'size-9',\n        xs: \"size-7 [&_svg:not([class*='size-'])]:size-3.5 rounded-md\",\n        sm: 'size-8 rounded-md',\n        lg: 'size-10 rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype IconButtonProps = Omit<ButtonPrimitiveProps, 'asChild'> &\n  VariantProps<typeof buttonVariants> & {\n    children?: React.ReactNode;\n  };\n\nfunction IconButton({\n  className,\n  onClick,\n  variant,\n  size,\n  children,\n  ...props\n}: IconButtonProps) {\n  const [isActive, setIsActive] = React.useState(false);\n  const [key, setKey] = React.useState(0);\n\n  return (\n    <Particles asChild animate={isActive} key={key}>\n      <ButtonPrimitive\n        data-slot=\"icon-button\"\n        className={cn(buttonVariants({ variant, size, className }))}\n        onClick={(e) => {\n          setKey((prev) => prev + 1);\n          setIsActive(true);\n          onClick?.(e);\n        }}\n        {...props}\n      >\n        {children}\n        <ParticlesEffect\n          data-variant={variant}\n          className=\"bg-neutral-500 size-1 rounded-full\"\n        />\n      </ButtonPrimitive>\n    </Particles>\n  );\n}\n\nexport { IconButton, buttonVariants, type IconButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/icon/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-icon';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-icon',
  },
  'components-buttons-liquid': {
    name: 'components-buttons-liquid',
    description: 'A button that fills on hover.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-liquid',
    ],
    files: [
      {
        path: 'registry/components/buttons/liquid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/liquid.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport {\n  LiquidButton as LiquidButtonPrimitive,\n  type LiquidButtonProps as LiquidButtonPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/liquid';\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[box-shadow,_color,_background-color,_border-color,_outline-color,_text-decoration-color,_fill,_stroke] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          '[--liquid-button-background-color:var(--accent)] [--liquid-button-color:var(--primary)] text-primary hover:text-primary-foreground shadow-xs',\n        destructive:\n          '[--liquid-button-background-color:var(--accent)] [--liquid-button-color:var(--destructive)] text-white shadow-xs focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40',\n        secondary:\n          '[--liquid-button-background-color:var(--accent)] [--liquid-button-color:var(--secondary)] text-secondary hover:text-secondary-foreground shadow-xs',\n        ghost:\n          '[--liquid-button-background-color:var(--transparent)] [--liquid-button-color:var(--primary)] text-primary hover:text-primary-foreground shadow-xs',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-sm': 'size-8 rounded-md',\n        'icon-lg': 'size-10 rounded-md',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype LiquidButtonProps = LiquidButtonPrimitiveProps &\n  VariantProps<typeof buttonVariants>;\n\nfunction LiquidButton({\n  className,\n  variant,\n  size,\n  ...props\n}: LiquidButtonProps) {\n  return (\n    <LiquidButtonPrimitive\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { LiquidButton, buttonVariants, type LiquidButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/liquid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-liquid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-liquid',
  },
  'components-buttons-ripple': {
    name: 'components-buttons-ripple',
    description: 'A button that animates on tap with a ripple effect.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-button',
      'https://animate-ui.com/r/primitives-buttons-ripple',
    ],
    files: [
      {
        path: 'registry/components/buttons/ripple/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/buttons/ripple.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport { buttonVariants } from '@/components/animate-ui/components/buttons/button';\nimport {\n  RippleButton as RippleButtonPrimitive,\n  RippleButtonRipples as RippleButtonRipplesPrimitive,\n  type RippleButtonProps as RippleButtonPrimitiveProps,\n  type RippleButtonRipplesProps as RippleButtonRipplesPrimitiveProps,\n} from '@/components/animate-ui/primitives/buttons/ripple';\nimport { cn } from '@/lib/utils';\n\nconst rippleButtonVariants = {\n  default: '[--ripple-button-ripple-color:var(--primary-foreground)]',\n  accent: '[--ripple-button-ripple-color:var(--accent-foreground)]',\n  destructive: '[--ripple-button-ripple-color:var(--destructive-foreground)]',\n  outline: '[--ripple-button-ripple-color:var(--foreground)]',\n  secondary: '[--ripple-button-ripple-color:var(--secondary-foreground)]',\n  ghost: '[--ripple-button-ripple-color:var(--foreground)]',\n  link: '[--ripple-button-ripple-color:var(--primary-foreground)]',\n};\n\ntype RippleButtonProps = RippleButtonPrimitiveProps &\n  VariantProps<typeof buttonVariants>;\n\nfunction RippleButton({\n  className,\n  variant,\n  size,\n  ...props\n}: RippleButtonProps) {\n  return (\n    <RippleButtonPrimitive\n      className={cn(\n        buttonVariants({ variant, size, className }),\n        rippleButtonVariants[variant as keyof typeof rippleButtonVariants],\n      )}\n      {...props}\n    />\n  );\n}\n\ntype RippleButtonRipplesProps = RippleButtonRipplesPrimitiveProps;\n\nfunction RippleButtonRipples(props: RippleButtonRipplesProps) {\n  return <RippleButtonRipplesPrimitive {...props} />;\n}\n\nexport {\n  RippleButton,\n  RippleButtonRipples,\n  type RippleButtonProps,\n  type RippleButtonRipplesProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/buttons/ripple/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-buttons-ripple';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-buttons-ripple',
  },
  'components-community-management-bar': {
    name: 'components-community-management-bar',
    description: 'A management bar for managing items.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-sliding-number',
    ],
    files: [
      {
        path: 'registry/components/community/management-bar/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/community/management-bar.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Ban,\n  X,\n  Command,\n  IdCard,\n} from \'lucide-react\';\nimport { SlidingNumber } from \'@/components/animate-ui/primitives/texts/sliding-number\';\nimport { motion, type Variants, type Transition } from \'motion/react\';\n\nconst TOTAL_PAGES = 10;\n\nconst BUTTON_MOTION_CONFIG = {\n  initial: \'rest\',\n  whileHover: \'hover\',\n  whileTap: \'tap\',\n  variants: {\n    rest: { maxWidth: \'40px\' },\n    hover: {\n      maxWidth: \'140px\',\n      transition: { type: \'spring\', stiffness: 200, damping: 35, delay: 0.15 },\n    },\n    tap: { scale: 0.95 },\n  },\n  transition: { type: \'spring\', stiffness: 250, damping: 25 },\n} as const;\n\nconst LABEL_VARIANTS: Variants = {\n  rest: { opacity: 0, x: 4 },\n  hover: { opacity: 1, x: 0, visibility: \'visible\' },\n  tap: { opacity: 1, x: 0, visibility: \'visible\' },\n};\n\nconst LABEL_TRANSITION: Transition = {\n  type: \'spring\',\n  stiffness: 200,\n  damping: 25,\n};\n\nfunction ManagementBar() {\n  const [currentPage, setCurrentPage] = React.useState(1);\n\n  const handlePrevPage = React.useCallback(() => {\n    if (currentPage > 1) setCurrentPage(currentPage - 1);\n  }, [currentPage]);\n\n  const handleNextPage = React.useCallback(() => {\n    if (currentPage < TOTAL_PAGES) setCurrentPage(currentPage + 1);\n  }, [currentPage]);\n\n  return (\n    <div className="flex w-fit flex-wrap items-center gap-y-2 rounded-2xl border border-border bg-background p-2 shadow-lg">\n      <div className="mx-auto flex shrink-0 items-center">\n        <button\n          disabled={currentPage === 1}\n          className="p-1 text-muted-foreground transition-colors hover:text-foreground disabled:text-muted-foreground/30 disabled:hover:text-muted-foreground/30"\n          onClick={handlePrevPage}\n        >\n          <ChevronLeft size={20} />\n        </button>\n        <div className="mx-2 flex items-center space-x-1 text-sm tabular-nums">\n          <SlidingNumber\n            className="text-foreground"\n            padStart\n            number={currentPage}\n          />\n          <span className="text-muted-foreground">/ {TOTAL_PAGES}</span>\n        </div>\n        <button\n          disabled={currentPage === TOTAL_PAGES}\n          className="p-1 text-muted-foreground transition-colors hover:text-foreground disabled:text-muted-foreground/30 disabled:hover:text-muted-foreground/30"\n          onClick={handleNextPage}\n        >\n          <ChevronRight size={20} />\n        </button>\n      </div>\n\n      <div className="mx-3 h-6 w-px bg-border rounded-full" />\n\n      <motion.div\n        layout\n        layoutRoot\n        className="mx-auto flex flex-wrap space-x-2 sm:flex-nowrap"\n      >\n        <motion.button\n          {...BUTTON_MOTION_CONFIG}\n          className="flex h-10 items-center space-x-2 overflow-hidden whitespace-nowrap rounded-lg bg-neutral-200/60 dark:bg-neutral-600/80 px-2.5 py-2 text-neutral-600 dark:text-neutral-200"\n          aria-label="Blacklist"\n        >\n          <Ban size={20} className="shrink-0" />\n          <motion.span\n            variants={LABEL_VARIANTS}\n            transition={LABEL_TRANSITION}\n            className="invisible text-sm"\n          >\n            Blacklist\n          </motion.span>\n        </motion.button>\n\n        <motion.button\n          {...BUTTON_MOTION_CONFIG}\n          className="flex h-10 items-center space-x-2 overflow-hidden whitespace-nowrap rounded-lg bg-red-200/60 dark:bg-red-800/80 px-2.5 py-2 text-red-600 dark:text-red-300"\n          aria-label="Reject"\n        >\n          <X size={20} className="shrink-0" />\n          <motion.span\n            variants={LABEL_VARIANTS}\n            transition={LABEL_TRANSITION}\n            className="invisible text-sm"\n          >\n            Reject\n          </motion.span>\n        </motion.button>\n\n        <motion.button\n          {...BUTTON_MOTION_CONFIG}\n          className="flex h-10 items-center space-x-2 overflow-hidden whitespace-nowrap rounded-lg bg-green-200/60 dark:bg-green-800/80 px-2.5 py-2 text-green-600 dark:text-green-300"\n          aria-label="Hire"\n        >\n          <IdCard size={20} className="shrink-0" />\n          <motion.span\n            variants={LABEL_VARIANTS}\n            transition={LABEL_TRANSITION}\n            className="invisible text-sm"\n          >\n            Hire\n          </motion.span>\n        </motion.button>\n      </motion.div>\n\n      <div className="mx-3 hidden h-6 w-px bg-border sm:block rounded-full" />\n\n      <motion.button\n        whileTap={{ scale: 0.975 }}\n        className="flex w-full h-10 text-sm cursor-pointer items-center justify-center rounded-lg bg-teal-500 dark:bg-teal-600/80 px-3 py-2 text-white transition-colors duration-300 dark:hover:bg-teal-800 hover:bg-teal-600 sm:w-auto"\n      >\n        <span className="mr-1 text-neutral-200">Move to:</span>\n        <span>Interview I</span>\n        <div className="mx-3 h-5 w-px bg-white/40 rounded-full" />\n        <div className="flex items-center gap-1 rounded-md bg-white/20 px-1.5 py-0.5 -mr-1">\n          <Command size={14} />E\n        </div>\n      </motion.button>\n    </div>\n  );\n}\n\nexport { ManagementBar };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/community/management-bar/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-community-management-bar';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-community-management-bar',
  },
  'components-community-pin-list': {
    name: 'components-community-pin-list',
    description:
      'A playful list for pinning and unpinning items, with smooth animated transitions as items move between groups.',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/community/pin-list/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/community/pin-list.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Pin } from 'lucide-react';\nimport {\n  motion,\n  LayoutGroup,\n  AnimatePresence,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype PinListItem = {\n  id: number;\n  name: string;\n  info: string;\n  icon: React.ElementType;\n  pinned: boolean;\n};\n\ntype PinListProps = {\n  items: PinListItem[];\n  labels?: {\n    pinned?: string;\n    unpinned?: string;\n  };\n  transition?: Transition;\n  labelMotionProps?: HTMLMotionProps<'p'>;\n  className?: string;\n  labelClassName?: string;\n  pinnedSectionClassName?: string;\n  unpinnedSectionClassName?: string;\n  zIndexResetDelay?: number;\n} & HTMLMotionProps<'div'>;\n\nfunction PinList({\n  items,\n  labels = { pinned: 'Pinned Items', unpinned: 'All Items' },\n  transition = { stiffness: 320, damping: 20, mass: 0.8, type: 'spring' },\n  labelMotionProps = {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n    transition: { duration: 0.22, ease: 'easeInOut' },\n  },\n  className,\n  labelClassName,\n  pinnedSectionClassName,\n  unpinnedSectionClassName,\n  zIndexResetDelay = 500,\n  ...props\n}: PinListProps) {\n  const [listItems, setListItems] = React.useState(items);\n  const [togglingGroup, setTogglingGroup] = React.useState<\n    'pinned' | 'unpinned' | null\n  >(null);\n\n  const pinned = listItems.filter((u) => u.pinned);\n  const unpinned = listItems.filter((u) => !u.pinned);\n\n  const toggleStatus = (id: number) => {\n    const item = listItems.find((u) => u.id === id);\n    if (!item) return;\n\n    setTogglingGroup(item.pinned ? 'pinned' : 'unpinned');\n    setListItems((prev) => {\n      const idx = prev.findIndex((u) => u.id === id);\n      if (idx === -1) return prev;\n      const updated = [...prev];\n      const [item] = updated.splice(idx, 1);\n      if (!item) return prev;\n      const toggled = { ...item, pinned: !item.pinned };\n      if (toggled.pinned) updated.push(toggled);\n      else updated.unshift(toggled);\n      return updated;\n    });\n    // Reset group z-index after the animation duration (keep in sync with animation timing)\n    setTimeout(() => setTogglingGroup(null), zIndexResetDelay);\n  };\n\n  return (\n    <motion.div className={cn('space-y-10', className)} {...props}>\n      <LayoutGroup>\n        <div>\n          {pinned.length > 0 && (\n            <div\n              className={cn(\n                'space-y-3 relative',\n                togglingGroup === 'pinned' ? 'z-5' : 'z-10',\n                pinnedSectionClassName,\n              )}\n            >\n              {pinned.map((item) => (\n                <motion.div\n                  key={item.id}\n                  layoutId={`item-${item.id}`}\n                  onClick={() => toggleStatus(item.id)}\n                  transition={transition}\n                  className=\"flex items-center justify-between gap-5 rounded-2xl bg-neutral-200 dark:bg-neutral-800 p-2\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"rounded-lg bg-background p-2\">\n                      <item.icon className=\"size-5 text-neutral-500 dark:text-neutral-400\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-semibold\">{item.name}</div>\n                      <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-medium\">\n                        {item.info}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-center size-8 rounded-full bg-neutral-400 dark:bg-neutral-600\">\n                    <Pin className=\"size-4 text-white fill-white\" />\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        <div>\n          <AnimatePresence>\n            {unpinned.length > 0 && (\n              <motion.p\n                layout\n                key=\"all-label\"\n                className={cn(\n                  'font-medium px-3 text-neutral-500 dark:text-neutral-300 text-sm mb-2',\n                  labelClassName,\n                )}\n                {...labelMotionProps}\n              >\n                {labels.unpinned}\n              </motion.p>\n            )}\n          </AnimatePresence>\n          {unpinned.length > 0 && (\n            <div\n              className={cn(\n                'space-y-3 relative',\n                togglingGroup === 'unpinned' ? 'z-5' : 'z-10',\n                unpinnedSectionClassName,\n              )}\n            >\n              {unpinned.map((item) => (\n                <motion.div\n                  key={item.id}\n                  layoutId={`item-${item.id}`}\n                  onClick={() => toggleStatus(item.id)}\n                  transition={transition}\n                  className=\"flex items-center justify-between gap-5 rounded-2xl bg-neutral-200 dark:bg-neutral-800 p-2 group\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"rounded-lg bg-background p-2\">\n                      <item.icon className=\"size-5 text-neutral-500 dark:text-neutral-400\" />\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-semibold\">{item.name}</div>\n                      <div className=\"text-xs text-neutral-500 dark:text-neutral-400 font-medium\">\n                        {item.info}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-center size-8 rounded-full bg-neutral-400 dark:bg-neutral-600 opacity-0 group-hover:opacity-100 transition-opacity duration-250\">\n                    <Pin className=\"size-4 text-white\" />\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n      </LayoutGroup>\n    </motion.div>\n  );\n}\n\nexport { PinList, type PinListProps, type PinListItem };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/community/pin-list/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-community-pin-list';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-community-pin-list',
  },
  'components-community-playful-todolist': {
    name: 'components-community-playful-todolist',
    description:
      'A playful todolist component with animated wavy strikethroughs for each completed task.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-checkbox',
    ],
    files: [
      {
        path: 'registry/components/community/playful-todolist/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/components/community/playful-todolist.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { motion, type Transition } from \'motion/react\';\nimport { Label } from \'@/components/ui/label\';\nimport { Checkbox } from \'@/components/animate-ui/components/radix/checkbox\';\n\nconst checkboxItems = [\n  {\n    id: 1,\n    label: \'Code in Assembly 💾\',\n    defaultChecked: false,\n  },\n  {\n    id: 2,\n    label: \'Present a bug as a feature 🪲\',\n    defaultChecked: false,\n  },\n  {\n    id: 3,\n    label: \'Push to prod on a Friday 🚀\',\n    defaultChecked: false,\n  },\n];\n\nconst getPathAnimate = (isChecked: boolean) => ({\n  pathLength: isChecked ? 1 : 0,\n  opacity: isChecked ? 1 : 0,\n});\n\nconst getPathTransition = (isChecked: boolean): Transition => ({\n  pathLength: { duration: 1, ease: \'easeInOut\' },\n  opacity: {\n    duration: 0.01,\n    delay: isChecked ? 0 : 1,\n  },\n});\n\nfunction PlayfulTodolist() {\n  const [checked, setChecked] = React.useState(\n    checkboxItems.map((i) => !!i.defaultChecked),\n  );\n\n  return (\n    <div className="bg-neutral-100 dark:bg-neutral-900 rounded-2xl p-6 space-y-6">\n      {checkboxItems.map((item, idx) => (\n        <div key={item.id} className="space-y-6">\n          <div className="flex items-center space-x-2">\n            <Checkbox\n              variant="accent"\n              checked={checked[idx]}\n              onCheckedChange={(val) => {\n                const updated = [...checked];\n                updated[idx] = val === true;\n                setChecked(updated);\n              }}\n              id={`checkbox-${item.id}`}\n            />\n            <div className="relative inline-block">\n              <Label htmlFor={`checkbox-${item.id}`}>{item.label}</Label>\n              <motion.svg\n                width="340"\n                height="32"\n                viewBox="0 0 340 32"\n                className="absolute left-0 top-1/2 -translate-y-1/2 pointer-events-none z-20 w-full h-10"\n              >\n                <motion.path\n                  d="M 10 16.91 s 79.8 -11.36 98.1 -11.34 c 22.2 0.02 -47.82 14.25 -33.39 22.02 c 12.61 6.77 124.18 -27.98 133.31 -17.28 c 7.52 8.38 -26.8 20.02 4.61 22.05 c 24.55 1.93 113.37 -20.36 113.37 -20.36"\n                  vectorEffect="non-scaling-stroke"\n                  strokeWidth={2}\n                  strokeLinecap="round"\n                  strokeMiterlimit={10}\n                  fill="none"\n                  initial={false}\n                  animate={getPathAnimate(!!checked[idx])}\n                  transition={getPathTransition(!!checked[idx])}\n                  className="stroke-neutral-900 dark:stroke-neutral-100"\n                />\n              </motion.svg>\n            </div>\n          </div>\n          {idx !== checkboxItems.length - 1 && (\n            <div className="border-t border-neutral-300 dark:border-neutral-700" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport { PlayfulTodolist };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/community/playful-todolist/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-community-playful-todolist';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-community-playful-todolist',
  },
  'components-headless-accordion': {
    name: 'components-headless-accordion',
    description:
      'A vertically stacked set of interactive headings that each reveal an associated section of content.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-accordion',
    ],
    files: [
      {
        path: 'registry/components/headless/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/accordion.tsx',
        content:
          "import * as React from 'react';\nimport { motion } from 'motion/react';\nimport { ChevronDownIcon } from 'lucide-react';\n\nimport {\n  Disclosure as DisclosurePrimitive,\n  DisclosureButton as DisclosureButtonPrimitive,\n  DisclosurePanel as DisclosurePanelPrimitive,\n  type DisclosureProps as DisclosurePrimitiveProps,\n  type DisclosureButtonProps as DisclosureButtonPrimitiveProps,\n  type DisclosurePanelProps as DisclosurePanelPrimitiveProps,\n} from '@/components/animate-ui/primitives/headless/disclosure';\nimport { cn } from '@/lib/utils';\n\ntype AccordionProps<TTag extends React.ElementType = 'div'> =\n  React.ComponentProps<TTag> & {\n    children: React.ReactNode;\n    as?: TTag;\n  };\n\nfunction Accordion<TTag extends React.ElementType = 'div'>({\n  as: Component = 'div',\n  ...props\n}: AccordionProps<TTag>) {\n  return <Component data-slot=\"accordion\" {...props} />;\n}\n\ntype AccordionItemProps<TTag extends React.ElementType = 'div'> =\n  DisclosurePrimitiveProps<TTag>;\n\nfunction AccordionItem<TTag extends React.ElementType = 'div'>({\n  className,\n  children,\n  ...props\n}: AccordionItemProps<TTag>) {\n  return (\n    <DisclosurePrimitive {...props}>\n      {(bag) => (\n        <div className={cn('border-b last:border-b-0', className)}>\n          {typeof children === 'function' ? children(bag) : children}\n        </div>\n      )}\n    </DisclosurePrimitive>\n  );\n}\n\ntype AccordionButtonProps = DisclosureButtonPrimitiveProps & {\n  showArrow?: boolean;\n};\n\nfunction AccordionButton({\n  className,\n  children,\n  showArrow = true,\n  ...props\n}: AccordionButtonProps) {\n  return (\n    <DisclosureButtonPrimitive\n      className={cn(\n        'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 w-full rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-open]>svg]:rotate-180',\n        className,\n      )}\n      {...props}\n    >\n      {(bag) => (\n        <>\n          {typeof children === 'function' ? children(bag) : children}\n          {showArrow && (\n            <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n          )}\n        </>\n      )}\n    </DisclosureButtonPrimitive>\n  );\n}\n\ntype AccordionPanelProps<TTag extends React.ElementType = typeof motion.div> =\n  DisclosurePanelPrimitiveProps<TTag>;\n\nfunction AccordionPanel<TTag extends React.ElementType = typeof motion.div>({\n  className,\n  children,\n  ...props\n}: AccordionPanelProps<TTag>) {\n  return (\n    <DisclosurePanelPrimitive<any> {...props}>\n      {(bag) => (\n        <div className={cn('text-sm pt-0 pb-4', className)}>\n          {typeof children === 'function' ? children(bag) : children}\n        </div>\n      )}\n    </DisclosurePanelPrimitive>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionButtonProps,\n  type AccordionPanelProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-accordion',
  },
  'components-headless-checkbox': {
    name: 'components-headless-checkbox',
    description:
      "Checkboxes provide the same functionality as native HTML checkboxes, without any of the styling, giving you a clean slate to design them however you'd like.",
    type: 'registry:ui',
    dependencies: ['class-variance-authority', 'motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-checkbox',
    ],
    files: [
      {
        path: 'registry/components/headless/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/checkbox.tsx',
        content:
          "import * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxIndicator as CheckboxIndicatorPrimitive,\n  type CheckboxProps as CheckboxPrimitiveProps,\n} from '@/components/animate-ui/primitives/headless/checkbox';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst checkboxVariants = cva(\n  'peer shrink-0 flex items-center justify-center outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-500 focus-visible:ring-offset-2 [&[data-checked],&[data-indeterminate]]:bg-primary [&[data-checked],&[data-indeterminate]]:text-primary-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background border',\n        accent: 'bg-input',\n      },\n      size: {\n        default: 'size-5 rounded-sm',\n        sm: 'size-4.5 rounded-[5px]',\n        lg: 'size-6 rounded-[7px]',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst checkboxIndicatorVariants = cva('', {\n  variants: {\n    size: {\n      default: 'size-3.5',\n      sm: 'size-3',\n      lg: 'size-4',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\ntype CheckboxProps<TTag extends React.ElementType = typeof motion.button> =\n  CheckboxPrimitiveProps<TTag> & VariantProps<typeof checkboxVariants>;\n\nfunction Checkbox<TTag extends React.ElementType = typeof motion.button>({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: CheckboxProps<TTag>) {\n  return (\n    <CheckboxPrimitive\n      className={cn(checkboxVariants({ variant, size, className }))}\n      {...props}\n    >\n      {(bag) => (\n        <>\n          {typeof children === 'function' ? children(bag) : children}\n          <CheckboxIndicatorPrimitive\n            className={cn(checkboxIndicatorVariants({ size }))}\n          />\n        </>\n      )}\n    </CheckboxPrimitive>\n  );\n}\n\nexport { Checkbox, type CheckboxProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-checkbox',
  },
  'components-headless-dialog': {
    name: 'components-headless-dialog',
    description:
      'A fully-managed, renderless dialog component jam-packed with accessibility and keyboard features, perfect for building completely custom dialogs and alerts.',
    type: 'registry:ui',
    dependencies: ['lucide-react', 'motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-dialog',
    ],
    files: [
      {
        path: 'registry/components/headless/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/dialog.tsx',
        content:
          "import * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport {\n  Dialog as DialogPrimitive,\n  DialogPanel as DialogPanelPrimitive,\n  DialogDescription as DialogDescriptionPrimitive,\n  DialogFooter as DialogFooterPrimitive,\n  DialogHeader as DialogHeaderPrimitive,\n  DialogTitle as DialogTitlePrimitive,\n  DialogBackdrop as DialogBackdropPrimitive,\n  DialogClose as DialogClosePrimitive,\n  type DialogProps as DialogPrimitiveProps,\n  type DialogPanelProps as DialogPanelPrimitiveProps,\n  type DialogDescriptionProps as DialogDescriptionPrimitiveProps,\n  type DialogFooterProps as DialogFooterPrimitiveProps,\n  type DialogHeaderProps as DialogHeaderPrimitiveProps,\n  type DialogTitleProps as DialogTitlePrimitiveProps,\n  type DialogBackdropProps as DialogBackdropPrimitiveProps,\n  type DialogCloseProps as DialogClosePrimitiveProps,\n} from '@/components/animate-ui/primitives/headless/dialog';\nimport { cn } from '@/lib/utils';\nimport { XIcon } from 'lucide-react';\n\ntype DialogProps<TTag extends React.ElementType = 'div'> =\n  DialogPrimitiveProps<TTag>;\n\nfunction Dialog<TTag extends React.ElementType = 'div'>(\n  props: DialogProps<TTag>,\n) {\n  return <DialogPrimitive {...props} />;\n}\n\ntype DialogCloseProps<TTag extends React.ElementType = 'button'> =\n  DialogClosePrimitiveProps<TTag>;\n\nfunction DialogClose<TTag extends React.ElementType = 'button'>(\n  props: DialogCloseProps<TTag>,\n) {\n  return <DialogClosePrimitive {...props} />;\n}\n\ntype DialogBackdropProps<TTag extends React.ElementType = typeof motion.div> =\n  DialogBackdropPrimitiveProps<TTag>;\n\nfunction DialogBackdrop<TTag extends React.ElementType = typeof motion.div>({\n  className,\n  ...props\n}: DialogBackdropProps<TTag>) {\n  return (\n    <DialogBackdropPrimitive\n      className={cn('fixed inset-0 z-50 bg-black/50', className)}\n      {...props}\n    />\n  );\n}\n\ntype DialogPanelProps<TTag extends React.ElementType = typeof motion.div> =\n  DialogPanelPrimitiveProps<TTag> & {\n    showCloseButton?: boolean;\n  };\n\nfunction DialogPanel<TTag extends React.ElementType = typeof motion.div>({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: DialogPanelProps<TTag>) {\n  return (\n    <>\n      <DialogBackdrop />\n      <DialogPanelPrimitive\n        className={cn(\n          'bg-background fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {(bag) => (\n          <>\n            {typeof children === 'function' ? children(bag) : children}\n            {showCloseButton && (\n              <DialogClosePrimitive className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n                <XIcon />\n                <span className=\"sr-only\">Close</span>\n              </DialogClosePrimitive>\n            )}\n          </>\n        )}\n      </DialogPanelPrimitive>\n    </>\n  );\n}\n\ntype DialogHeaderProps<TTag extends React.ElementType = 'div'> =\n  DialogHeaderPrimitiveProps<TTag>;\n\nfunction DialogHeader<TTag extends React.ElementType = 'div'>(\n  props: DialogHeaderProps<TTag>,\n) {\n  const { as = 'div', className, ...rest } = props;\n\n  return (\n    <DialogHeaderPrimitive\n      as={as}\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...rest}\n    />\n  );\n}\n\ntype DialogFooterProps<TTag extends React.ElementType = 'div'> =\n  DialogFooterPrimitiveProps<TTag>;\n\nfunction DialogFooter<TTag extends React.ElementType = 'div'>({\n  className,\n  ...props\n}: DialogFooterProps<TTag>) {\n  return (\n    <DialogFooterPrimitive\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype DialogTitleProps<TTag extends React.ElementType = 'h2'> =\n  DialogTitlePrimitiveProps<TTag>;\n\nfunction DialogTitle<TTag extends React.ElementType = 'h2'>({\n  className,\n  ...props\n}: DialogTitleProps<TTag>) {\n  return (\n    <DialogTitlePrimitive\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\ntype DialogDescriptionProps<TTag extends React.ElementType = 'div'> =\n  DialogDescriptionPrimitiveProps<TTag>;\n\nfunction DialogDescription<TTag extends React.ElementType = 'div'>({\n  className,\n  ...props\n}: DialogDescriptionProps<TTag>) {\n  return (\n    <DialogDescriptionPrimitive\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogPanel,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  type DialogProps,\n  type DialogCloseProps,\n  type DialogPanelProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-dialog',
  },
  'components-headless-popover': {
    name: 'components-headless-popover',
    description:
      'Popovers are perfect for floating panels with arbitrary content like navigation menus, mobile menus and flyout menus.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-popover',
    ],
    files: [
      {
        path: 'registry/components/headless/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/popover.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Popover as PopoverPrimitive,\n  PopoverButton as PopoverButtonPrimitive,\n  PopoverPanel as PopoverPanelPrimitive,\n  PopoverBackdrop as PopoverBackdropPrimitive,\n  PopoverGroup as PopoverGroupPrimitive,\n  type PopoverProps as PopoverPrimitiveProps,\n  type PopoverButtonProps as PopoverButtonPrimitiveProps,\n  type PopoverPanelProps as PopoverPanelPrimitiveProps,\n  type PopoverBackdropProps as PopoverBackdropPrimitiveProps,\n  type PopoverGroupProps as PopoverGroupPrimitiveProps,\n} from '@/components/animate-ui/primitives/headless/popover';\nimport { cn } from '@/lib/utils';\n\ntype PopoverProps<TTag extends React.ElementType = 'div'> =\n  PopoverPrimitiveProps<TTag>;\n\nfunction Popover<TTag extends React.ElementType = 'div'>(\n  props: PopoverProps<TTag>,\n) {\n  return <PopoverPrimitive {...props} />;\n}\n\ntype PopoverButtonProps<TTag extends React.ElementType = 'button'> =\n  PopoverButtonPrimitiveProps<TTag>;\n\nfunction PopoverButton<TTag extends React.ElementType = 'button'>(\n  props: PopoverButtonProps<TTag>,\n) {\n  return <PopoverButtonPrimitive {...props} />;\n}\n\ntype PopoverPanelProps<TTag extends React.ElementType = 'div'> =\n  PopoverPanelPrimitiveProps<TTag>;\n\nfunction PopoverPanel<TTag extends React.ElementType = 'div'>({\n  className,\n  anchor = { to: 'bottom', gap: 4 },\n  ...props\n}: PopoverPanelProps<TTag>) {\n  return (\n    <PopoverPanelPrimitive\n      anchor={anchor}\n      className={cn(\n        'bg-popover text-popover-foreground z-50 w-72 rounded-md border p-4 shadow-md outline-hidden',\n        'data-[anchor=top_center]:origin-bottom data-[anchor=top_start]:origin-bottom-left data-[anchor=top_end]:origin-bottom-right',\n        'data-[anchor=bottom_center]:origin-top data-[anchor=bottom_start]:origin-top-left data-[anchor=bottom_end]:origin-top-right',\n        'data-[anchor=left_center]:origin-right data-[anchor=left_start]:origin-top-right data-[anchor=left_end]:origin-bottom-right',\n        'data-[anchor=right_center]:origin-left data-[anchor=right_start]:origin-top-left data-[anchor=right_end]:origin-bottom-left',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype PopoverBackdropProps<TTag extends React.ElementType = 'div'> =\n  PopoverBackdropPrimitiveProps<TTag>;\n\nfunction PopoverBackdrop<TTag extends React.ElementType = 'div'>(\n  props: PopoverBackdropProps<TTag>,\n) {\n  return <PopoverBackdropPrimitive {...props} />;\n}\n\ntype PopoverGroupProps<TTag extends React.ElementType = 'div'> =\n  PopoverGroupPrimitiveProps<TTag>;\n\nfunction PopoverGroup<TTag extends React.ElementType = 'div'>(\n  props: PopoverGroupProps<TTag>,\n) {\n  return <PopoverGroupPrimitive {...props} />;\n}\n\nexport {\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n  PopoverBackdrop,\n  PopoverGroup,\n  type PopoverProps,\n  type PopoverButtonProps,\n  type PopoverPanelProps,\n  type PopoverBackdropProps,\n  type PopoverGroupProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-popover',
  },
  'components-headless-switch': {
    name: 'components-headless-switch',
    description:
      'Switches are a pleasant interface for toggling a value between two states, and offer the same semantics and keyboard navigation as native checkbox elements.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-switch',
    ],
    files: [
      {
        path: 'registry/components/headless/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/switch.tsx',
        content:
          'import * as React from \'react\';\n\nimport {\n  Switch as SwitchPrimitive,\n  SwitchThumb as SwitchThumbPrimitive,\n  SwitchIcon as SwitchIconPrimitive,\n  type SwitchProps as SwitchPrimitiveProps,\n} from \'@/components/animate-ui/primitives/headless/switch\';\nimport { cn } from \'@/lib/utils\';\n\ntype SwitchProps = SwitchPrimitiveProps & {\n  pressedWidth?: number;\n  startIcon?: React.ReactElement;\n  endIcon?: React.ReactElement;\n  thumbIcon?: React.ReactElement;\n};\n\nfunction Switch({\n  className,\n  pressedWidth = 19,\n  startIcon,\n  endIcon,\n  thumbIcon,\n  ...props\n}: SwitchProps) {\n  return (\n    <SwitchPrimitive\n      className={cn(\n        \'relative peer focus-visible:border-ring focus-visible:ring-ring/50 flex h-5 w-8 px-px shrink-0 items-center justify-start rounded-full border border-transparent shadow-xs outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\',\n        \'data-[checked]:bg-primary bg-input dark:bg-input/80 data-[checked]:justify-end\',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchThumbPrimitive\n        className={cn(\n          \'relative z-10 bg-background dark:bg-foreground dark:data-[checked="true"]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0\',\n        )}\n        pressedAnimation={{ width: pressedWidth }}\n      >\n        {thumbIcon && (\n          <SwitchIconPrimitive\n            position="thumb"\n            className="absolute [&_svg]:size-[9px] left-1/2 top-1/2 -translate-1/2 dark:text-neutral-500 text-neutral-400"\n          >\n            {thumbIcon}\n          </SwitchIconPrimitive>\n        )}\n      </SwitchThumbPrimitive>\n\n      {startIcon && (\n        <SwitchIconPrimitive\n          position="left"\n          className="absolute [&_svg]:size-[9px] left-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-500 text-neutral-400"\n        >\n          {startIcon}\n        </SwitchIconPrimitive>\n      )}\n      {endIcon && (\n        <SwitchIconPrimitive\n          position="right"\n          className="absolute [&_svg]:size-[9px] right-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-400 text-neutral-500"\n        >\n          {endIcon}\n        </SwitchIconPrimitive>\n      )}\n    </SwitchPrimitive>\n  );\n}\n\nexport { Switch, type SwitchProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-switch',
  },
  'components-headless-tabs': {
    name: 'components-headless-tabs',
    description:
      'Easily create accessible, fully customizable tab interfaces, with robust focus management and keyboard navigation support.',
    type: 'registry:ui',
    dependencies: ['motion/react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-headless-tabs'],
    files: [
      {
        path: 'registry/components/headless/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/headless/tabs.tsx',
        content:
          "import * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport {\n  TabGroup as TabGroupPrimitive,\n  TabList as TabListPrimitive,\n  Tab as TabPrimitive,\n  TabPanel as TabPanelPrimitive,\n  TabPanels as TabPanelsPrimitive,\n  TabHighlight as TabHighlightPrimitive,\n  TabHighlightItem as TabHighlightItemPrimitive,\n  type TabGroupProps as TabGroupPrimitiveProps,\n  type TabListProps as TabListPrimitiveProps,\n  type TabProps as TabPrimitiveProps,\n  type TabPanelProps as TabPanelPrimitiveProps,\n  type TabPanelsProps as TabPanelsPrimitiveProps,\n} from '@/components/animate-ui/primitives/headless/tabs';\nimport { cn } from '@/lib/utils';\n\ntype TabGroupProps<TTag extends React.ElementType = 'div'> =\n  TabGroupPrimitiveProps<TTag>;\n\nfunction TabGroup<TTag extends React.ElementType = 'div'>({\n  className,\n  ...props\n}: TabGroupProps<TTag>) {\n  return (\n    <TabGroupPrimitive\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n}\n\ntype TabListProps<TTag extends React.ElementType = 'div'> =\n  TabListPrimitiveProps<TTag>;\n\nfunction TabList<TTag extends React.ElementType = 'div'>({\n  className,\n  ...props\n}: TabListProps<TTag>) {\n  return (\n    <TabHighlightPrimitive className=\"absolute z-0 inset-0 border border-transparent rounded-md bg-background dark:border-input dark:bg-input/30 shadow-sm\">\n      <TabListPrimitive\n        className={cn(\n          'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n          className,\n        )}\n        {...props}\n      />\n    </TabHighlightPrimitive>\n  );\n}\n\ntype TabProps<TTag extends React.ElementType = 'button'> =\n  TabPrimitiveProps<TTag>;\n\nfunction Tab<TTag extends React.ElementType = 'button'>({\n  className,\n  ...props\n}: TabProps<TTag>) {\n  return (\n    <TabHighlightItemPrimitive index={props.index} className=\"flex-1\">\n      <TabPrimitive\n        className={cn(\n          \"data-[active='true']:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md w-full px-2 py-1 text-sm font-medium whitespace-nowrap transition-colors duration-500 ease-in-out focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        {...props}\n      />\n    </TabHighlightItemPrimitive>\n  );\n}\n\ntype TabPanelsProps<TTag extends React.ElementType = typeof motion.div> =\n  TabPanelsPrimitiveProps<TTag>;\n\nfunction TabPanels<TTag extends React.ElementType = typeof motion.div>(\n  props: TabPanelsProps<TTag>,\n) {\n  return <TabPanelsPrimitive {...props} />;\n}\n\ntype TabPanelProps<TTag extends React.ElementType = typeof motion.div> =\n  TabPanelPrimitiveProps<TTag>;\n\nfunction TabPanel<TTag extends React.ElementType = typeof motion.div>({\n  className,\n  ...props\n}: TabPanelProps<TTag>) {\n  return (\n    <TabPanelPrimitive\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  TabGroup,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  type TabGroupProps,\n  type TabListProps,\n  type TabProps,\n  type TabPanelsProps,\n  type TabPanelProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/headless/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-headless-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-headless-tabs',
  },
  'components-radix-accordion': {
    name: 'components-radix-accordion',
    description:
      'A vertically stacked set of interactive headings that each reveal an associated section of content.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-accordion',
    ],
    files: [
      {
        path: 'registry/components/radix/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/accordion.tsx',
        content:
          "import * as React from 'react';\nimport { ChevronDownIcon } from 'lucide-react';\n\nimport {\n  Accordion as AccordionPrimitive,\n  AccordionItem as AccordionItemPrimitive,\n  AccordionHeader as AccordionHeaderPrimitive,\n  AccordionTrigger as AccordionTriggerPrimitive,\n  AccordionContent as AccordionContentPrimitive,\n  type AccordionProps as AccordionPrimitiveProps,\n  type AccordionItemProps as AccordionItemPrimitiveProps,\n  type AccordionTriggerProps as AccordionTriggerPrimitiveProps,\n  type AccordionContentProps as AccordionContentPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/accordion';\nimport { cn } from '@/lib/utils';\n\ntype AccordionProps = AccordionPrimitiveProps;\n\nfunction Accordion(props: AccordionProps) {\n  return <AccordionPrimitive {...props} />;\n}\n\ntype AccordionItemProps = AccordionItemPrimitiveProps;\n\nfunction AccordionItem({ className, ...props }: AccordionItemProps) {\n  return (\n    <AccordionItemPrimitive\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  );\n}\n\ntype AccordionTriggerProps = AccordionTriggerPrimitiveProps & {\n  showArrow?: boolean;\n};\n\nfunction AccordionTrigger({\n  className,\n  children,\n  showArrow = true,\n  ...props\n}: AccordionTriggerProps) {\n  return (\n    <AccordionHeaderPrimitive className=\"flex\">\n      <AccordionTriggerPrimitive\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n        )}\n      </AccordionTriggerPrimitive>\n    </AccordionHeaderPrimitive>\n  );\n}\n\ntype AccordionContentProps = AccordionContentPrimitiveProps;\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: AccordionContentProps) {\n  return (\n    <AccordionContentPrimitive {...props}>\n      <div className={cn('text-sm pt-0 pb-4', className)}>{children}</div>\n    </AccordionContentPrimitive>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionTriggerProps,\n  type AccordionContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-accordion',
  },
  'components-radix-checkbox': {
    name: 'components-radix-checkbox',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-checkbox',
    ],
    files: [
      {
        path: 'registry/components/radix/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/checkbox.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Checkbox as CheckboxPrimitive,\n  CheckboxIndicator as CheckboxIndicatorPrimitive,\n  type CheckboxProps as CheckboxPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/checkbox';\nimport { cn } from '@/lib/utils';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nconst checkboxVariants = cva(\n  'peer shrink-0 flex items-center justify-center outline-none focus-visible:ring-[3px] focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 disabled:cursor-not-allowed disabled:opacity-50 transition-colors duration-500 focus-visible:ring-offset-2 [&[data-state=checked],&[data-state=indeterminate]]:bg-primary [&[data-state=checked],&[data-state=indeterminate]]:text-primary-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-background border',\n        accent: 'bg-input',\n      },\n      size: {\n        default: 'size-5 rounded-sm',\n        sm: 'size-4.5 rounded-[5px]',\n        lg: 'size-6 rounded-[7px]',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\nconst checkboxIndicatorVariants = cva('', {\n  variants: {\n    size: {\n      default: 'size-3.5',\n      sm: 'size-3',\n      lg: 'size-4',\n    },\n  },\n  defaultVariants: {\n    size: 'default',\n  },\n});\n\ntype CheckboxProps = CheckboxPrimitiveProps &\n  VariantProps<typeof checkboxVariants>;\n\nfunction Checkbox({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: CheckboxProps) {\n  return (\n    <CheckboxPrimitive\n      className={cn(checkboxVariants({ variant, size, className }))}\n      {...props}\n    >\n      {children}\n      <CheckboxIndicatorPrimitive\n        className={cn(checkboxIndicatorVariants({ size }))}\n      />\n    </CheckboxPrimitive>\n  );\n}\n\nexport { Checkbox, type CheckboxProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-checkbox',
  },
  'components-radix-dialog': {
    name: 'components-radix-dialog',
    description:
      'A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-dialog'],
    files: [
      {
        path: 'registry/components/radix/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/dialog.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Dialog as DialogPrimitive,\n  DialogContent as DialogContentPrimitive,\n  DialogDescription as DialogDescriptionPrimitive,\n  DialogFooter as DialogFooterPrimitive,\n  DialogHeader as DialogHeaderPrimitive,\n  DialogTitle as DialogTitlePrimitive,\n  DialogTrigger as DialogTriggerPrimitive,\n  DialogPortal as DialogPortalPrimitive,\n  DialogOverlay as DialogOverlayPrimitive,\n  DialogClose as DialogClosePrimitive,\n  type DialogProps as DialogPrimitiveProps,\n  type DialogContentProps as DialogContentPrimitiveProps,\n  type DialogDescriptionProps as DialogDescriptionPrimitiveProps,\n  type DialogFooterProps as DialogFooterPrimitiveProps,\n  type DialogHeaderProps as DialogHeaderPrimitiveProps,\n  type DialogTitleProps as DialogTitlePrimitiveProps,\n  type DialogTriggerProps as DialogTriggerPrimitiveProps,\n  type DialogOverlayProps as DialogOverlayPrimitiveProps,\n  type DialogCloseProps as DialogClosePrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/dialog';\nimport { cn } from '@/lib/utils';\nimport { XIcon } from 'lucide-react';\n\ntype DialogProps = DialogPrimitiveProps;\n\nfunction Dialog(props: DialogProps) {\n  return <DialogPrimitive {...props} />;\n}\n\ntype DialogTriggerProps = DialogTriggerPrimitiveProps;\n\nfunction DialogTrigger(props: DialogTriggerProps) {\n  return <DialogTriggerPrimitive {...props} />;\n}\n\ntype DialogCloseProps = DialogClosePrimitiveProps;\n\nfunction DialogClose(props: DialogCloseProps) {\n  return <DialogClosePrimitive {...props} />;\n}\n\ntype DialogOverlayProps = DialogOverlayPrimitiveProps;\n\nfunction DialogOverlay({ className, ...props }: DialogOverlayProps) {\n  return (\n    <DialogOverlayPrimitive\n      className={cn('fixed inset-0 z-50 bg-black/50', className)}\n      {...props}\n    />\n  );\n}\n\ntype DialogContentProps = DialogContentPrimitiveProps & {\n  showCloseButton?: boolean;\n};\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: DialogContentProps & {\n  showCloseButton?: boolean;\n}) {\n  return (\n    <DialogPortalPrimitive>\n      <DialogOverlay />\n      <DialogContentPrimitive\n        className={cn(\n          'bg-background fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogClosePrimitive className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\">\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogClosePrimitive>\n        )}\n      </DialogContentPrimitive>\n    </DialogPortalPrimitive>\n  );\n}\n\ntype DialogHeaderProps = DialogHeaderPrimitiveProps;\n\nfunction DialogHeader({ className, ...props }: DialogHeaderProps) {\n  return (\n    <DialogHeaderPrimitive\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  );\n}\n\ntype DialogFooterProps = DialogFooterPrimitiveProps;\n\nfunction DialogFooter({ className, ...props }: DialogFooterProps) {\n  return (\n    <DialogFooterPrimitive\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype DialogTitleProps = DialogTitlePrimitiveProps;\n\nfunction DialogTitle({ className, ...props }: DialogTitleProps) {\n  return (\n    <DialogTitlePrimitive\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\ntype DialogDescriptionProps = DialogDescriptionPrimitiveProps;\n\nfunction DialogDescription({ className, ...props }: DialogDescriptionProps) {\n  return (\n    <DialogDescriptionPrimitive\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  type DialogProps,\n  type DialogTriggerProps,\n  type DialogCloseProps,\n  type DialogContentProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-dialog',
  },
  'components-radix-dropdown-menu': {
    name: 'components-radix-dropdown-menu',
    description:
      'Displays a menu to the user — such as a set of actions or functions — triggered by a button.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-dropdown-menu',
    ],
    files: [
      {
        path: 'registry/components/radix/dropdown-menu/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/dropdown-menu.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  DropdownMenu as DropdownMenuPrimitive,\n  DropdownMenuContent as DropdownMenuContentPrimitive,\n  DropdownMenuGroup as DropdownMenuGroupPrimitive,\n  DropdownMenuHighlightItem as DropdownMenuHighlightItemPrimitive,\n  DropdownMenuHighlight as DropdownMenuHighlightPrimitive,\n  DropdownMenuItem as DropdownMenuItemPrimitive,\n  DropdownMenuItemIndicator as DropdownMenuItemIndicatorPrimitive,\n  DropdownMenuCheckboxItem as DropdownMenuCheckboxItemPrimitive,\n  DropdownMenuRadioGroup as DropdownMenuRadioGroupPrimitive,\n  DropdownMenuRadioItem as DropdownMenuRadioItemPrimitive,\n  DropdownMenuLabel as DropdownMenuLabelPrimitive,\n  DropdownMenuSeparator as DropdownMenuSeparatorPrimitive,\n  DropdownMenuShortcut as DropdownMenuShortcutPrimitive,\n  DropdownMenuSub as DropdownMenuSubPrimitive,\n  DropdownMenuSubContent as DropdownMenuSubContentPrimitive,\n  DropdownMenuSubTrigger as DropdownMenuSubTriggerPrimitive,\n  DropdownMenuTrigger as DropdownMenuTriggerPrimitive,\n  type DropdownMenuProps as DropdownMenuPrimitiveProps,\n  type DropdownMenuContentProps as DropdownMenuContentPrimitiveProps,\n  type DropdownMenuGroupProps as DropdownMenuGroupPrimitiveProps,\n  type DropdownMenuItemProps as DropdownMenuItemPrimitiveProps,\n  type DropdownMenuCheckboxItemProps as DropdownMenuCheckboxItemPrimitiveProps,\n  type DropdownMenuRadioGroupProps as DropdownMenuRadioGroupPrimitiveProps,\n  type DropdownMenuRadioItemProps as DropdownMenuRadioItemPrimitiveProps,\n  type DropdownMenuLabelProps as DropdownMenuLabelPrimitiveProps,\n  type DropdownMenuSeparatorProps as DropdownMenuSeparatorPrimitiveProps,\n  type DropdownMenuShortcutProps as DropdownMenuShortcutPrimitiveProps,\n  type DropdownMenuSubProps as DropdownMenuSubPrimitiveProps,\n  type DropdownMenuSubContentProps as DropdownMenuSubContentPrimitiveProps,\n  type DropdownMenuSubTriggerProps as DropdownMenuSubTriggerPrimitiveProps,\n  type DropdownMenuTriggerProps as DropdownMenuTriggerPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/dropdown-menu';\nimport { cn } from '@/lib/utils';\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react';\n\ntype DropdownMenuProps = DropdownMenuPrimitiveProps;\n\nfunction DropdownMenu(props: DropdownMenuProps) {\n  return <DropdownMenuPrimitive {...props} />;\n}\n\ntype DropdownMenuTriggerProps = DropdownMenuTriggerPrimitiveProps;\n\nfunction DropdownMenuTrigger(props: DropdownMenuTriggerProps) {\n  return <DropdownMenuTriggerPrimitive {...props} />;\n}\n\ntype DropdownMenuContentProps = DropdownMenuContentPrimitiveProps;\n\nfunction DropdownMenuContent({\n  sideOffset = 4,\n  className,\n  children,\n  ...props\n}: DropdownMenuContentProps) {\n  return (\n    <DropdownMenuContentPrimitive\n      sideOffset={sideOffset}\n      className={cn(\n        'bg-popover text-popover-foreground z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n        className,\n      )}\n      {...props}\n    >\n      <DropdownMenuHighlightPrimitive className=\"absolute inset-0 bg-accent z-0 rounded-sm\">\n        {children}\n      </DropdownMenuHighlightPrimitive>\n    </DropdownMenuContentPrimitive>\n  );\n}\n\ntype DropdownMenuGroupProps = DropdownMenuGroupPrimitiveProps;\n\nfunction DropdownMenuGroup({ ...props }: DropdownMenuGroupProps) {\n  return <DropdownMenuGroupPrimitive {...props} />;\n}\n\ntype DropdownMenuItemProps = DropdownMenuItemPrimitiveProps & {\n  inset?: boolean;\n  variant?: 'default' | 'destructive';\n};\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  disabled,\n  ...props\n}: DropdownMenuItemProps) {\n  return (\n    <DropdownMenuHighlightItemPrimitive disabled={disabled}>\n      <DropdownMenuItemPrimitive\n        disabled={disabled}\n        data-inset={inset}\n        data-variant={variant}\n        className={cn(\n          \"focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuHighlightItemPrimitive>\n  );\n}\n\ntype DropdownMenuCheckboxItemProps = DropdownMenuCheckboxItemPrimitiveProps;\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  disabled,\n  ...props\n}: DropdownMenuCheckboxItemProps) {\n  return (\n    <DropdownMenuHighlightItemPrimitive disabled={disabled}>\n      <DropdownMenuCheckboxItemPrimitive\n        disabled={disabled}\n        className={cn(\n          \"focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        checked={checked}\n        {...props}\n      >\n        <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n          <DropdownMenuItemIndicatorPrimitive\n            initial={{ opacity: 0, scale: 0.5 }}\n            animate={{ opacity: 1, scale: 1 }}\n          >\n            <CheckIcon className=\"size-4\" />\n          </DropdownMenuItemIndicatorPrimitive>\n        </span>\n        {children}\n      </DropdownMenuCheckboxItemPrimitive>\n    </DropdownMenuHighlightItemPrimitive>\n  );\n}\n\ntype DropdownMenuRadioGroupProps = DropdownMenuRadioGroupPrimitiveProps;\n\nfunction DropdownMenuRadioGroup(props: DropdownMenuRadioGroupProps) {\n  return <DropdownMenuRadioGroupPrimitive {...props} />;\n}\n\ntype DropdownMenuRadioItemProps = DropdownMenuRadioItemPrimitiveProps;\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  disabled,\n  ...props\n}: DropdownMenuRadioItemProps) {\n  return (\n    <DropdownMenuHighlightItemPrimitive disabled={disabled}>\n      <DropdownMenuRadioItemPrimitive\n        disabled={disabled}\n        className={cn(\n          \"focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        {...props}\n      >\n        <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n          <DropdownMenuItemIndicatorPrimitive layoutId=\"dropdown-menu-item-indicator-radio\">\n            <CircleIcon className=\"size-2 fill-current\" />\n          </DropdownMenuItemIndicatorPrimitive>\n        </span>\n        {children}\n      </DropdownMenuRadioItemPrimitive>\n    </DropdownMenuHighlightItemPrimitive>\n  );\n}\n\ntype DropdownMenuLabelProps = DropdownMenuLabelPrimitiveProps & {\n  inset?: boolean;\n};\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: DropdownMenuLabelProps) {\n  return (\n    <DropdownMenuLabelPrimitive\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuSeparatorProps = DropdownMenuSeparatorPrimitiveProps;\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: DropdownMenuSeparatorProps) {\n  return (\n    <DropdownMenuSeparatorPrimitive\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuShortcutProps = DropdownMenuShortcutPrimitiveProps;\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: DropdownMenuShortcutProps) {\n  return (\n    <DropdownMenuShortcutPrimitive\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuSubProps = DropdownMenuSubPrimitiveProps;\n\nfunction DropdownMenuSub(props: DropdownMenuSubProps) {\n  return <DropdownMenuSubPrimitive {...props} />;\n}\n\ntype DropdownMenuSubTriggerProps = DropdownMenuSubTriggerPrimitiveProps & {\n  inset?: boolean;\n};\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: DropdownMenuSubTriggerProps) {\n  return (\n    <DropdownMenuHighlightItemPrimitive>\n      <DropdownMenuSubTriggerPrimitive\n        data-inset={inset}\n        className={cn(\n          'focus:text-accent-foreground data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n          'data-[state=open]:[&_[data-slot=chevron]]:rotate-90 [&_[data-slot=chevron]]:transition-transform [&_[data-slot=chevron]]:duration-300 [&_[data-slot=chevron]]:ease-in-out',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronRightIcon data-slot=\"chevron\" className=\"ml-auto size-4\" />\n      </DropdownMenuSubTriggerPrimitive>\n    </DropdownMenuHighlightItemPrimitive>\n  );\n}\n\ntype DropdownMenuSubContentProps = DropdownMenuSubContentPrimitiveProps;\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: DropdownMenuSubContentProps) {\n  return (\n    <DropdownMenuSubContentPrimitive\n      className={cn(\n        'bg-popover text-popover-foreground z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  type DropdownMenuProps,\n  type DropdownMenuTriggerProps,\n  type DropdownMenuContentProps,\n  type DropdownMenuGroupProps,\n  type DropdownMenuItemProps,\n  type DropdownMenuCheckboxItemProps,\n  type DropdownMenuRadioGroupProps,\n  type DropdownMenuRadioItemProps,\n  type DropdownMenuLabelProps,\n  type DropdownMenuSeparatorProps,\n  type DropdownMenuShortcutProps,\n  type DropdownMenuSubProps,\n  type DropdownMenuSubTriggerProps,\n  type DropdownMenuSubContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/dropdown-menu/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-dropdown-menu';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-dropdown-menu',
  },
  'components-radix-files': {
    name: 'components-radix-files',
    description:
      'A component that allows you to display a list of files and folders.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-files'],
    files: [
      {
        path: 'registry/components/radix/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/files.tsx',
        content:
          "import * as React from 'react';\nimport { FolderIcon, FolderOpenIcon, FileIcon } from 'lucide-react';\n\nimport {\n  Files as FilesPrimitive,\n  FilesHighlight as FilesHighlightPrimitive,\n  FolderItem as FolderItemPrimitive,\n  FolderHeader as FolderHeaderPrimitive,\n  FolderTrigger as FolderTriggerPrimitive,\n  FolderHighlight as FolderHighlightPrimitive,\n  Folder as FolderPrimitive,\n  FolderIcon as FolderIconPrimitive,\n  FileLabel as FileLabelPrimitive,\n  FolderContent as FolderContentPrimitive,\n  FileHighlight as FileHighlightPrimitive,\n  File as FilePrimitive,\n  FileIcon as FileIconPrimitive,\n  type FilesProps as FilesPrimitiveProps,\n  type FolderItemProps as FolderItemPrimitiveProps,\n  type FolderContentProps as FolderContentPrimitiveProps,\n  type FileProps as FilePrimitiveProps,\n  type FileLabelProps as FileLabelPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/files';\nimport { cn } from '@/lib/utils';\n\ntype GitStatus = 'untracked' | 'modified' | 'deleted';\n\ntype FilesProps = FilesPrimitiveProps;\n\nfunction Files({ className, children, ...props }: FilesProps) {\n  return (\n    <FilesPrimitive className={cn('p-2 w-full', className)} {...props}>\n      <FilesHighlightPrimitive className=\"bg-accent rounded-lg pointer-events-none\">\n        {children}\n      </FilesHighlightPrimitive>\n    </FilesPrimitive>\n  );\n}\n\ntype SubFilesProps = FilesProps;\n\nfunction SubFiles(props: SubFilesProps) {\n  return <FilesPrimitive {...props} />;\n}\n\ntype FolderItemProps = FolderItemPrimitiveProps;\n\nfunction FolderItem(props: FolderItemProps) {\n  return <FolderItemPrimitive {...props} />;\n}\n\ntype FolderTriggerProps = FileLabelPrimitiveProps & {\n  gitStatus?: GitStatus;\n};\n\nfunction FolderTrigger({\n  children,\n  className,\n  gitStatus,\n  ...props\n}: FolderTriggerProps) {\n  return (\n    <FolderHeaderPrimitive>\n      <FolderTriggerPrimitive className=\"w-full text-start\">\n        <FolderHighlightPrimitive>\n          <FolderPrimitive className=\"flex items-center justify-between gap-2 p-2 pointer-events-none\">\n            <div\n              className={cn(\n                'flex items-center gap-2',\n                gitStatus === 'untracked' && 'text-green-400',\n                gitStatus === 'modified' && 'text-amber-400',\n                gitStatus === 'deleted' && 'text-red-400',\n              )}\n            >\n              <FolderIconPrimitive\n                closeIcon={<FolderIcon className=\"size-4.5\" />}\n                openIcon={<FolderOpenIcon className=\"size-4.5\" />}\n              />\n              <FileLabelPrimitive\n                className={cn('text-sm', className)}\n                {...props}\n              >\n                {children}\n              </FileLabelPrimitive>\n            </div>\n\n            {gitStatus && (\n              <span\n                className={cn(\n                  'rounded-full size-2',\n                  gitStatus === 'untracked' && 'bg-green-400',\n                  gitStatus === 'modified' && 'bg-amber-400',\n                  gitStatus === 'deleted' && 'bg-red-400',\n                )}\n              />\n            )}\n          </FolderPrimitive>\n        </FolderHighlightPrimitive>\n      </FolderTriggerPrimitive>\n    </FolderHeaderPrimitive>\n  );\n}\n\ntype FolderContentProps = FolderContentPrimitiveProps;\n\nfunction FolderContent(props: FolderContentProps) {\n  return (\n    <div className=\"relative ml-6 before:absolute before:-left-2 before:inset-y-0 before:w-px before:h-full before:bg-border\">\n      <FolderContentPrimitive {...props} />\n    </div>\n  );\n}\n\ntype FileItemProps = FilePrimitiveProps & {\n  icon?: React.ElementType;\n  gitStatus?: GitStatus;\n};\n\nfunction FileItem({\n  icon: Icon = FileIcon,\n  className,\n  children,\n  gitStatus,\n  ...props\n}: FileItemProps) {\n  return (\n    <FileHighlightPrimitive>\n      <FilePrimitive\n        className={cn(\n          'flex items-center justify-between gap-2 p-2 pointer-events-none',\n          gitStatus === 'untracked' && 'text-green-400',\n          gitStatus === 'modified' && 'text-amber-400',\n          gitStatus === 'deleted' && 'text-red-400',\n        )}\n      >\n        <div className=\"flex items-center gap-2\">\n          <FileIconPrimitive>\n            <Icon className=\"size-4.5\" />\n          </FileIconPrimitive>\n          <FileLabelPrimitive className={cn('text-sm', className)} {...props}>\n            {children}\n          </FileLabelPrimitive>\n        </div>\n\n        {gitStatus && (\n          <span className=\"text-sm font-medium\">\n            {gitStatus === 'untracked' && 'U'}\n            {gitStatus === 'modified' && 'M'}\n            {gitStatus === 'deleted' && 'D'}\n          </span>\n        )}\n      </FilePrimitive>\n    </FileHighlightPrimitive>\n  );\n}\n\nexport {\n  Files,\n  FolderItem,\n  FolderTrigger,\n  FolderContent,\n  FileItem,\n  SubFiles,\n  type FilesProps,\n  type FolderItemProps,\n  type FolderTriggerProps,\n  type FolderContentProps,\n  type FileItemProps,\n  type SubFilesProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/radix/files/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-files',
  },
  'components-radix-hover-card': {
    name: 'components-radix-hover-card',
    description:
      'For sighted users to preview content available behind a link.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-hover-card',
    ],
    files: [
      {
        path: 'registry/components/radix/hover-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/hover-card.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  HoverCard as HoverCardPrimitive,\n  HoverCardTrigger as HoverCardTriggerPrimitive,\n  HoverCardPortal as HoverCardPortalPrimitive,\n  HoverCardContent as HoverCardContentPrimitive,\n  type HoverCardProps as HoverCardPrimitiveProps,\n  type HoverCardTriggerProps as HoverCardTriggerPrimitiveProps,\n  type HoverCardContentProps as HoverCardContentPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/hover-card';\nimport { cn } from '@/lib/utils';\n\ntype HoverCardProps = HoverCardPrimitiveProps;\n\nfunction HoverCard(props: HoverCardProps) {\n  return <HoverCardPrimitive {...props} />;\n}\n\ntype HoverCardTriggerProps = HoverCardTriggerPrimitiveProps;\n\nfunction HoverCardTrigger(props: HoverCardTriggerProps) {\n  return <HoverCardTriggerPrimitive {...props} />;\n}\n\ntype HoverCardContentProps = HoverCardContentPrimitiveProps;\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: HoverCardContentProps) {\n  return (\n    <HoverCardPortalPrimitive>\n      <HoverCardContentPrimitive\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPortalPrimitive>\n  );\n}\n\nexport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n  type HoverCardProps,\n  type HoverCardTriggerProps,\n  type HoverCardContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/hover-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-hover-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-hover-card',
  },
  'components-radix-popover': {
    name: 'components-radix-popover',
    description: 'Displays rich content in a portal, triggered by a button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-popover'],
    files: [
      {
        path: 'registry/components/radix/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/popover.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Popover as PopoverPrimitive,\n  PopoverTrigger as PopoverTriggerPrimitive,\n  PopoverContent as PopoverContentPrimitive,\n  PopoverPortal as PopoverPortalPrimitive,\n  PopoverClose as PopoverClosePrimitive,\n  type PopoverProps as PopoverPrimitiveProps,\n  type PopoverTriggerProps as PopoverTriggerPrimitiveProps,\n  type PopoverContentProps as PopoverContentPrimitiveProps,\n  type PopoverCloseProps as PopoverClosePrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/popover';\nimport { cn } from '@/lib/utils';\n\ntype PopoverProps = PopoverPrimitiveProps;\n\nfunction Popover(props: PopoverProps) {\n  return <PopoverPrimitive {...props} />;\n}\n\ntype PopoverTriggerProps = PopoverTriggerPrimitiveProps;\n\nfunction PopoverTrigger(props: PopoverTriggerProps) {\n  return <PopoverTriggerPrimitive {...props} />;\n}\n\ntype PopoverContentProps = PopoverContentPrimitiveProps;\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: PopoverContentProps) {\n  return (\n    <PopoverPortalPrimitive>\n      <PopoverContentPrimitive\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPortalPrimitive>\n  );\n}\n\ntype PopoverCloseProps = PopoverClosePrimitiveProps;\n\nfunction PopoverClose(props: PopoverCloseProps) {\n  return <PopoverClosePrimitive {...props} />;\n}\n\nexport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverClose,\n  type PopoverProps,\n  type PopoverTriggerProps,\n  type PopoverContentProps,\n  type PopoverCloseProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-popover',
  },
  'components-radix-progress': {
    name: 'components-radix-progress',
    description:
      'Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-progress',
    ],
    files: [
      {
        path: 'registry/components/radix/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/progress.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Progress as ProgressPrimitive,\n  ProgressIndicator as ProgressIndicatorPrimitive,\n  type ProgressProps as ProgressPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/progress';\nimport { cn } from '@/lib/utils';\n\ntype ProgressProps = ProgressPrimitiveProps;\n\nfunction Progress({ className, ...props }: ProgressProps) {\n  return (\n    <ProgressPrimitive\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressIndicatorPrimitive className=\"bg-primary rounded-full h-full w-full flex-1\" />\n    </ProgressPrimitive>\n  );\n}\n\nexport { Progress, type ProgressProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-progress',
  },
  'components-radix-radio-group': {
    name: 'components-radix-radio-group',
    description:
      'A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-radio-group',
    ],
    files: [
      {
        path: 'registry/components/radix/radio-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/radio-group.tsx',
        content:
          "import * as React from 'react';\nimport { CircleIcon } from 'lucide-react';\n\nimport {\n  RadioGroup as RadioGroupPrimitive,\n  RadioGroupItem as RadioGroupItemPrimitive,\n  RadioGroupIndicator as RadioGroupIndicatorPrimitive,\n  type RadioGroupProps as RadioGroupPrimitiveProps,\n  type RadioGroupItemProps as RadioGroupItemPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/radio-group';\nimport { cn } from '@/lib/utils';\n\ntype RadioGroupProps = RadioGroupPrimitiveProps;\n\nfunction RadioGroup({ className, ...props }: RadioGroupProps) {\n  return (\n    <RadioGroupPrimitive className={cn('grid gap-3', className)} {...props} />\n  );\n}\n\ntype RadioGroupItemProps = RadioGroupItemPrimitiveProps;\n\nfunction RadioGroupItem({ className, ...props }: RadioGroupItemProps) {\n  return (\n    <RadioGroupItemPrimitive\n      className={cn(\n        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupIndicatorPrimitive className=\"relative flex items-center justify-center\">\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupIndicatorPrimitive>\n    </RadioGroupItemPrimitive>\n  );\n}\n\nexport {\n  RadioGroup,\n  RadioGroupItem,\n  type RadioGroupProps,\n  type RadioGroupItemProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/radio-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-radio-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-radio-group',
  },
  'components-radix-sheet': {
    name: 'components-radix-sheet',
    description:
      'Extends the Dialog component to display content that complements the main content of the screen.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-sheet'],
    files: [
      {
        path: 'registry/components/radix/sheet/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/sheet.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Sheet as SheetPrimitive,\n  SheetTrigger as SheetTriggerPrimitive,\n  SheetOverlay as SheetOverlayPrimitive,\n  SheetClose as SheetClosePrimitive,\n  SheetPortal as SheetPortalPrimitive,\n  SheetContent as SheetContentPrimitive,\n  SheetHeader as SheetHeaderPrimitive,\n  SheetFooter as SheetFooterPrimitive,\n  SheetTitle as SheetTitlePrimitive,\n  SheetDescription as SheetDescriptionPrimitive,\n  type SheetProps as SheetPrimitiveProps,\n  type SheetTriggerProps as SheetTriggerPrimitiveProps,\n  type SheetOverlayProps as SheetOverlayPrimitiveProps,\n  type SheetCloseProps as SheetClosePrimitiveProps,\n  type SheetContentProps as SheetContentPrimitiveProps,\n  type SheetHeaderProps as SheetHeaderPrimitiveProps,\n  type SheetFooterProps as SheetFooterPrimitiveProps,\n  type SheetTitleProps as SheetTitlePrimitiveProps,\n  type SheetDescriptionProps as SheetDescriptionPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/sheet';\nimport { cn } from '@/lib/utils';\nimport { XIcon } from 'lucide-react';\n\ntype SheetProps = SheetPrimitiveProps;\n\nfunction Sheet(props: SheetProps) {\n  return <SheetPrimitive {...props} />;\n}\n\ntype SheetTriggerProps = SheetTriggerPrimitiveProps;\n\nfunction SheetTrigger(props: SheetTriggerProps) {\n  return <SheetTriggerPrimitive {...props} />;\n}\n\ntype SheetOverlayProps = SheetOverlayPrimitiveProps;\n\nfunction SheetOverlay({ className, ...props }: SheetOverlayProps) {\n  return (\n    <SheetOverlayPrimitive\n      className={cn('fixed inset-0 z-50 bg-black/50', className)}\n      {...props}\n    />\n  );\n}\n\ntype SheetCloseProps = SheetClosePrimitiveProps;\n\nfunction SheetClose(props: SheetCloseProps) {\n  return <SheetClosePrimitive {...props} />;\n}\n\ntype SheetContentProps = SheetContentPrimitiveProps & {\n  showCloseButton?: boolean;\n};\n\nfunction SheetContent({\n  className,\n  children,\n  side = 'right',\n  showCloseButton = true,\n  ...props\n}: SheetContentProps) {\n  return (\n    <SheetPortalPrimitive>\n      <SheetOverlay />\n      <SheetContentPrimitive\n        className={cn(\n          'bg-background fixed z-50 flex flex-col gap-4 shadow-lg',\n          side === 'right' && 'h-full w-[350px] border-l',\n          side === 'left' && 'h-full w-[350px] border-r',\n          side === 'top' && 'w-full h-[350px] border-b',\n          side === 'bottom' && 'w-full h-[350px] border-t',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <SheetClose className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n            <XIcon className=\"size-4\" />\n            <span className=\"sr-only\">Close</span>\n          </SheetClose>\n        )}\n      </SheetContentPrimitive>\n    </SheetPortalPrimitive>\n  );\n}\n\ntype SheetHeaderProps = SheetHeaderPrimitiveProps;\n\nfunction SheetHeader({ className, ...props }: SheetHeaderProps) {\n  return (\n    <SheetHeaderPrimitive\n      className={cn('flex flex-col gap-1.5 p-4', className)}\n      {...props}\n    />\n  );\n}\n\ntype SheetFooterProps = SheetFooterPrimitiveProps;\n\nfunction SheetFooter({ className, ...props }: SheetFooterProps) {\n  return (\n    <SheetFooterPrimitive\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  );\n}\n\ntype SheetTitleProps = SheetTitlePrimitiveProps;\n\nfunction SheetTitle({ className, ...props }: SheetTitleProps) {\n  return (\n    <SheetTitlePrimitive\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  );\n}\n\ntype SheetDescriptionProps = SheetDescriptionPrimitiveProps;\n\nfunction SheetDescription({ className, ...props }: SheetDescriptionProps) {\n  return (\n    <SheetDescriptionPrimitive\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  type SheetProps,\n  type SheetTriggerProps,\n  type SheetCloseProps,\n  type SheetContentProps,\n  type SheetHeaderProps,\n  type SheetFooterProps,\n  type SheetTitleProps,\n  type SheetDescriptionProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/radix/sheet/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-sheet';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-sheet',
  },
  'components-radix-switch': {
    name: 'components-radix-switch',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-switch'],
    files: [
      {
        path: 'registry/components/radix/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/switch.tsx',
        content:
          'import * as React from \'react\';\n\nimport {\n  Switch as SwitchPrimitive,\n  SwitchThumb as SwitchThumbPrimitive,\n  SwitchIcon as SwitchIconPrimitive,\n  type SwitchProps as SwitchPrimitiveProps,\n} from \'@/components/animate-ui/primitives/radix/switch\';\nimport { cn } from \'@/lib/utils\';\n\ntype SwitchProps = SwitchPrimitiveProps & {\n  pressedWidth?: number;\n  startIcon?: React.ReactElement;\n  endIcon?: React.ReactElement;\n  thumbIcon?: React.ReactElement;\n};\n\nfunction Switch({\n  className,\n  pressedWidth = 19,\n  startIcon,\n  endIcon,\n  thumbIcon,\n  ...props\n}: SwitchProps) {\n  return (\n    <SwitchPrimitive\n      className={cn(\n        \'relative peer focus-visible:border-ring focus-visible:ring-ring/50 flex h-5 w-8 px-px shrink-0 items-center justify-start rounded-full border border-transparent shadow-xs outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\',\n        \'data-[state=checked]:bg-primary data-[state=unchecked]:bg-input dark:data-[state=unchecked]:bg-input/80 data-[state=checked]:justify-end\',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchThumbPrimitive\n        className={cn(\n          \'relative z-10 bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0\',\n        )}\n        pressedAnimation={{ width: pressedWidth }}\n      >\n        {thumbIcon && (\n          <SwitchIconPrimitive\n            position="thumb"\n            className="absolute [&_svg]:size-[9px] left-1/2 top-1/2 -translate-1/2 dark:text-neutral-500 text-neutral-400"\n          >\n            {thumbIcon}\n          </SwitchIconPrimitive>\n        )}\n      </SwitchThumbPrimitive>\n\n      {startIcon && (\n        <SwitchIconPrimitive\n          position="left"\n          className="absolute [&_svg]:size-[9px] left-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-500 text-neutral-400"\n        >\n          {startIcon}\n        </SwitchIconPrimitive>\n      )}\n      {endIcon && (\n        <SwitchIconPrimitive\n          position="right"\n          className="absolute [&_svg]:size-[9px] right-0.5 top-1/2 -translate-y-1/2 dark:text-neutral-400 text-neutral-500"\n        >\n          {endIcon}\n        </SwitchIconPrimitive>\n      )}\n    </SwitchPrimitive>\n  );\n}\n\nexport { Switch, type SwitchProps };',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-switch',
  },
  'components-radix-tabs': {
    name: 'components-radix-tabs',
    description:
      'A set of layered sections of content—known as tab panels—that are displayed one at a time.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-tabs'],
    files: [
      {
        path: 'registry/components/radix/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/tabs.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  Tabs as TabsPrimitive,\n  TabsList as TabsListPrimitive,\n  TabsTrigger as TabsTriggerPrimitive,\n  TabsContent as TabsContentPrimitive,\n  TabsContents as TabsContentsPrimitive,\n  TabsHighlight as TabsHighlightPrimitive,\n  TabsHighlightItem as TabsHighlightItemPrimitive,\n  type TabsProps as TabsPrimitiveProps,\n  type TabsListProps as TabsListPrimitiveProps,\n  type TabsTriggerProps as TabsTriggerPrimitiveProps,\n  type TabsContentProps as TabsContentPrimitiveProps,\n  type TabsContentsProps as TabsContentsPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/tabs';\nimport { cn } from '@/lib/utils';\n\ntype TabsProps = TabsPrimitiveProps;\n\nfunction Tabs({ className, ...props }: TabsProps) {\n  return (\n    <TabsPrimitive\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n}\n\ntype TabsListProps = TabsListPrimitiveProps;\n\nfunction TabsList({ className, ...props }: TabsListProps) {\n  return (\n    <TabsHighlightPrimitive className=\"absolute z-0 inset-0 border border-transparent rounded-md bg-background dark:border-input dark:bg-input/30 shadow-sm\">\n      <TabsListPrimitive\n        className={cn(\n          'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n          className,\n        )}\n        {...props}\n      />\n    </TabsHighlightPrimitive>\n  );\n}\n\ntype TabsTriggerProps = TabsTriggerPrimitiveProps;\n\nfunction TabsTrigger({ className, ...props }: TabsTriggerProps) {\n  return (\n    <TabsHighlightItemPrimitive value={props.value} className=\"flex-1\">\n      <TabsTriggerPrimitive\n        className={cn(\n          \"data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md w-full px-2 py-1 text-sm font-medium whitespace-nowrap transition-colors duration-500 ease-in-out focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n          className,\n        )}\n        {...props}\n      />\n    </TabsHighlightItemPrimitive>\n  );\n}\n\ntype TabsContentsProps = TabsContentsPrimitiveProps;\n\nfunction TabsContents(props: TabsContentsProps) {\n  return <TabsContentsPrimitive {...props} />;\n}\n\ntype TabsContentProps = TabsContentPrimitiveProps;\n\nfunction TabsContent({ className, ...props }: TabsContentProps) {\n  return (\n    <TabsContentPrimitive\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/components/radix/tabs/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-tabs',
  },
  'components-radix-toggle': {
    name: 'components-radix-toggle',
    description: 'A two-state button that can be either on or off.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-toggle'],
    files: [
      {
        path: 'registry/components/radix/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/toggle.tsx',
        content:
          "import * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport {\n  Toggle as TogglePrimitive,\n  ToggleItem as ToggleItemPrimitive,\n  ToggleHighlight as ToggleHighlightPrimitive,\n  type ToggleProps as TogglePrimitiveProps,\n  type ToggleItemProps as ToggleItemPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/toggle';\nimport { cn } from '@/lib/utils';\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted/40 hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,background-color,box-shadow] duration-200 ease-in-out aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent/40 hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ntype ToggleProps = TogglePrimitiveProps &\n  ToggleItemPrimitiveProps &\n  VariantProps<typeof toggleVariants>;\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  pressed,\n  defaultPressed,\n  onPressedChange,\n  disabled,\n  ...props\n}: ToggleProps) {\n  return (\n    <TogglePrimitive\n      pressed={pressed}\n      defaultPressed={defaultPressed}\n      onPressedChange={onPressedChange}\n      disabled={disabled}\n      className=\"relative\"\n    >\n      <ToggleHighlightPrimitive className=\"bg-accent rounded-md\" />\n      <ToggleItemPrimitive\n        className={cn(toggleVariants({ variant, size, className }))}\n        {...props}\n      />\n    </TogglePrimitive>\n  );\n}\n\nexport { Toggle, toggleVariants, type ToggleProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-toggle',
  },
  'components-radix-toggle-group': {
    name: 'components-radix-toggle-group',
    description: 'A set of two-state buttons that can be toggled on or off.',
    type: 'registry:ui',
    dependencies: ['class-variance-authority'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-toggle-group',
      'https://animate-ui.com/r/components-radix-toggle',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/components/radix/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/toggle-group.tsx',
        content:
          "import * as React from 'react';\nimport { type VariantProps } from 'class-variance-authority';\n\nimport {\n  ToggleGroup as ToggleGroupPrimitive,\n  ToggleGroupItem as ToggleGroupItemPrimitive,\n  ToggleGroupHighlight as ToggleGroupHighlightPrimitive,\n  ToggleGroupHighlightItem as ToggleGroupHighlightItemPrimitive,\n  useToggleGroup as useToggleGroupPrimitive,\n  type ToggleGroupProps as ToggleGroupPrimitiveProps,\n  type ToggleGroupItemProps as ToggleGroupItemPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/toggle-group';\nimport { toggleVariants } from '@/components/animate-ui/components/radix/toggle';\nimport { cn } from '@/lib/utils';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\nconst [ToggleGroupProvider, useToggleGroup] =\n  getStrictContext<VariantProps<typeof toggleVariants>>('ToggleGroupContext');\n\ntype ToggleGroupProps = ToggleGroupPrimitiveProps &\n  VariantProps<typeof toggleVariants>;\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: ToggleGroupProps) {\n  return (\n    <ToggleGroupPrimitive\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex gap-0.5 w-fit items-center rounded-lg data-[variant=outline]:shadow-xs data-[variant=outline]:border data-[variant=outline]:p-0.5',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupProvider value={{ variant, size }}>\n        {props.type === 'single' ? (\n          <ToggleGroupHighlightPrimitive className=\"bg-accent rounded-md\">\n            {children}\n          </ToggleGroupHighlightPrimitive>\n        ) : (\n          children\n        )}\n      </ToggleGroupProvider>\n    </ToggleGroupPrimitive>\n  );\n}\n\ntype ToggleGroupItemProps = ToggleGroupItemPrimitiveProps &\n  VariantProps<typeof toggleVariants>;\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: ToggleGroupItemProps) {\n  const { variant: contextVariant, size: contextSize } = useToggleGroup();\n  const { type } = useToggleGroupPrimitive();\n\n  return (\n    <ToggleGroupHighlightItemPrimitive\n      value={props.value}\n      className={cn(type === 'multiple' && 'bg-accent rounded-md')}\n    >\n      <ToggleGroupItemPrimitive\n        data-variant={contextVariant || variant}\n        data-size={contextSize || size}\n        className={cn(\n          toggleVariants({\n            variant: contextVariant || variant,\n            size: contextSize || size,\n          }),\n          'min-w-0 border-0 flex-1 shrink-0 shadow-none rounded-md focus:z-10 focus-visible:z-10',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </ToggleGroupItemPrimitive>\n    </ToggleGroupHighlightItemPrimitive>\n  );\n}\n\nexport {\n  ToggleGroup,\n  ToggleGroupItem,\n  type ToggleGroupProps,\n  type ToggleGroupItemProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-toggle-group',
  },
  'components-radix-tooltip': {
    name: 'components-radix-tooltip',
    description:
      'A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-tooltip'],
    files: [
      {
        path: 'registry/components/radix/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/components/radix/tooltip.tsx',
        content:
          "import * as React from 'react';\n\nimport {\n  TooltipProvider as TooltipProviderPrimitive,\n  Tooltip as TooltipPrimitive,\n  TooltipTrigger as TooltipTriggerPrimitive,\n  TooltipContent as TooltipContentPrimitive,\n  TooltipArrow as TooltipArrowPrimitive,\n  TooltipPortal as TooltipPortalPrimitive,\n  type TooltipProviderProps as TooltipProviderPrimitiveProps,\n  type TooltipProps as TooltipPrimitiveProps,\n  type TooltipTriggerProps as TooltipTriggerPrimitiveProps,\n  type TooltipContentProps as TooltipContentPrimitiveProps,\n} from '@/components/animate-ui/primitives/radix/tooltip';\nimport { cn } from '@/lib/utils';\n\ntype TooltipProviderProps = TooltipProviderPrimitiveProps;\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: TooltipProviderProps) {\n  return <TooltipProviderPrimitive delayDuration={delayDuration} {...props} />;\n}\n\ntype TooltipProps = TooltipPrimitiveProps & {\n  delayDuration?: TooltipPrimitiveProps['delayDuration'];\n};\n\nfunction Tooltip({ delayDuration = 0, ...props }: TooltipProps) {\n  return (\n    <TooltipProvider delayDuration={delayDuration}>\n      <TooltipPrimitive {...props} />\n    </TooltipProvider>\n  );\n}\n\ntype TooltipTriggerProps = TooltipTriggerPrimitiveProps;\n\nfunction TooltipTrigger({ ...props }: TooltipTriggerProps) {\n  return <TooltipTriggerPrimitive {...props} />;\n}\n\ntype TooltipContentProps = TooltipContentPrimitiveProps;\n\nfunction TooltipContent({\n  className,\n  sideOffset,\n  children,\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipPortalPrimitive>\n      <TooltipContentPrimitive\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipArrowPrimitive className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipContentPrimitive>\n    </TooltipPortalPrimitive>\n  );\n}\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipContentProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/components/radix/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'components-radix-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/components-radix-tooltip',
  },
  'demo-components-animate-code': {
    name: 'demo-components-animate-code',
    description: 'Demo showing a code.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-animate-code'],
    files: [
      {
        path: 'registry/demo/components/animate/code/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/animate/code.tsx',
        content:
          "'use client';\n\nimport {\n  Code,\n  CodeBlock,\n  CodeHeader,\n} from '@/components/animate-ui/components/animate/code';\nimport ReactIcon from '@/components/icons/react-icon';\nimport { File } from 'lucide-react';\n\ninterface CodeDemoProps {\n  duration: number;\n  delay: number;\n  writing: boolean;\n  cursor: boolean;\n}\n\nexport const CodeDemo = ({\n  duration,\n  delay,\n  writing,\n  cursor,\n}: CodeDemoProps) => {\n  return (\n    <Code\n      key={`${duration}-${delay}-${writing}-${cursor}`}\n      className=\"w-[420px] h-[372px]\"\n      code={`'use client';\n \nimport * as React from 'react';\n  \ntype MyComponentProps = {\n  myProps: string;\n} & React.ComponentProps<'div'>;\n  \nfunction MyComponent(props: MyComponentProps) {\n  return (\n    <div {...props}>\n      <p>My Component</p>\n    </div>\n  );\n}\n\nexport { MyComponent, type MyComponentProps };`}\n    >\n      <CodeHeader icon={ReactIcon} copyButton>\n        my-component.tsx\n      </CodeHeader>\n\n      <CodeBlock\n        cursor={cursor}\n        lang=\"tsx\"\n        writing={writing}\n        duration={duration}\n        delay={delay}\n      />\n    </Code>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/code/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-code';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CodeBlock: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          duration: { value: 10000, min: 0, max: 30000, step: 1000 },
          writing: { value: true },
          cursor: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-animate-code',
  },
  'demo-components-animate-counter': {
    name: 'demo-components-animate-counter',
    description: 'Demo showing a counter.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-animate-counter',
    ],
    files: [
      {
        path: 'registry/demo/components/animate/counter/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/animate/counter.tsx',
        content:
          "'use client';\n\nimport { Counter } from '@/components/animate-ui/components/animate/counter';\n\nexport const CounterDemo = () => {\n  return <Counter />;\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/counter/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-counter';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-animate-counter',
  },
  'demo-components-animate-cursor': {
    name: 'demo-components-animate-cursor',
    description: 'Demo showing a cursor.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-animate-cursor',
    ],
    files: [
      {
        path: 'registry/demo/components/animate/cursor/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/animate/cursor.tsx',
        content:
          "import {\n  Cursor,\n  CursorFollow,\n  CursorProvider,\n  type CursorFollowProps,\n} from '@/components/animate-ui/components/animate/cursor';\n\ninterface CursorDemoProps {\n  global?: boolean;\n  enableCursor?: boolean;\n  enableCursorFollow?: boolean;\n  side?: CursorFollowProps['side'];\n  sideOffset?: number;\n  align?: CursorFollowProps['align'];\n  alignOffset?: number;\n}\n\nexport const CursorDemo = ({\n  global = false,\n  enableCursor = true,\n  enableCursorFollow = true,\n  side = 'bottom',\n  sideOffset = 15,\n  align = 'end',\n  alignOffset = 5,\n}: CursorDemoProps) => {\n  return (\n    <div\n      key={String(global)}\n      className=\"max-w-[400px] h-[400px] w-full bg-accent rounded-lg flex items-center justify-center\"\n    >\n      <p className=\"font-medium italic text-muted-foreground\">\n        Move your mouse over the div\n      </p>\n      <CursorProvider global={global}>\n        {enableCursor && <Cursor />}\n        {enableCursorFollow && (\n          <CursorFollow\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            Designer\n          </CursorFollow>\n        )}\n      </CursorProvider>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/cursor/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-cursor';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CursorProvider: {
          global: { value: false },
          enableCursor: { value: true },
          enableCursorFollow: { value: true },
        },
        CursorFollow: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              right: 'right',
              bottom: 'bottom',
              left: 'left',
            },
          },
          sideOffset: { value: 15 },
          align: {
            value: 'end',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 5 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-animate-cursor',
  },
  'demo-components-animate-github-stars-wheel': {
    name: 'demo-components-animate-github-stars-wheel',
    description: 'Demo showing an animated github stars wheel.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-animate-github-stars-wheel',
    ],
    files: [
      {
        path: 'registry/demo/components/animate/github-stars-wheel/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/animate/github-stars-wheel.tsx',
        content:
          'import { GitHubStarsWheel } from \'@/components/animate-ui/components/animate/github-stars-wheel\';\n\ninterface GitHubStarsWheelDemoProps {\n  delay: number;\n  direction: \'btt\' | \'ttb\';\n}\n\nexport const GitHubStarsWheelDemo = ({\n  delay,\n  direction,\n}: GitHubStarsWheelDemoProps) => {\n  return (\n    <div className="size-full flex items-center justify-center">\n      <GitHubStarsWheel\n        username="imskyleen"\n        repo="animate-ui"\n        delay={delay}\n        direction={direction}\n      />\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/github-stars-wheel/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-github-stars-wheel';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        GitHubStarsWheel: {
          direction: {
            value: 'btt',
            options: { btt: 'btt', ttb: 'ttb', ltr: 'ltr', rtl: 'rtl' },
          },
          delay: { value: 1000, min: 0, max: 3000, step: 100 },
          step: { value: 10, min: 10, max: 1000, step: 10 },
        },
      };
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-animate-github-stars-wheel',
  },
  'demo-components-animate-tabs': {
    name: 'demo-components-animate-tabs',
    description: 'Demo showing an animated tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-animate-tabs'],
    files: [
      {
        path: 'registry/demo/components/animate/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/animate/tabs.tsx',
        content:
          'import {\n  Tabs,\n  TabsContent,\n  TabsContents,\n  TabsList,\n  TabsTrigger,\n} from \'@/components/animate-ui/components/animate/tabs\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \'@/components/ui/card\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\nexport function AnimateTabsDemo() {\n  return (\n    <div className="flex w-full max-w-sm flex-col gap-6">\n      <Tabs defaultValue="account">\n        <TabsList>\n          <TabsTrigger value="account">Account</TabsTrigger>\n          <TabsTrigger value="password">Password</TabsTrigger>\n        </TabsList>\n        <TabsContents>\n          <TabsContent value="account">\n            <Card>\n              <CardHeader>\n                <CardTitle>Account</CardTitle>\n                <CardDescription>\n                  Make changes to your account here. Click save when you&apos;re\n                  done.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-name">Name</Label>\n                  <Input id="tabs-demo-name" defaultValue="Pedro Duarte" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save changes</Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n          <TabsContent value="password">\n            <Card>\n              <CardHeader>\n                <CardTitle>Password</CardTitle>\n                <CardDescription>\n                  Change your password here. After saving, you&apos;ll be logged\n                  out.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-current">Current password</Label>\n                  <Input id="tabs-demo-current" type="password" />\n                </div>\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-new">New password</Label>\n                  <Input id="tabs-demo-new" type="password" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save password</Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n        </TabsContents>\n      </Tabs>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-animate-tabs',
  },
  'demo-components-animate-tooltip': {
    name: 'demo-components-animate-tooltip',
    description: 'Demo showing an animated tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-animate-tooltip',
    ],
    files: [
      {
        path: 'registry/demo/components/animate/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/animate/tooltip.tsx',
        content:
          "'use client';\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/animate-ui/components/animate/tooltip';\nimport { Button } from '@/components/ui/button';\n\ninterface TooltipDemoProps {\n  openDelay?: number;\n  closeDelay?: number;\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport const AnimateTooltipDemo = ({\n  openDelay,\n  closeDelay,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: TooltipDemoProps) => {\n  return (\n    <TooltipProvider\n      key={`${side}-${align}-${sideOffset}-${alignOffset}-${openDelay}-${closeDelay}`}\n      openDelay={openDelay}\n      closeDelay={closeDelay}\n    >\n      <div className=\"flex flex-col gap-5 justify-center items-center\">\n        <div className=\"flex flex-row gap-2 border p-2\">\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger>\n              <Button>Docs</Button>\n            </TooltipTrigger>\n\n            <TooltipContent>\n              <p>Documentation</p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger>\n              <Button>Lorem</Button>\n            </TooltipTrigger>\n\n            <TooltipContent>\n              <p>Lorem ipsum dolor sit amet consectetur adipisicing elit</p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger>\n              <Button>Guide</Button>\n            </TooltipTrigger>\n\n            <TooltipContent>\n              <p>User Guide</p>\n            </TooltipContent>\n          </Tooltip>\n        </div>\n        <div className=\"flex flex-row gap-5\">\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger>\n              <Button>Repo</Button>\n            </TooltipTrigger>\n\n            <TooltipContent>\n              <p>GitHub</p>\n            </TooltipContent>\n          </Tooltip>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/animate/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-animate-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipProvider: {
          openDelay: { value: 0 },
          closeDelay: { value: 300 },
        },
        Tooltip: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 10 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-animate-tooltip',
  },
  'demo-components-backgrounds-bubble': {
    name: 'demo-components-backgrounds-bubble',
    description: 'Demo showing a bubble background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-bubble',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/bubble/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/backgrounds/bubble.tsx',
        content:
          'import { BubbleBackground } from \'@/components/animate-ui/components/backgrounds/bubble\';\n\ntype BubbleBackgroundDemoProps = {\n  interactive: boolean;\n};\n\nexport const BubbleBackgroundDemo = ({\n  interactive,\n}: BubbleBackgroundDemoProps) => {\n  return (\n    <BubbleBackground\n      interactive={interactive}\n      className="absolute inset-0 flex items-center justify-center rounded-xl"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/bubble/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-bubble';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        BubbleBackground: { interactive: { value: true } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-bubble',
  },
  'demo-components-backgrounds-fireworks': {
    name: 'demo-components-backgrounds-fireworks',
    description: 'Demo showing a fireworks background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-fireworks',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/fireworks/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/backgrounds/fireworks.tsx',
        content:
          "'use client';\n\nimport { useTheme } from 'next-themes';\nimport { FireworksBackground } from '@/components/animate-ui/components/backgrounds/fireworks';\n\ntype FireworksBackgroundDemoProps = {\n  population: number;\n};\n\nexport default function FireworksBackgroundDemo({\n  population,\n}: FireworksBackgroundDemoProps) {\n  const { resolvedTheme: theme } = useTheme();\n\n  return (\n    <FireworksBackground\n      className=\"absolute inset-0 flex items-center justify-center rounded-xl\"\n      color={theme === 'dark' ? 'white' : 'black'}\n      population={population}\n    />\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/fireworks/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-fireworks';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        FireworksBackground: {
          population: { value: 1, min: 0.1, max: 10, step: 0.1 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-fireworks',
  },
  'demo-components-backgrounds-fireworks-circle': {
    name: 'demo-components-backgrounds-fireworks-circle',
    description: 'Demo showing a fireworks circle background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-fireworks',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/fireworks-circle/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/backgrounds/fireworks-circle.tsx',
        content:
          "'use client';\n\nimport { useTheme } from 'next-themes';\nimport { FireworksBackground } from '@/components/animate-ui/components/backgrounds/fireworks';\n\ntype FireworksCircleBackgroundDemoProps = {\n  population: number;\n  fireworkSize: number;\n  fireworkSpeed: number;\n  particleSize: number;\n  particleSpeed: number;\n};\n\nexport default function FireworksCircleBackgroundDemo({\n  population,\n  fireworkSize,\n  fireworkSpeed,\n  particleSize,\n  particleSpeed,\n}: FireworksCircleBackgroundDemoProps) {\n  const { resolvedTheme: theme } = useTheme();\n\n  return (\n    <FireworksBackground\n      className=\"absolute inset-0 flex items-center justify-center rounded-xl\"\n      color={theme === 'dark' ? 'white' : 'black'}\n      population={population}\n      fireworkSize={fireworkSize}\n      fireworkSpeed={fireworkSpeed}\n      particleSize={particleSize}\n      particleSpeed={particleSpeed}\n    />\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/fireworks-circle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-fireworks-circle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        FireworksBackground: {
          population: { value: 1, min: 0.1, max: 10, step: 0.1 },
          fireworkSize: { value: 7, min: 1, max: 20, step: 1 },
          fireworkSpeed: { value: 7, min: 1, max: 20, step: 1 },
          particleSize: { value: 7, min: 1, max: 20, step: 1 },
          particleSpeed: { value: 7, min: 1, max: 20, step: 1 },
        },
      };
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-backgrounds-fireworks-circle',
  },
  'demo-components-backgrounds-gradient': {
    name: 'demo-components-backgrounds-gradient',
    description: 'Demo showing a gradient background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-gradient',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/gradient/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/backgrounds/gradient.tsx',
        content:
          'import { GradientBackground } from \'@/components/animate-ui/components/backgrounds/gradient\';\n\nexport const GradientBackgroundDemo = () => {\n  return (\n    <GradientBackground className="absolute inset-0 flex items-center justify-center rounded-xl" />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/gradient/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-gradient';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-gradient',
  },
  'demo-components-backgrounds-hexagon': {
    name: 'demo-components-backgrounds-hexagon',
    description: 'Demo showing a hexagon background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-hexagon',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/hexagon/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/backgrounds/hexagon.tsx',
        content:
          'import { HexagonBackground } from \'@/components/animate-ui/components/backgrounds/hexagon\';\n\nexport const HexagonBackgroundDemo = () => {\n  return (\n    <HexagonBackground className="absolute inset-0 flex items-center justify-center rounded-xl" />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/hexagon/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-hexagon';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-hexagon',
  },
  'demo-components-backgrounds-hole': {
    name: 'demo-components-backgrounds-hole',
    description: 'Demo showing a hole background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-hole',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/hole/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/backgrounds/hole.tsx',
        content:
          'import { HoleBackground } from \'@/components/animate-ui/components/backgrounds/hole\';\n\nexport const HoleBackgroundDemo = () => {\n  return (\n    <HoleBackground className="absolute inset-0 flex items-center justify-center rounded-xl" />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/hole/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-hole';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-hole',
  },
  'demo-components-backgrounds-stars': {
    name: 'demo-components-backgrounds-stars',
    description: 'Demo showing a stars background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-backgrounds-stars',
    ],
    files: [
      {
        path: 'registry/demo/components/backgrounds/stars/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/backgrounds/stars.tsx',
        content:
          "import { StarsBackground } from '@/components/animate-ui/components/backgrounds/stars';\nimport { cn } from '@/lib/utils';\nimport { useTheme } from 'next-themes';\n\nexport const StarsBackgroundDemo = () => {\n  const { resolvedTheme } = useTheme();\n\n  return (\n    <StarsBackground\n      starColor={resolvedTheme === 'dark' ? '#FFF' : '#000'}\n      className={cn(\n        'absolute inset-0 flex items-center justify-center rounded-xl',\n        'dark:bg-[radial-gradient(ellipse_at_bottom,_#262626_0%,_#000_100%)] bg-[radial-gradient(ellipse_at_bottom,_#f5f5f5_0%,_#fff_100%)]',\n      )}\n    />\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/backgrounds/stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-backgrounds-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-backgrounds-stars',
  },
  'demo-components-base-accordion': {
    name: 'demo-components-base-accordion',
    description: 'Demo showing a accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-base-accordion',
    ],
    files: [
      {
        path: 'registry/demo/components/base/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/accordion.tsx',
        content:
          "import {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionPanel,\n} from '@/components/animate-ui/components/base/accordion';\n\nconst ITEMS = [\n  {\n    title: 'What is Animate UI?',\n    content:\n      'Animate UI is an open-source distribution of React components built with TypeScript, Tailwind CSS, and Motion.',\n  },\n  {\n    title: 'How is it different from other libraries?',\n    content:\n      'Instead of installing via NPM, you copy and paste the components directly. This gives you full control to modify or customize them as needed.',\n  },\n  {\n    title: 'Is Animate UI free to use?',\n    content:\n      'Absolutely! Animate UI is fully open-source. You can use, modify, and adapt it to fit your needs.',\n  },\n];\n\ntype BaseAccordionDemoProps = {\n  openMultiple?: boolean;\n  keepRendered?: boolean;\n  showArrow?: boolean;\n};\n\nexport const BaseAccordionDemo = ({\n  openMultiple = false,\n  keepRendered = false,\n  showArrow = true,\n}: BaseAccordionDemoProps) => {\n  return (\n    <Accordion openMultiple={openMultiple} className=\"max-w-[400px] w-full\">\n      {ITEMS.map((item, index) => (\n        <AccordionItem key={index} value={`item-${index + 1}`}>\n          <AccordionTrigger showArrow={showArrow}>\n            {item.title}\n          </AccordionTrigger>\n          <AccordionPanel keepRendered={keepRendered}>\n            {item.content}\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Accordion: { openMultiple: { value: false } },
        AccordionTrigger: { showArrow: { value: true } },
        AccordionPanel: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-accordion',
  },
  'demo-components-base-checkbox': {
    name: 'demo-components-base-checkbox',
    description: 'Demo showing a checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-checkbox'],
    files: [
      {
        path: 'registry/demo/components/base/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/checkbox.tsx',
        content:
          "import { Label } from '@/components/ui/label';\nimport {\n  Checkbox,\n  type CheckboxProps,\n} from '@/components/animate-ui/components/base/checkbox';\n\ninterface BaseCheckboxDemoProps {\n  indeterminate: boolean;\n  variant: CheckboxProps['variant'];\n  size: CheckboxProps['size'];\n}\n\nexport const BaseCheckboxDemo = ({\n  indeterminate,\n  variant,\n  size,\n}: BaseCheckboxDemoProps) => {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox\n        id=\"terms\"\n        indeterminate={indeterminate}\n        variant={variant}\n        size={size}\n      />\n      <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Checkbox: {
          indeterminate: { value: false },
          variant: {
            value: 'default',
            options: { default: 'default', accent: 'accent' },
          },
          size: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-checkbox',
  },
  'demo-components-base-files': {
    name: 'demo-components-base-files',
    description: 'Demo showing a files.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-files'],
    files: [
      {
        path: 'registry/demo/components/base/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/files.tsx',
        content:
          '\'use client\';\n\nimport React from \'react\';\nimport {\n  FileItem,\n  FolderItem,\n  FolderTrigger,\n  FolderPanel,\n  Files,\n  SubFiles,\n} from \'@/components/animate-ui/components/base/files\';\nimport { FileJsonIcon } from \'lucide-react\';\n\nexport const BaseFilesDemo = () => {\n  return (\n    <div className="relative max-w-[500px] max-h-[350px] size-full rounded-2xl border bg-background overflow-auto">\n      <Files className="w-full" defaultOpen={[\'app\']}>\n        <FolderItem value="app">\n          <FolderTrigger\n            gitStatus="modified"\n            className="w-full flex items-center justify-between"\n          >\n            app\n          </FolderTrigger>\n\n          <FolderPanel>\n            <SubFiles defaultOpen={[\'(home)\']}>\n              <FolderItem value="(home)">\n                <FolderTrigger gitStatus="untracked">(home)</FolderTrigger>\n\n                <FolderPanel>\n                  <FileItem gitStatus="untracked">page.tsx</FileItem>\n                  <FileItem gitStatus="untracked">layout.tsx</FileItem>\n                </FolderPanel>\n              </FolderItem>\n\n              <FileItem>layout.tsx</FileItem>\n              <FileItem gitStatus="modified">page.tsx</FileItem>\n              <FileItem>global.css</FileItem>\n            </SubFiles>\n          </FolderPanel>\n        </FolderItem>\n\n        <FolderItem value="components">\n          <FolderTrigger>components</FolderTrigger>\n\n          <FolderPanel>\n            <SubFiles>\n              <FileItem>button.tsx</FileItem>\n              <FileItem>tabs.tsx</FileItem>\n              <FileItem>dialog.tsx</FileItem>\n\n              <FolderItem value="empty">\n                <FolderTrigger>empty</FolderTrigger>\n              </FolderItem>\n            </SubFiles>\n          </FolderPanel>\n        </FolderItem>\n\n        <FileItem icon={FileJsonIcon}>package.json</FileItem>\n      </Files>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/files/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-files',
  },
  'demo-components-base-popover': {
    name: 'demo-components-base-popover',
    description: 'Demo showing a popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-popover'],
    files: [
      {
        path: 'registry/demo/components/base/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverTrigger,\n  PopoverPanel,\n} from \'@/components/animate-ui/components/base/popover\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\ninterface BasePopoverDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const BasePopoverDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: BasePopoverDemoProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger\n        render={<Button variant="outline">Open popover</Button>}\n      />\n      <PopoverPanel\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n        className="w-80"\n      >\n        <div className="grid gap-4">\n          <div className="space-y-2">\n            <h4 className="leading-none font-medium">Dimensions</h4>\n            <p className="text-muted-foreground text-sm">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className="grid gap-2">\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="width">Width</Label>\n              <Input\n                id="width"\n                defaultValue="100%"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxWidth">Max. width</Label>\n              <Input\n                id="maxWidth"\n                defaultValue="300px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="height">Height</Label>\n              <Input\n                id="height"\n                defaultValue="25px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxHeight">Max. height</Label>\n              <Input\n                id="maxHeight"\n                defaultValue="none"\n                className="col-span-2 h-8"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverPanel>\n    </Popover>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverPanel: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-popover',
  },
  'demo-components-base-preview-card': {
    name: 'demo-components-base-preview-card',
    description: 'Demo showing a preview card.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-base-preview-card',
    ],
    files: [
      {
        path: 'registry/demo/components/base/preview-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/preview-card.tsx',
        content:
          'import {\n  PreviewCard,\n  PreviewCardTrigger,\n  PreviewCardPanel,\n} from \'@/components/animate-ui/components/base/preview-card\';\n\ninterface BasePreviewCardDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const BasePreviewCardDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: BasePreviewCardDemoProps) => {\n  return (\n    <PreviewCard>\n      <PreviewCardTrigger\n        render={\n          <a\n            className="size-12 border rounded-full overflow-hidden"\n            href="https://twitter.com/animate_ui"\n            target="_blank"\n            rel="noreferrer noopener"\n          >\n            <img\n              src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n              alt="Animate UI"\n            />\n          </a>\n        }\n      />\n\n      <PreviewCardPanel\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n        className="w-80"\n      >\n        <div className="flex flex-col gap-4">\n          <img\n            className="size-16 rounded-full overflow-hidden border"\n            src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n            alt="Animate UI"\n          />\n          <div className="flex flex-col gap-4">\n            <div>\n              <div className="font-bold">Animate UI</div>\n              <div className="text-sm text-muted-foreground">@animate_ui</div>\n            </div>\n            <div className="text-sm text-muted-foreground">\n              A fully animated, open-source component distribution built with\n              React, TypeScript, Tailwind CSS, and Motion.\n            </div>\n            <div className="flex gap-4">\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">0</div>{\' \'}\n                <div className="text-muted-foreground">Following</div>\n              </div>\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">2,900</div>{\' \'}\n                <div className="text-muted-foreground">Followers</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </PreviewCardPanel>\n    </PreviewCard>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/preview-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-preview-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PreviewCardPanel: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'inline-start': 'inline-start',
              'inline-end': 'inline-end',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-preview-card',
  },
  'demo-components-base-progress': {
    name: 'demo-components-base-progress',
    description: 'Demo showing a progress bar.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-progress'],
    files: [
      {
        path: 'registry/demo/components/base/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/progress.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  Progress,\n  ProgressLabel,\n  ProgressTrack,\n  ProgressValue,\n} from \'@/components/animate-ui/components/base/progress\';\n\nexport const BaseProgressDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) return 100;\n        return prev + 25;\n      });\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  React.useEffect(() => {\n    if (progress >= 100) setTimeout(() => setProgress(0), 4000);\n  }, [progress]);\n\n  return (\n    <Progress value={progress} className="w-[300px] space-y-2">\n      <div className="flex items-center justify-between gap-1">\n        <ProgressLabel>Export data</ProgressLabel>\n        <span className="text-sm">\n          <ProgressValue /> %\n        </span>\n      </div>\n      <ProgressTrack />\n    </Progress>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-progress',
  },
  'demo-components-base-switch': {
    name: 'demo-components-base-switch',
    description: 'Demo showing a switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-switch'],
    files: [
      {
        path: 'registry/demo/components/base/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/switch.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { Switch } from \'@/components/animate-ui/components/base/switch\';\n\nexport function BaseSwitchDemo() {\n  return (\n    <div className="flex items-center space-x-2">\n      <Switch id="airplane-mode" />\n      <Label htmlFor="airplane-mode">Airplane Mode</Label>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-switch',
  },
  'demo-components-base-toggle': {
    name: 'demo-components-base-toggle',
    description: 'Demo showing a toggle.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-toggle'],
    files: [
      {
        path: 'registry/demo/components/base/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/toggle.tsx',
        content:
          "import { Toggle, type ToggleProps } from '@/components/animate-ui/components/base/toggle';\nimport { Bold } from 'lucide-react';\n\ninterface BaseToggleDemoProps {\n  variant: ToggleProps['variant'];\n  size: ToggleProps['size'];\n}\n\nexport function BaseToggleDemo({ variant, size }: BaseToggleDemoProps) {\n  return (\n    <Toggle aria-label=\"Toggle italic\" variant={variant} size={size}>\n      <Bold />\n    </Toggle>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Toggle: {
          variant: {
            value: 'default',
            options: { default: 'default', outline: 'outline' },
          },
          size: {
            value: 'icon',
            options: { default: 'default', sm: 'sm', lg: 'lg', icon: 'icon' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-toggle',
  },
  'demo-components-base-toggle-group': {
    name: 'demo-components-base-toggle-group',
    description: 'Demo showing a toggle group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-base-toggle-group',
    ],
    files: [
      {
        path: 'registry/demo/components/base/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/toggle-group.tsx',
        content:
          'import {\n  Toggle,\n  ToggleGroup,\n  type ToggleGroupProps,\n} from \'@/components/animate-ui/components/base/toggle-group\';\nimport { Bold, Italic, Underline } from \'lucide-react\';\n\ninterface BaseToggleGroupDemoProps {\n  toggleMultiple: boolean;\n  variant: ToggleGroupProps[\'variant\'];\n  size: ToggleGroupProps[\'size\'];\n}\n\nexport function BaseToggleGroupDemo({\n  toggleMultiple,\n  variant,\n  size,\n}: BaseToggleGroupDemoProps) {\n  return (\n    <ToggleGroup toggleMultiple={toggleMultiple} variant={variant} size={size}>\n      <Toggle value="bold" aria-label="Toggle bold">\n        <Bold />\n      </Toggle>\n      <Toggle value="italic" aria-label="Toggle italic">\n        <Italic />\n      </Toggle>\n      <Toggle value="strikethrough" aria-label="Toggle strikethrough">\n        <Underline />\n      </Toggle>\n    </ToggleGroup>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ToggleGroup: {
          toggleMultiple: { value: false },
          variant: {
            value: 'default',
            options: { default: 'default', outline: 'outline' },
          },
          size: {
            value: 'icon',
            options: { default: 'default', sm: 'sm', lg: 'lg', icon: 'icon' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-toggle-group',
  },
  'demo-components-base-tooltip': {
    name: 'demo-components-base-tooltip',
    description: 'Demo showing a tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-base-tooltip'],
    files: [
      {
        path: 'registry/demo/components/base/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/base/tooltip.tsx',
        content:
          "import {\n  Tooltip,\n  TooltipTrigger,\n  TooltipPanel,\n  type TooltipPanelProps,\n} from '@/components/animate-ui/components/base/tooltip';\nimport { Button } from '@/components/ui/button';\n\ninterface BaseTooltipDemoProps {\n  side: TooltipPanelProps['side'];\n  sideOffset: TooltipPanelProps['sideOffset'];\n  align: TooltipPanelProps['align'];\n  alignOffset: TooltipPanelProps['alignOffset'];\n}\n\nexport function BaseTooltipDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: BaseTooltipDemoProps) {\n  return (\n    <Tooltip>\n      <TooltipTrigger render={<Button variant=\"outline\">Hover</Button>} />\n      <TooltipPanel\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n      >\n        <p>Add to library</p>\n      </TooltipPanel>\n    </Tooltip>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/base/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-base-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipPanel: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'inline-start': 'inline-start',
              'inline-end': 'inline-end',
            },
          },
          sideOffset: { value: 10 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-base-tooltip',
  },
  'demo-components-buttons-button': {
    name: 'demo-components-buttons-button',
    description: 'Demo showing a button.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-button',
    ],
    files: [
      {
        path: 'registry/demo/components/buttons/button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/button.tsx',
        content:
          "import { PlusIcon } from 'lucide-react';\nimport { Button, type ButtonProps } from '@/components/animate-ui/components/buttons/button';\n\ninterface ButtonDemoProps {\n  variant: ButtonProps['variant'];\n  size: ButtonProps['size'];\n}\n\nexport default function ButtonDemo({ variant, size }: ButtonDemoProps) {\n  return (\n    <Button variant={variant} size={size}>\n      {size === 'icon' ? <PlusIcon /> : 'Click me'}\n    </Button>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/button/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-button';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Button: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              destructive: 'destructive',
              outline: 'outline',
              secondary: 'secondary',
              ghost: 'ghost',
              link: 'link',
            },
          },
          size: {
            value: 'default',
            options: {
              default: 'default',
              sm: 'sm',
              lg: 'lg',
              icon: 'icon',
              'icon-sm': 'icon-sm',
              'icon-lg': 'icon-lg',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-button',
  },
  'demo-components-buttons-copy': {
    name: 'demo-components-buttons-copy',
    description: 'Demo showing a copy button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-buttons-copy'],
    files: [
      {
        path: 'registry/demo/components/buttons/copy/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/copy.tsx',
        content:
          "import {\n  CopyButton,\n  type CopyButtonProps,\n} from '@/components/animate-ui/components/buttons/copy';\n\ninterface CopyButtonDemoProps {\n  variant: CopyButtonProps['variant'];\n  size: CopyButtonProps['size'];\n}\n\nexport default function CopyButtonDemo({ variant, size }: CopyButtonDemoProps) {\n  return <CopyButton variant={variant} size={size} content=\"Hello world!\" />;\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/copy/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-copy';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CopyButton: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              destructive: 'destructive',
              outline: 'outline',
              secondary: 'secondary',
              ghost: 'ghost',
              link: 'link',
            },
          },
          size: {
            value: 'default',
            options: { default: 'default', xs: 'xs', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-copy',
  },
  'demo-components-buttons-flip': {
    name: 'demo-components-buttons-flip',
    description: 'Demo showing a flip button.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-buttons-flip'],
    files: [
      {
        path: 'registry/demo/components/buttons/flip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/flip.tsx',
        content:
          "import { PlusIcon } from 'lucide-react';\nimport {\n  FlipButton,\n  FlipButtonBack,\n  FlipButtonFront,\n  type FlipButtonProps,\n} from '@/components/animate-ui/components/buttons/flip';\n\ninterface ButtonDemoProps {\n  frontVariant: FlipButtonProps['variant'];\n  frontSize: FlipButtonProps['size'];\n  backVariant: FlipButtonProps['variant'];\n  backSize: FlipButtonProps['size'];\n}\n\nexport default function ButtonDemo({\n  frontVariant,\n  frontSize,\n  backVariant,\n  backSize,\n}: ButtonDemoProps) {\n  return (\n    <FlipButton>\n      <FlipButtonFront variant={frontVariant} size={frontSize}>\n        {frontSize === 'icon' ? <PlusIcon /> : 'Front Button'}\n      </FlipButtonFront>\n      <FlipButtonBack variant={backVariant} size={backSize}>\n        {backSize === 'icon' ? <PlusIcon /> : 'Back Button'}\n      </FlipButtonBack>\n    </FlipButton>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/flip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-flip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        FlipButtonFront: {
          frontVariant: {
            value: 'accent',
            options: {
              default: 'default',
              accent: 'accent',
              destructive: 'destructive',
              outline: 'outline',
              secondary: 'secondary',
              ghost: 'ghost',
              link: 'link',
            },
          },
          frontSize: {
            value: 'default',
            options: {
              default: 'default',
              sm: 'sm',
              lg: 'lg',
              icon: 'icon',
              'icon-sm': 'icon-sm',
              'icon-lg': 'icon-lg',
            },
          },
        },
        FlipButtonBack: {
          backVariant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              destructive: 'destructive',
              outline: 'outline',
              secondary: 'secondary',
              ghost: 'ghost',
              link: 'link',
            },
          },
          backSize: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg', icon: 'icon' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-flip',
  },
  'demo-components-buttons-github-stars': {
    name: 'demo-components-buttons-github-stars',
    description: 'Demo showing a GitHub stars button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-github-stars',
    ],
    files: [
      {
        path: 'registry/demo/components/buttons/github-stars/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/buttons/github-stars.tsx',
        content:
          "import {\n  GitHubStarsButton,\n  type GitHubStarsButtonProps,\n} from '@/components/animate-ui/components/buttons/github-stars';\n\ninterface GitHubStarsButtonDemoProps {\n  variant: GitHubStarsButtonProps['variant'];\n  size: GitHubStarsButtonProps['size'];\n}\n\nexport default function GitHubStarsButtonDemo({\n  variant,\n  size,\n}: GitHubStarsButtonDemoProps) {\n  return (\n    <GitHubStarsButton\n      variant={variant}\n      size={size}\n      username=\"imskyleen\"\n      repo=\"animate-ui\"\n    />\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/github-stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-github-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        GitHubStarsButton: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              outline: 'outline',
              ghost: 'ghost',
            },
          },
          size: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-github-stars',
  },
  'demo-components-buttons-icon': {
    name: 'demo-components-buttons-icon',
    description: 'Demo showing an icon button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-buttons-icon'],
    files: [
      {
        path: 'registry/demo/components/buttons/icon/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/icon.tsx',
        content:
          "import {\n  IconButton,\n  type IconButtonProps,\n} from '@/components/animate-ui/components/buttons/icon';\nimport { StarIcon } from 'lucide-react';\n\ninterface IconButtonDemoProps {\n  variant: IconButtonProps['variant'];\n  size: IconButtonProps['size'];\n}\n\nexport default function IconButtonDemo({ variant, size }: IconButtonDemoProps) {\n  return (\n    <IconButton variant={variant} size={size}>\n      <StarIcon />\n    </IconButton>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/icon/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-icon';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        IconButton: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              outline: 'outline',
              ghost: 'ghost',
            },
          },
          size: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-icon',
  },
  'demo-components-buttons-liquid': {
    name: 'demo-components-buttons-liquid',
    description: 'Demo showing a liquid button.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-liquid',
    ],
    files: [
      {
        path: 'registry/demo/components/buttons/liquid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/liquid.tsx',
        content:
          "import { PlusIcon } from 'lucide-react';\nimport {\n  LiquidButton,\n  type LiquidButtonProps,\n} from '@/components/animate-ui/components/buttons/liquid';\n\ninterface LiquidButtonDemoProps {\n  variant: LiquidButtonProps['variant'];\n  size: LiquidButtonProps['size'];\n}\n\nexport default function LiquidButtonDemo({\n  variant,\n  size,\n}: LiquidButtonDemoProps) {\n  return (\n    <LiquidButton variant={variant} size={size}>\n      {size === 'icon' ? <PlusIcon /> : 'Hover me'}\n    </LiquidButton>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/liquid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-liquid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        LiquidButton: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              destructive: 'destructive',
              ghost: 'ghost',
            },
          },
          size: {
            value: 'default',
            options: {
              default: 'default',
              sm: 'sm',
              lg: 'lg',
              icon: 'icon',
              'icon-sm': 'icon-sm',
              'icon-lg': 'icon-lg',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-liquid',
  },
  'demo-components-buttons-ripple': {
    name: 'demo-components-buttons-ripple',
    description: 'Demo showing a ripple button.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-buttons-ripple',
    ],
    files: [
      {
        path: 'registry/demo/components/buttons/ripple/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/buttons/ripple.tsx',
        content:
          "import { PlusIcon } from 'lucide-react';\nimport {\n  RippleButton,\n  RippleButtonRipples,\n  type RippleButtonProps,\n} from '@/components/animate-ui/components/buttons/ripple';\n\ninterface RippleButtonDemoProps {\n  variant: RippleButtonProps['variant'];\n  size: RippleButtonProps['size'];\n}\n\nexport default function RippleButtonDemo({\n  variant,\n  size,\n}: RippleButtonDemoProps) {\n  return (\n    <RippleButton variant={variant} size={size}>\n      {size === 'icon' ? <PlusIcon /> : 'Click me'}\n      <RippleButtonRipples />\n    </RippleButton>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/buttons/ripple/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-buttons-ripple';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        RippleButton: {
          variant: {
            value: 'default',
            options: {
              default: 'default',
              accent: 'accent',
              destructive: 'destructive',
              outline: 'outline',
              secondary: 'secondary',
              ghost: 'ghost',
              link: 'link',
            },
          },
          size: {
            value: 'default',
            options: {
              default: 'default',
              sm: 'sm',
              lg: 'lg',
              icon: 'icon',
              'icon-sm': 'icon-sm',
              'icon-lg': 'icon-lg',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-buttons-ripple',
  },
  'demo-components-community-management-bar': {
    name: 'demo-components-community-management-bar',
    description: 'Demo showing a management bar.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-community-management-bar',
    ],
    files: [
      {
        path: 'registry/demo/components/community/management-bar/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/community/management-bar.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { ManagementBar } from '@/components/animate-ui/components/community/management-bar';\n\nexport const ManagementBarDemo = () => <ManagementBar />;",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/community/management-bar/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-community-management-bar';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-community-management-bar',
  },
  'demo-components-community-pin-list': {
    name: 'demo-components-community-pin-list',
    description: 'Demo showing a pin list.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-community-pin-list',
    ],
    files: [
      {
        path: 'registry/demo/components/community/pin-list/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/community/pin-list.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { GitCommit, AlertTriangle, Box, KeyRound, Regex } from 'lucide-react';\n\nimport { PinList } from '@/components/animate-ui/components/community/pin-list';\n\nconst ITEMS = [\n  {\n    id: 1,\n    name: 'Commit Zone',\n    info: 'Code updates · Closes 9:00 PM',\n    icon: GitCommit,\n    pinned: true,\n  },\n  {\n    id: 2,\n    name: '404 Room',\n    info: 'Fixing errors · Open 24 hours',\n    icon: AlertTriangle,\n    pinned: true,\n  },\n  {\n    id: 3,\n    name: 'NPM Stop',\n    info: 'Install stuff · Closes 8:00 PM',\n    icon: Box,\n    pinned: false,\n  },\n  {\n    id: 4,\n    name: 'Token Lock',\n    info: 'Login stuff · Open 24 hours',\n    icon: KeyRound,\n    pinned: false,\n  },\n  {\n    id: 5,\n    name: 'Regex Zone',\n    info: 'Find words · Closes 9:00 PM',\n    icon: Regex,\n    pinned: false,\n  },\n];\n\nexport const PinListDemo = () => <PinList items={ITEMS} />;",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/community/pin-list/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-community-pin-list';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-community-pin-list',
  },
  'demo-components-community-playful-todolist': {
    name: 'demo-components-community-playful-todolist',
    description: 'Demo showing a playful todolist.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-community-playful-todolist',
    ],
    files: [
      {
        path: 'registry/demo/components/community/playful-todolist/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/community/playful-todolist.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { PlayfulTodolist } from '@/components/animate-ui/components/community/playful-todolist';\n\nexport const PlayfulTodolistDemo = () => <PlayfulTodolist />;",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/community/playful-todolist/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-community-playful-todolist';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-community-playful-todolist',
  },
  'demo-components-headless-accordion': {
    name: 'demo-components-headless-accordion',
    description: 'Demo showing a accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-headless-accordion',
    ],
    files: [
      {
        path: 'registry/demo/components/headless/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/accordion.tsx',
        content:
          "import {\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n} from '@/components/animate-ui/components/headless/accordion';\n\nconst ITEMS = [\n  {\n    title: 'What is Animate UI?',\n    content:\n      'Animate UI is an open-source distribution of React components built with TypeScript, Tailwind CSS, and Motion.',\n  },\n  {\n    title: 'How is it different from other libraries?',\n    content:\n      'Instead of installing via NPM, you copy and paste the components directly. This gives you full control to modify or customize them as needed.',\n  },\n  {\n    title: 'Is Animate UI free to use?',\n    content:\n      'Absolutely! Animate UI is fully open-source. You can use, modify, and adapt it to fit your needs.',\n  },\n];\n\ntype HeadlessAccordionDemoProps = {\n  keepRendered?: boolean;\n  showArrow?: boolean;\n};\n\nexport const HeadlessAccordionDemo = ({\n  keepRendered = false,\n  showArrow = true,\n}: HeadlessAccordionDemoProps) => {\n  return (\n    <Accordion className=\"max-w-[400px] w-full\">\n      {ITEMS.map((item, index) => (\n        <AccordionItem key={index}>\n          <AccordionButton showArrow={showArrow}>{item.title}</AccordionButton>\n          <AccordionPanel keepRendered={keepRendered}>\n            {item.content}\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        AccordionButton: { showArrow: { value: true } },
        AccordionPanel: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-accordion',
  },
  'demo-components-headless-checkbox': {
    name: 'demo-components-headless-checkbox',
    description: 'Demo showing a checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-headless-checkbox',
    ],
    files: [
      {
        path: 'registry/demo/components/headless/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/checkbox.tsx',
        content:
          "import { Label } from '@/components/ui/label';\nimport {\n  Checkbox,\n  type CheckboxProps,\n} from '@/components/animate-ui/components/headless/checkbox';\n\ninterface HeadlessCheckboxDemoProps {\n  indeterminate: boolean;\n  variant: CheckboxProps['variant'];\n  size: CheckboxProps['size'];\n}\n\nexport const HeadlessCheckboxDemo = ({\n  indeterminate,\n  variant,\n  size,\n}: HeadlessCheckboxDemoProps) => {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox\n        id=\"terms\"\n        indeterminate={indeterminate}\n        variant={variant}\n        size={size}\n      />\n      <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Checkbox: {
          indeterminate: { value: false },
          variant: {
            value: 'default',
            options: { default: 'default', accent: 'accent' },
          },
          size: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-checkbox',
  },
  'demo-components-headless-dialog': {
    name: 'demo-components-headless-dialog',
    description: 'Demo showing a dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-headless-dialog',
    ],
    files: [
      {
        path: 'registry/demo/components/headless/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/dialog.tsx',
        content:
          'import * as React from \'react\';\n\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Dialog,\n  DialogPanel,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  type DialogPanelProps,\n} from \'@/components/animate-ui/components/headless/dialog\';\nimport { Label } from \'@/components/ui/label\';\nimport { Input } from \'@/components/ui/input\';\n\ninterface HeadlessDialogDemoProps {\n  from: DialogPanelProps[\'from\'];\n  showCloseButton: boolean;\n}\n\nexport const HeadlessDialogDemo = ({\n  from,\n  showCloseButton,\n}: HeadlessDialogDemoProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div>\n      <Button variant="outline" onClick={() => setIsOpen(true)}>\n        Open Dialog\n      </Button>\n\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogPanel\n          from={from}\n          showCloseButton={showCloseButton}\n          className="sm:max-w-[425px]"\n        >\n          <form className="flex flex-col gap-4">\n            <DialogHeader>\n              <DialogTitle>Edit profile</DialogTitle>\n              <DialogDescription>\n                Make changes to your profile here. Click save when you&apos;re\n                done.\n              </DialogDescription>\n            </DialogHeader>\n            <div className="grid gap-4">\n              <div className="grid gap-3">\n                <Label htmlFor="name-1">Name</Label>\n                <Input id="name-1" name="name" defaultValue="Pedro Duarte" />\n              </div>\n              <div className="grid gap-3">\n                <Label htmlFor="username-1">Username</Label>\n                <Input\n                  id="username-1"\n                  name="username"\n                  defaultValue="@peduarte"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant="outline" onClick={() => setIsOpen(false)}>\n                Cancel\n              </Button>\n              <Button type="submit">Save changes</Button>\n            </DialogFooter>\n          </form>\n        </DialogPanel>\n      </Dialog>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DialogPanel: {
          from: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          showCloseButton: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-dialog',
  },
  'demo-components-headless-popover': {
    name: 'demo-components-headless-popover',
    description: 'Demo showing a popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-headless-popover',
    ],
    files: [
      {
        path: 'registry/demo/components/headless/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \'@/components/animate-ui/components/headless/popover\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\ninterface HeadlessPopoverDemoProps {\n  anchor?:\n    | \'top\'\n    | \'bottom\'\n    | \'left\'\n    | \'right\'\n    | \'top start\'\n    | \'top end\'\n    | \'bottom start\'\n    | \'bottom end\'\n    | \'left start\'\n    | \'left end\'\n    | \'right start\'\n    | \'right end\';\n  gap?: number;\n}\n\nexport function HeadlessPopoverDemo({\n  anchor = \'bottom\',\n  gap = 4,\n}: HeadlessPopoverDemoProps) {\n  return (\n    <Popover>\n      <PopoverButton as={Button} variant="outline">\n        Open popover\n      </PopoverButton>\n\n      <PopoverPanel anchor={{ to: anchor, gap }} className="w-80">\n        <div className="grid gap-4">\n          <div className="space-y-2">\n            <h4 className="leading-none font-medium">Dimensions</h4>\n            <p className="text-muted-foreground text-sm">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className="grid gap-2">\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="width">Width</Label>\n              <Input\n                id="width"\n                defaultValue="100%"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxWidth">Max. width</Label>\n              <Input\n                id="maxWidth"\n                defaultValue="300px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="height">Height</Label>\n              <Input\n                id="height"\n                defaultValue="25px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxHeight">Max. height</Label>\n              <Input\n                id="maxHeight"\n                defaultValue="none"\n                className="col-span-2 h-8"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverPanel>\n    </Popover>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverPanel: {
          anchor: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'top start': 'top start',
              'top end': 'top end',
              'bottom start': 'bottom start',
              'bottom end': 'bottom end',
              'left start': 'left start',
              'left end': 'left end',
              'right start': 'right start',
              'right end': 'right end',
            },
          },
          gap: { value: 4 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-popover',
  },
  'demo-components-headless-switch': {
    name: 'demo-components-headless-switch',
    description: 'Demo showing a headless switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-headless-switch',
    ],
    files: [
      {
        path: 'registry/demo/components/headless/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/switch.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { Switch } from \'@/components/animate-ui/components/headless/switch\';\n\nexport function HeadlessSwitchDemo() {\n  return (\n    <div className="flex items-center space-x-2">\n      <Switch id="airplane-mode" />\n      <Label htmlFor="airplane-mode">Airplane Mode</Label>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-switch',
  },
  'demo-components-headless-tabs': {
    name: 'demo-components-headless-tabs',
    description: 'Demo showing a headless tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-headless-tabs'],
    files: [
      {
        path: 'registry/demo/components/headless/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/headless/tabs.tsx',
        content:
          'import {\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  TabList,\n  Tab,\n} from \'@/components/animate-ui/components/headless/tabs\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \'@/components/ui/card\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\nexport function RadixTabsDemo() {\n  return (\n    <div className="flex w-full max-w-sm flex-col gap-6">\n      <TabGroup defaultValue="account">\n        <TabList>\n          <Tab index={0} value="account">\n            Account\n          </Tab>\n          <Tab index={1} value="password">\n            Password\n          </Tab>\n        </TabList>\n        <TabPanels>\n          <Card>\n            <TabPanel className="flex flex-col gap-6">\n              <CardHeader>\n                <CardTitle>Account</CardTitle>\n                <CardDescription>\n                  Make changes to your account here. Click save when you&apos;re\n                  done.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-name">Name</Label>\n                  <Input id="tabs-demo-name" defaultValue="Pedro Duarte" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save changes</Button>\n              </CardFooter>\n            </TabPanel>\n            <TabPanel className="flex flex-col gap-6">\n              <CardHeader>\n                <CardTitle>Password</CardTitle>\n                <CardDescription>\n                  Change your password here. After saving, you&apos;ll be logged\n                  out.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-current">Current password</Label>\n                  <Input id="tabs-demo-current" type="password" />\n                </div>\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-new">New password</Label>\n                  <Input id="tabs-demo-new" type="password" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save password</Button>\n              </CardFooter>\n            </TabPanel>\n          </Card>\n        </TabPanels>\n      </TabGroup>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/headless/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-headless-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-headless-tabs',
  },
  'demo-components-radix-accordion': {
    name: 'demo-components-radix-accordion',
    description: 'Demo showing a accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-accordion',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/accordion.tsx',
        content:
          "import {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n} from '@/components/animate-ui/components/radix/accordion';\n\nconst ITEMS = [\n  {\n    title: 'What is Animate UI?',\n    content:\n      'Animate UI is an open-source distribution of React components built with TypeScript, Tailwind CSS, and Motion.',\n  },\n  {\n    title: 'How is it different from other libraries?',\n    content:\n      'Instead of installing via NPM, you copy and paste the components directly. This gives you full control to modify or customize them as needed.',\n  },\n  {\n    title: 'Is Animate UI free to use?',\n    content:\n      'Absolutely! Animate UI is fully open-source. You can use, modify, and adapt it to fit your needs.',\n  },\n];\n\ntype RadixAccordionDemoProps = {\n  multiple?: boolean;\n  collapsible?: boolean;\n  keepRendered?: boolean;\n  showArrow?: boolean;\n};\n\nexport const RadixAccordionDemo = ({\n  multiple = false,\n  collapsible = true,\n  keepRendered = false,\n  showArrow = true,\n}: RadixAccordionDemoProps) => {\n  return (\n    <Accordion\n      type={multiple ? 'multiple' : 'single'}\n      collapsible={collapsible}\n      className=\"max-w-[400px] w-full\"\n    >\n      {ITEMS.map((item, index) => (\n        <AccordionItem key={index} value={`item-${index + 1}`}>\n          <AccordionTrigger showArrow={showArrow}>\n            {item.title}\n          </AccordionTrigger>\n          <AccordionContent keepRendered={keepRendered}>\n            {item.content}\n          </AccordionContent>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Accordion: { multiple: { value: false }, collapsible: { value: true } },
        AccordionTrigger: { showArrow: { value: true } },
        AccordionContent: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-accordion',
  },
  'demo-components-radix-checkbox': {
    name: 'demo-components-radix-checkbox',
    description: 'Demo showing a checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-checkbox',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/checkbox.tsx',
        content:
          "import { useEffect, useState } from 'react';\n\nimport { Label } from '@/components/ui/label';\nimport {\n  Checkbox,\n  type CheckboxProps,\n} from '@/components/animate-ui/components/radix/checkbox';\n\ninterface RadixCheckboxDemoProps {\n  checked: boolean | 'indeterminate';\n  variant: CheckboxProps['variant'];\n  size: CheckboxProps['size'];\n}\n\nexport const RadixCheckboxDemo = ({\n  checked,\n  variant,\n  size,\n}: RadixCheckboxDemoProps) => {\n  const [isChecked, setIsChecked] = useState(checked ?? false);\n\n  useEffect(() => {\n    setIsChecked(checked);\n  }, [checked]);\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Checkbox\n        id=\"terms\"\n        checked={isChecked}\n        onCheckedChange={setIsChecked}\n        variant={variant}\n        size={size}\n      />\n      <Label htmlFor=\"terms\">Accept terms and conditions</Label>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Checkbox: {
          checked: {
            value: false,
            options: {
              true: true,
              false: false,
              indeterminate: 'indeterminate',
            },
          },
          variant: {
            value: 'default',
            options: { default: 'default', accent: 'accent' },
          },
          size: {
            value: 'default',
            options: { default: 'default', sm: 'sm', lg: 'lg' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-checkbox',
  },
  'demo-components-radix-dialog': {
    name: 'demo-components-radix-dialog',
    description: 'Demo showing a dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-dialog'],
    files: [
      {
        path: 'registry/demo/components/radix/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/dialog.tsx',
        content:
          'import * as React from \'react\';\n\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  DialogFooter,\n  type DialogContentProps,\n} from \'@/components/animate-ui/components/radix/dialog\';\nimport { Label } from \'@/components/ui/label\';\nimport { Input } from \'@/components/ui/input\';\n\ninterface RadixDialogDemoProps {\n  from: DialogContentProps[\'from\'];\n  showCloseButton: boolean;\n}\n\nexport const RadixDialogDemo = ({\n  from,\n  showCloseButton,\n}: RadixDialogDemoProps) => {\n  return (\n    <Dialog>\n      <form>\n        <DialogTrigger asChild>\n          <Button variant="outline">Open Dialog</Button>\n        </DialogTrigger>\n        <DialogContent\n          from={from}\n          showCloseButton={showCloseButton}\n          className="sm:max-w-[425px]"\n        >\n          <DialogHeader>\n            <DialogTitle>Edit profile</DialogTitle>\n            <DialogDescription>\n              Make changes to your profile here. Click save when you&apos;re\n              done.\n            </DialogDescription>\n          </DialogHeader>\n          <div className="grid gap-4">\n            <div className="grid gap-3">\n              <Label htmlFor="name-1">Name</Label>\n              <Input id="name-1" name="name" defaultValue="Pedro Duarte" />\n            </div>\n            <div className="grid gap-3">\n              <Label htmlFor="username-1">Username</Label>\n              <Input id="username-1" name="username" defaultValue="@peduarte" />\n            </div>\n          </div>\n          <DialogFooter>\n            <DialogClose asChild>\n              <Button variant="outline">Cancel</Button>\n            </DialogClose>\n            <Button type="submit">Save changes</Button>\n          </DialogFooter>\n        </DialogContent>\n      </form>\n    </Dialog>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DialogContent: {
          from: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          showCloseButton: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-dialog',
  },
  'demo-components-radix-dropdown-menu': {
    name: 'demo-components-radix-dropdown-menu',
    description: 'Demo showing a dropdown menu.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-dropdown-menu',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/dropdown-menu/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/dropdown-menu.tsx',
        content:
          "import { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/components/animate-ui/components/radix/dropdown-menu';\n\ninterface RadixDropdownMenuDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport function RadixDropdownMenuDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixDropdownMenuDemoProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-56\"\n        align={align}\n        alignOffset={alignOffset}\n        side={side}\n        sideOffset={sideOffset}\n      >\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuGroup>\n          <DropdownMenuItem>\n            Profile\n            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Billing\n            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Settings\n            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n          </DropdownMenuItem>\n          <DropdownMenuItem>\n            Keyboard shortcuts\n            <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuGroup>\n          <DropdownMenuItem>Team</DropdownMenuItem>\n          <DropdownMenuSub>\n            <DropdownMenuSubTrigger>Invite users</DropdownMenuSubTrigger>\n            <DropdownMenuSubContent>\n              <DropdownMenuItem>Email</DropdownMenuItem>\n              <DropdownMenuItem>Message</DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>More...</DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuSub>\n          <DropdownMenuItem>\n            New Team\n            <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n          </DropdownMenuItem>\n        </DropdownMenuGroup>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>GitHub</DropdownMenuItem>\n        <DropdownMenuItem>Support</DropdownMenuItem>\n        <DropdownMenuItem disabled>API</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>\n          Log out\n          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/dropdown-menu/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-dropdown-menu';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DropdownMenuContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'start',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-dropdown-menu',
  },
  'demo-components-radix-dropdown-menu-checkbox': {
    name: 'demo-components-radix-dropdown-menu-checkbox',
    description: 'Demo showing a dropdown menu with a checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-dropdown-menu',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/dropdown-menu-checkbox/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/radix/dropdown-menu-checkbox.tsx',
        content:
          "import * as React from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/animate-ui/components/radix/dropdown-menu';\n\ninterface RadixDropdownMenuCheckboxDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport function RadixDropdownMenuCheckboxDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixDropdownMenuCheckboxDemoProps) {\n  const [showStatusBar, setShowStatusBar] = React.useState<boolean>(true);\n  const [showActivityBar, setShowActivityBar] = React.useState<boolean>(false);\n  const [showPanel, setShowPanel] = React.useState<boolean>(false);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-56\"\n        align={align}\n        alignOffset={alignOffset}\n        side={side}\n        sideOffset={sideOffset}\n      >\n        <DropdownMenuLabel>Appearance</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem\n          checked={showStatusBar}\n          onCheckedChange={setShowStatusBar}\n        >\n          Status Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showActivityBar}\n          onCheckedChange={setShowActivityBar}\n          disabled\n        >\n          Activity Bar\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          checked={showPanel}\n          onCheckedChange={setShowPanel}\n        >\n          Panel\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/dropdown-menu-checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-dropdown-menu-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DropdownMenuContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'start',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-radix-dropdown-menu-checkbox',
  },
  'demo-components-radix-dropdown-menu-radio': {
    name: 'demo-components-radix-dropdown-menu-radio',
    description: 'Demo showing a dropdown menu with a radio.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-dropdown-menu',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/dropdown-menu-radio/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/components/radix/dropdown-menu-radio.tsx',
        content:
          "import * as React from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuRadioItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/animate-ui/components/radix/dropdown-menu';\n\ninterface RadixDropdownMenuRadioDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport function RadixDropdownMenuRadioDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixDropdownMenuRadioDemoProps) {\n  const [position, setPosition] = React.useState('bottom');\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\">Open</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent\n        className=\"w-56\"\n        align={align}\n        alignOffset={alignOffset}\n        side={side}\n        sideOffset={sideOffset}\n      >\n        <DropdownMenuLabel>Panel Position</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuRadioGroup value={position} onValueChange={setPosition}>\n          <DropdownMenuRadioItem value=\"top\">Top</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"bottom\">Bottom</DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"right\">Right</DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/dropdown-menu-radio/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-dropdown-menu-radio';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DropdownMenuContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'start',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command:
      'https://animate-ui.com/r/demo-components-radix-dropdown-menu-radio',
  },
  'demo-components-radix-files': {
    name: 'demo-components-radix-files',
    description: 'Demo showing a files.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-files'],
    files: [
      {
        path: 'registry/demo/components/radix/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/files.tsx',
        content:
          '\'use client\';\n\nimport React from \'react\';\nimport {\n  FileItem,\n  FolderItem,\n  FolderTrigger,\n  FolderContent,\n  Files,\n  SubFiles,\n} from \'@/components/animate-ui/components/radix/files\';\nimport { FileJsonIcon } from \'lucide-react\';\n\nexport const RadixFilesDemo = () => {\n  return (\n    <div className="relative max-w-[500px] max-h-[350px] size-full rounded-2xl border bg-background overflow-auto">\n      <Files className="w-full" defaultOpen={[\'app\']}>\n        <FolderItem value="app">\n          <FolderTrigger\n            gitStatus="modified"\n            className="w-full flex items-center justify-between"\n          >\n            app\n          </FolderTrigger>\n\n          <FolderContent>\n            <SubFiles defaultOpen={[\'(home)\']}>\n              <FolderItem value="(home)">\n                <FolderTrigger gitStatus="untracked">(home)</FolderTrigger>\n\n                <FolderContent>\n                  <FileItem gitStatus="untracked">page.tsx</FileItem>\n                  <FileItem gitStatus="untracked">layout.tsx</FileItem>\n                </FolderContent>\n              </FolderItem>\n\n              <FileItem>layout.tsx</FileItem>\n              <FileItem gitStatus="modified">page.tsx</FileItem>\n              <FileItem>global.css</FileItem>\n            </SubFiles>\n          </FolderContent>\n        </FolderItem>\n\n        <FolderItem value="components">\n          <FolderTrigger>components</FolderTrigger>\n\n          <FolderContent>\n            <SubFiles>\n              <FileItem>button.tsx</FileItem>\n              <FileItem>tabs.tsx</FileItem>\n              <FileItem>dialog.tsx</FileItem>\n\n              <FolderItem value="empty">\n                <FolderTrigger>empty</FolderTrigger>\n              </FolderItem>\n            </SubFiles>\n          </FolderContent>\n        </FolderItem>\n\n        <FileItem icon={FileJsonIcon}>package.json</FileItem>\n      </Files>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/files/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-files',
  },
  'demo-components-radix-hover-card': {
    name: 'demo-components-radix-hover-card',
    description: 'Demo showing a hover card.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-hover-card',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/hover-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/hover-card.tsx',
        content:
          'import {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n} from \'@/components/animate-ui/components/radix/hover-card\';\n\ninterface RadixHoverCardDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const RadixHoverCardDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixHoverCardDemoProps) => {\n  return (\n    <HoverCard>\n      <HoverCardTrigger asChild>\n        <a\n          className="size-12 border rounded-full overflow-hidden"\n          href="https://twitter.com/animate_ui"\n          target="_blank"\n          rel="noreferrer noopener"\n        >\n          <img\n            src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n            alt="Animate UI"\n          />\n        </a>\n      </HoverCardTrigger>\n\n      <HoverCardContent\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n        className="w-80"\n      >\n        <div className="flex flex-col gap-4">\n          <img\n            className="size-16 rounded-full overflow-hidden border"\n            src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n            alt="Animate UI"\n          />\n          <div className="flex flex-col gap-4">\n            <div>\n              <div className="font-bold">Animate UI</div>\n              <div className="text-sm text-muted-foreground">@animate_ui</div>\n            </div>\n            <div className="text-sm text-muted-foreground">\n              A fully animated, open-source component distribution built with\n              React, TypeScript, Tailwind CSS, and Motion.\n            </div>\n            <div className="flex gap-4">\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">0</div>{\' \'}\n                <div className="text-muted-foreground">Following</div>\n              </div>\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">2,900</div>{\' \'}\n                <div className="text-muted-foreground">Followers</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </HoverCardContent>\n    </HoverCard>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/hover-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-hover-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        HoverCardContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-hover-card',
  },
  'demo-components-radix-popover': {
    name: 'demo-components-radix-popover',
    description: 'Demo showing a popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-popover'],
    files: [
      {
        path: 'registry/demo/components/radix/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from \'@/components/animate-ui/components/radix/popover\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\ninterface RadixPopoverDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const RadixPopoverDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixPopoverDemoProps) => {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant="outline">Open popover</Button>\n      </PopoverTrigger>\n      <PopoverContent\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n        className="w-80"\n      >\n        <div className="grid gap-4">\n          <div className="space-y-2">\n            <h4 className="leading-none font-medium">Dimensions</h4>\n            <p className="text-muted-foreground text-sm">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className="grid gap-2">\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="width">Width</Label>\n              <Input\n                id="width"\n                defaultValue="100%"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxWidth">Max. width</Label>\n              <Input\n                id="maxWidth"\n                defaultValue="300px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="height">Height</Label>\n              <Input\n                id="height"\n                defaultValue="25px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxHeight">Max. height</Label>\n              <Input\n                id="maxHeight"\n                defaultValue="none"\n                className="col-span-2 h-8"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-popover',
  },
  'demo-components-radix-progress': {
    name: 'demo-components-radix-progress',
    description: 'Demo showing a radix progress.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-progress',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/progress.tsx',
        content:
          "import * as React from 'react';\nimport { Progress } from '@/components/animate-ui/components/radix/progress';\n\nexport const RadixProgressDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) return 100;\n        return prev + 25;\n      });\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  React.useEffect(() => {\n    if (progress >= 100) setTimeout(() => setProgress(0), 4000);\n  }, [progress]);\n\n  return <Progress value={progress} className=\"w-[300px]\" />;\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-progress',
  },
  'demo-components-radix-radio-group': {
    name: 'demo-components-radix-radio-group',
    description: 'Demo showing a radix radio group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-radio-group',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/radio-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/radio-group.tsx',
        content:
          'import * as React from \'react\';\n\nimport {\n  RadioGroup,\n  RadioGroupItem,\n} from \'@/components/animate-ui/components/radix/radio-group\';\nimport { Label } from \'@/components/ui/label\';\n\nexport const RadixRadioGroupDemo = () => {\n  return (\n    <RadioGroup defaultValue="default">\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="default" id="r1" />\n        <Label htmlFor="r1">Default</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="comfortable" id="r2" />\n        <Label htmlFor="r2">Comfortable</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="compact" id="r3" />\n        <Label htmlFor="r3">Compact</Label>\n      </div>\n    </RadioGroup>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/radio-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-radio-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-radio-group',
  },
  'demo-components-radix-sheet': {
    name: 'demo-components-radix-sheet',
    description: 'Demo showing a radix sheet.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-sheet'],
    files: [
      {
        path: 'registry/demo/components/radix/sheet/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/sheet.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \'@/components/animate-ui/components/radix/sheet\';\n\nexport function RadixSheetDemo() {\n  return (\n    <Sheet>\n      <SheetTrigger asChild>\n        <Button variant="outline">Open</Button>\n      </SheetTrigger>\n      <SheetContent>\n        <SheetHeader>\n          <SheetTitle>Edit profile</SheetTitle>\n          <SheetDescription>\n            Make changes to your profile here. Click save when you&apos;re done.\n          </SheetDescription>\n        </SheetHeader>\n        <div className="grid flex-1 auto-rows-min gap-6 px-4">\n          <div className="grid gap-3">\n            <Label htmlFor="sheet-demo-name">Name</Label>\n            <Input id="sheet-demo-name" defaultValue="Pedro Duarte" />\n          </div>\n          <div className="grid gap-3">\n            <Label htmlFor="sheet-demo-username">Username</Label>\n            <Input id="sheet-demo-username" defaultValue="@peduarte" />\n          </div>\n        </div>\n        <SheetFooter>\n          <Button type="submit">Save changes</Button>\n          <SheetClose asChild>\n            <Button variant="outline">Close</Button>\n          </SheetClose>\n        </SheetFooter>\n      </SheetContent>\n    </Sheet>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/sheet/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-sheet';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        SheetContent: {
          side: {
            value: 'right',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-sheet',
  },
  'demo-components-radix-switch': {
    name: 'demo-components-radix-switch',
    description: 'Demo showing a radix switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-switch'],
    files: [
      {
        path: 'registry/demo/components/radix/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/switch.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { Switch } from \'@/components/animate-ui/components/radix/switch\';\n\nexport function RadixSwitchDemo() {\n  return (\n    <div className="flex items-center space-x-2">\n      <Switch id="airplane-mode" />\n      <Label htmlFor="airplane-mode">Airplane Mode</Label>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-switch',
  },
  'demo-components-radix-tabs': {
    name: 'demo-components-radix-tabs',
    description: 'Demo showing a radix tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-tabs'],
    files: [
      {
        path: 'registry/demo/components/radix/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/tabs.tsx',
        content:
          'import {\n  Tabs,\n  TabsContent,\n  TabsContents,\n  TabsList,\n  TabsTrigger,\n} from \'@/components/animate-ui/components/radix/tabs\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \'@/components/ui/card\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\n\nexport function RadixTabsDemo() {\n  return (\n    <div className="flex w-full max-w-sm flex-col gap-6">\n      <Tabs defaultValue="account">\n        <TabsList>\n          <TabsTrigger value="account">Account</TabsTrigger>\n          <TabsTrigger value="password">Password</TabsTrigger>\n        </TabsList>\n        <TabsContents>\n          <Card>\n            <TabsContent value="account" className="flex flex-col gap-6">\n              <CardHeader>\n                <CardTitle>Account</CardTitle>\n                <CardDescription>\n                  Make changes to your account here. Click save when you&apos;re\n                  done.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-name">Name</Label>\n                  <Input id="tabs-demo-name" defaultValue="Pedro Duarte" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save changes</Button>\n              </CardFooter>\n            </TabsContent>\n            <TabsContent value="password" className="flex flex-col gap-6">\n              <CardHeader>\n                <CardTitle>Password</CardTitle>\n                <CardDescription>\n                  Change your password here. After saving, you&apos;ll be logged\n                  out.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className="grid gap-6">\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-current">Current password</Label>\n                  <Input id="tabs-demo-current" type="password" />\n                </div>\n                <div className="grid gap-3">\n                  <Label htmlFor="tabs-demo-new">New password</Label>\n                  <Input id="tabs-demo-new" type="password" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button>Save password</Button>\n              </CardFooter>\n            </TabsContent>\n          </Card>\n        </TabsContents>\n      </Tabs>\n    </div>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-tabs',
  },
  'demo-components-radix-toggle': {
    name: 'demo-components-radix-toggle',
    description: 'Demo showing a radix toggle.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-toggle'],
    files: [
      {
        path: 'registry/demo/components/radix/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/toggle.tsx',
        content:
          "import { Toggle, type ToggleProps } from '@/components/animate-ui/components/radix/toggle';\nimport { Bold } from 'lucide-react';\n\ninterface RadixToggleDemoProps {\n  variant: ToggleProps['variant'];\n  size: ToggleProps['size'];\n}\n\nexport function RadixToggleDemo({ variant, size }: RadixToggleDemoProps) {\n  return (\n    <Toggle aria-label=\"Toggle italic\" variant={variant} size={size}>\n      <Bold />\n    </Toggle>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Toggle: {
          variant: {
            value: 'default',
            options: { default: 'default', outline: 'outline' },
          },
          size: {
            value: 'icon',
            options: { default: 'default', sm: 'sm', lg: 'lg', icon: 'icon' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-toggle',
  },
  'demo-components-radix-toggle-group': {
    name: 'demo-components-radix-toggle-group',
    description: 'Demo showing a radix toggle group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/components-radix-toggle-group',
    ],
    files: [
      {
        path: 'registry/demo/components/radix/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/toggle-group.tsx',
        content:
          'import {\n  ToggleGroup,\n  ToggleGroupItem,\n  type ToggleGroupProps,\n} from \'@/components/animate-ui/components/radix/toggle-group\';\nimport { Bold, Italic, Underline } from \'lucide-react\';\n\ninterface RadixToggleGroupDemoProps {\n  type: \'single\' | \'multiple\';\n  variant: ToggleGroupProps[\'variant\'];\n  size: ToggleGroupProps[\'size\'];\n}\n\nexport function RadixToggleGroupDemo({\n  type,\n  variant,\n  size,\n}: RadixToggleGroupDemoProps) {\n  return (\n    <ToggleGroup type={type} variant={variant} size={size}>\n      <ToggleGroupItem value="bold" aria-label="Toggle bold">\n        <Bold />\n      </ToggleGroupItem>\n      <ToggleGroupItem value="italic" aria-label="Toggle italic">\n        <Italic />\n      </ToggleGroupItem>\n      <ToggleGroupItem value="strikethrough" aria-label="Toggle strikethrough">\n        <Underline />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ToggleGroup: {
          type: {
            value: 'single',
            options: { single: 'single', multiple: 'multiple' },
          },
          variant: {
            value: 'default',
            options: { default: 'default', outline: 'outline' },
          },
          size: {
            value: 'icon',
            options: { default: 'default', sm: 'sm', lg: 'lg', icon: 'icon' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-toggle-group',
  },
  'demo-components-radix-tooltip': {
    name: 'demo-components-radix-tooltip',
    description: 'Demo showing a radix tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/components-radix-tooltip'],
    files: [
      {
        path: 'registry/demo/components/radix/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/components/radix/tooltip.tsx',
        content:
          "import {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  type TooltipContentProps,\n} from '@/components/animate-ui/components/radix/tooltip';\nimport { Button } from '@/components/ui/button';\n\ninterface RadixTooltipDemoProps {\n  side: TooltipContentProps['side'];\n  sideOffset: TooltipContentProps['sideOffset'];\n  align: TooltipContentProps['align'];\n  alignOffset: TooltipContentProps['alignOffset'];\n}\n\nexport function RadixTooltipDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixTooltipDemoProps) {\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button variant=\"outline\">Hover</Button>\n      </TooltipTrigger>\n      <TooltipContent\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n      >\n        <p>Add to library</p>\n      </TooltipContent>\n    </Tooltip>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/components/radix/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-components-radix-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipContent: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 0 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-components-radix-tooltip',
  },
  'demo-primitives-animate-avatar-group': {
    name: 'demo-primitives-animate-avatar-group',
    description: 'Demo showing an animated avatar group.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-avatar-group',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/avatar-group/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/animate/avatar-group.tsx',
        content:
          "import {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from '@/components/ui/avatar';\nimport {\n  AvatarGroup,\n  AvatarGroupTooltip,\n  AvatarGroupTooltipArrow,\n} from '@/components/animate-ui/primitives/animate/avatar-group';\nimport { motion } from 'motion/react';\n\nconst AVATARS = [\n  {\n    src: 'https://pbs.twimg.com/profile_images/1948770261848756224/oPwqXMD6_400x400.jpg',\n    fallback: 'SK',\n    tooltip: 'Skyleen',\n  },\n  {\n    src: 'https://pbs.twimg.com/profile_images/1593304942210478080/TUYae5z7_400x400.jpg',\n    fallback: 'CN',\n    tooltip: 'Shadcn',\n  },\n  {\n    src: 'https://pbs.twimg.com/profile_images/1677042510839857154/Kq4tpySA_400x400.jpg',\n    fallback: 'AW',\n    tooltip: 'Adam Wathan',\n  },\n  {\n    src: 'https://pbs.twimg.com/profile_images/1783856060249595904/8TfcCN0r_400x400.jpg',\n    fallback: 'GR',\n    tooltip: 'Guillermo Rauch',\n  },\n  {\n    src: 'https://pbs.twimg.com/profile_images/1534700564810018816/anAuSfkp_400x400.jpg',\n    fallback: 'JH',\n    tooltip: 'Jhey',\n  },\n  {\n    src: 'https://pbs.twimg.com/profile_images/1927474594102784000/Al0g-I6o_400x400.jpg',\n    fallback: 'DH',\n    tooltip: 'David Haz',\n  },\n];\n\nexport const AvatarGroupDemo = () => {\n  return (\n    <AvatarGroup className=\"h-12 -space-x-3\" invertOverlap>\n      {AVATARS.map((avatar, index) => (\n        <Avatar key={index} className=\"size-12 border-3 border-background\">\n          <AvatarImage src={avatar.src} />\n          <AvatarFallback>{avatar.fallback}</AvatarFallback>\n          <AvatarGroupTooltip className=\"bg-primary px-3 py-1.5 text-sm text-primary-foreground\">\n            <AvatarGroupTooltipArrow className=\"fill-primary size-2.5\" />\n            <motion.p layout=\"preserve-aspect\">{avatar.tooltip}</motion.p>\n          </AvatarGroupTooltip>\n        </Avatar>\n      ))}\n    </AvatarGroup>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/avatar-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-avatar-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-avatar-group',
  },
  'demo-primitives-animate-code-block': {
    name: 'demo-primitives-animate-code-block',
    description: 'Demo showing an animated code block.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-code-block',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/code-block/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/code-block.tsx',
        content:
          "'use client';\n\nimport { CodeBlock } from '@/components/animate-ui/primitives/animate/code-block';\nimport { cn } from '@/lib/utils';\nimport { useTheme } from 'next-themes';\n\ninterface CodeBlockDemoProps {\n  duration: number;\n  delay: number;\n  writing: boolean;\n  cursor: boolean;\n}\n\nexport const CodeBlockDemo = ({\n  duration,\n  delay,\n  writing,\n  cursor,\n}: CodeBlockDemoProps) => {\n  const { resolvedTheme } = useTheme();\n\n  return (\n    <div\n      key={`${duration}-${delay}-${writing}-${cursor}`}\n      className=\"relative bg-accent w-[420px] h-[372px] text-sm p-4 overflow-auto\"\n    >\n      <CodeBlock\n        code={`'use client';\n \nimport * as React from 'react';\n \ntype MyComponentProps = {\n  myProps: string;\n} & React.ComponentProps<'div'>;\n \nfunction MyComponent(props: MyComponentProps) {\n  return (\n    <div {...props}>\n      <p>My Component</p>\n    </div>\n  );\n}\n\nexport { MyComponent, type MyComponentProps };`}\n        lang=\"tsx\"\n        theme={resolvedTheme === 'dark' ? 'dark' : 'light'}\n        writing={writing}\n        duration={duration}\n        delay={delay}\n        className={cn(\n          '[&>pre,_&_code]:!bg-transparent [&>pre,_&_code]:[background:transparent_!important] [&>pre,_&_code]:border-none [&_code]:!text-[13px] [&_code_.line]:!px-0',\n          cursor &&\n            \"data-[done=false]:[&_.line:last-of-type::after]:content-['|'] data-[done=false]:[&_.line:last-of-type::after]:inline-block data-[done=false]:[&_.line:last-of-type::after]:w-[1ch] data-[done=false]:[&_.line:last-of-type::after]:-translate-px\",\n        )}\n      />\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/code-block/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-code-block';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CodeBlock: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          duration: { value: 10000, min: 0, max: 30000, step: 1000 },
          writing: { value: true },
          cursor: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-code-block',
  },
  'demo-primitives-animate-counter': {
    name: 'demo-primitives-animate-counter',
    description: 'Demo showing an animated counter.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-counter',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/counter/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/counter.tsx',
        content:
          'import {\n  Counter,\n  CounterMinusButton,\n  CounterNumber,\n  CounterPlusButton,\n} from \'@/components/animate-ui/primitives/animate/counter\';\nimport { MinusIcon, PlusIcon } from \'lucide-react\';\n\nexport const CounterDemo = () => {\n  return (\n    <Counter className="flex items-center p-1 bg-accent">\n      <CounterMinusButton className="bg-background size-7 flex items-center justify-center">\n        <MinusIcon className="size-4" />\n      </CounterMinusButton>\n      <CounterNumber className="px-2.5" />\n      <CounterPlusButton className="bg-background size-7 flex items-center justify-center">\n        <PlusIcon className="size-4" />\n      </CounterPlusButton>\n    </Counter>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/counter/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-counter';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-counter',
  },
  'demo-primitives-animate-cursor': {
    name: 'demo-primitives-animate-cursor',
    description: 'Demo showing an animated cursor.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-cursor',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/cursor/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/cursor.tsx',
        content:
          'import {\n  Cursor,\n  CursorContainer,\n  CursorFollow,\n  CursorProvider,\n  type CursorFollowSide,\n  type CursorFollowAlign,\n} from \'@/components/animate-ui/primitives/animate/cursor\';\n\ninterface CursorDemoProps {\n  global?: boolean;\n  enableCursor?: boolean;\n  enableCursorFollow?: boolean;\n  side?: CursorFollowSide;\n  sideOffset?: number;\n  align?: CursorFollowAlign;\n  alignOffset?: number;\n}\n\nexport const CursorDemo = ({\n  global = false,\n  enableCursor = true,\n  enableCursorFollow = true,\n  side = \'bottom\',\n  sideOffset = 15,\n  align = \'end\',\n  alignOffset = 5,\n}: CursorDemoProps) => {\n  return (\n    <div\n      key={String(global)}\n      className="max-w-[400px] h-[400px] w-full bg-accent flex items-center justify-center"\n    >\n      <p className="font-medium italic text-muted-foreground">\n        Move your mouse over the div\n      </p>\n      <CursorProvider global={global}>\n        <CursorContainer>\n          {enableCursor && (\n            <Cursor>\n              <svg\n                className="size-6 text-foreground"\n                xmlns="http://www.w3.org/2000/svg"\n                viewBox="0 0 40 40"\n              >\n                <path\n                  fill="currentColor"\n                  d="M1.8 4.4 7 36.2c.3 1.8 2.6 2.3 3.6.8l3.9-5.7c1.7-2.5 4.5-4.1 7.5-4.3l6.9-.5c1.8-.1 2.5-2.4 1.1-3.5L5 2.5c-1.4-1.1-3.5 0-3.3 1.9Z"\n                />\n              </svg>\n            </Cursor>\n          )}\n          {enableCursorFollow && (\n            <CursorFollow\n              side={side}\n              sideOffset={sideOffset}\n              align={align}\n              alignOffset={alignOffset}\n            >\n              <div className="bg-foreground text-background px-2 py-1 text-sm">\n                Designer\n              </div>\n            </CursorFollow>\n          )}\n        </CursorContainer>\n      </CursorProvider>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/cursor/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-cursor';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CursorProvider: {
          global: { value: false },
          enableCursor: { value: true },
          enableCursorFollow: { value: true },
        },
        CursorFollow: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              right: 'right',
              bottom: 'bottom',
              left: 'left',
            },
          },
          sideOffset: { value: 15 },
          align: {
            value: 'end',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 5 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-cursor',
  },
  'demo-primitives-animate-github-stars': {
    name: 'demo-primitives-animate-github-stars',
    description: 'Demo showing an animated github stars counter.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-github-stars',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/github-stars/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/animate/github-stars.tsx',
        content:
          'import {\n  GithubStars,\n  GithubStarsIcon,\n  GithubStarsLogo,\n  GithubStarsNumber,\n  GithubStarsParticles,\n} from \'@/components/animate-ui/primitives/animate/github-stars\';\nimport { StarIcon } from \'lucide-react\';\n\nexport const GithubStarsDemo = () => {\n  return (\n    <GithubStars\n      className="flex gap-2 items-center"\n      username="imskyleen"\n      repo="animate-ui"\n    >\n      <GithubStarsLogo className="text-muted-foreground size-6" />\n      <div className="p-1 bg-muted flex items-center gap-1">\n        <GithubStarsNumber className="text-muted-foreground font-medium" />\n        <GithubStarsParticles>\n          <GithubStarsIcon\n            icon={StarIcon}\n            className="fill-neutral-300 stroke-neutral-300 dark:fill-neutral-700 dark:stroke-neutral-700"\n            activeClassName="text-muted-foreground"\n            size={18}\n          />\n        </GithubStarsParticles>\n      </div>\n    </GithubStars>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/github-stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-github-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-github-stars',
  },
  'demo-primitives-animate-motion-grid': {
    name: 'demo-primitives-animate-motion-grid',
    description: 'Demo showing an animated motion grid.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-motion-grid',
      'https://animate-ui.com/r/primitives-texts-rotating',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/motion-grid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/motion-grid.tsx',
        content:
          "import { useEffect, useState } from 'react';\nimport { motion } from 'motion/react';\n\nimport {\n  MotionGrid,\n  MotionGridCells,\n  type Frames,\n} from '@/components/animate-ui/primitives/animate/motion-grid';\nimport {\n  RotatingText,\n  RotatingTextContainer,\n} from '@/components/animate-ui/primitives/texts/rotating';\n\nconst importingFrames = [\n  [[2, 2]],\n  [\n    [1, 2],\n    [2, 1],\n    [2, 3],\n    [3, 2],\n  ],\n  [\n    [2, 2],\n    [0, 2],\n    [1, 1],\n    [1, 3],\n    [2, 0],\n    [2, 4],\n    [3, 1],\n    [3, 3],\n    [4, 2],\n  ],\n  [\n    [0, 1],\n    [0, 3],\n    [1, 0],\n    [1, 2],\n    [1, 4],\n    [2, 1],\n    [2, 3],\n    [3, 0],\n    [3, 2],\n    [3, 4],\n    [4, 1],\n    [4, 3],\n  ],\n  [\n    [0, 0],\n    [0, 2],\n    [0, 4],\n    [1, 1],\n    [1, 3],\n    [2, 0],\n    [2, 2],\n    [2, 4],\n    [3, 1],\n    [3, 3],\n    [4, 0],\n    [4, 2],\n    [4, 4],\n  ],\n  [\n    [0, 1],\n    [0, 3],\n    [1, 0],\n    [1, 2],\n    [1, 4],\n    [2, 1],\n    [2, 3],\n    [3, 0],\n    [3, 2],\n    [3, 4],\n    [4, 1],\n    [4, 3],\n  ],\n  [\n    [0, 0],\n    [0, 2],\n    [0, 4],\n    [1, 1],\n    [1, 3],\n    [2, 0],\n    [2, 4],\n    [3, 1],\n    [3, 3],\n    [4, 0],\n    [4, 2],\n    [4, 4],\n  ],\n  [\n    [0, 1],\n    [1, 0],\n    [3, 0],\n    [4, 1],\n    [0, 3],\n    [1, 4],\n    [3, 4],\n    [4, 3],\n  ],\n  [\n    [0, 0],\n    [0, 4],\n    [4, 0],\n    [4, 4],\n  ],\n  [],\n] as Frames;\n\nconst arrowDownFrames = [\n  [[2, 0]],\n  [\n    [1, 0],\n    [2, 0],\n    [3, 0],\n    [2, 1],\n  ],\n  [\n    [2, 0],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [2, 2],\n  ],\n  [\n    [2, 0],\n    [2, 1],\n    [1, 2],\n    [2, 2],\n    [3, 2],\n    [2, 3],\n  ],\n  [\n    [2, 1],\n    [2, 2],\n    [1, 3],\n    [2, 3],\n    [3, 3],\n    [2, 4],\n  ],\n  [\n    [2, 2],\n    [2, 3],\n    [1, 4],\n    [2, 4],\n    [3, 4],\n  ],\n  [\n    [2, 3],\n    [2, 4],\n  ],\n  [[2, 4]],\n  [],\n] as Frames;\n\nconst arrowUpFrames = [\n  [[2, 4]],\n  [\n    [1, 4],\n    [2, 4],\n    [3, 4],\n    [2, 3],\n  ],\n  [\n    [2, 4],\n    [1, 3],\n    [2, 3],\n    [3, 3],\n    [2, 2],\n  ],\n  [\n    [2, 4],\n    [2, 3],\n    [1, 2],\n    [2, 2],\n    [3, 2],\n    [2, 1],\n  ],\n  [\n    [2, 3],\n    [2, 2],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [2, 0],\n  ],\n  [\n    [2, 2],\n    [2, 1],\n    [1, 0],\n    [2, 0],\n    [3, 0],\n  ],\n  [\n    [2, 1],\n    [2, 0],\n  ],\n  [[2, 0]],\n  [],\n] as Frames;\n\nconst syncingFrames = [...arrowDownFrames, ...arrowUpFrames] as Frames;\n\nconst searchingFrames = [\n  [\n    [1, 0],\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [1, 2],\n  ],\n  [\n    [2, 0],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [2, 2],\n  ],\n  [\n    [3, 0],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n    [3, 2],\n  ],\n  [\n    [3, 1],\n    [2, 2],\n    [3, 2],\n    [4, 2],\n    [3, 3],\n  ],\n  [\n    [3, 2],\n    [2, 3],\n    [3, 3],\n    [4, 3],\n    [3, 4],\n  ],\n  [\n    [1, 2],\n    [0, 3],\n    [1, 3],\n    [2, 3],\n    [1, 4],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 0],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n  ],\n  [],\n] as Frames;\n\nconst busyFrames = [\n  [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [1, 2],\n    [4, 1],\n    [4, 2],\n    [4, 3],\n  ],\n  [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [2, 3],\n    [4, 2],\n    [4, 3],\n    [4, 4],\n  ],\n  [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [3, 4],\n    [4, 2],\n    [4, 3],\n    [4, 4],\n  ],\n  [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [2, 3],\n    [4, 2],\n    [4, 3],\n    [4, 4],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 2],\n    [4, 2],\n    [4, 3],\n    [4, 4],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [2, 1],\n    [4, 1],\n    [4, 2],\n    [4, 3],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [3, 0],\n    [4, 0],\n    [4, 1],\n    [4, 2],\n  ],\n  [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [2, 1],\n    [4, 0],\n    [4, 1],\n    [4, 2],\n  ],\n] as Frames;\n\nconst savingFrames = [\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [0, 4],\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [1, 3],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [2, 3],\n    [2, 4],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n    [3, 3],\n    [4, 0],\n    [4, 1],\n    [4, 2],\n    [4, 3],\n    [4, 4],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [1, 0],\n    [1, 1],\n    [1, 2],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [2, 3],\n    [3, 0],\n    [3, 1],\n    [3, 2],\n    [4, 0],\n    [4, 1],\n    [4, 2],\n    [4, 3],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [0, 2],\n    [1, 0],\n    [1, 1],\n    [2, 0],\n    [2, 1],\n    [2, 2],\n    [3, 0],\n    [3, 1],\n    [4, 0],\n    [4, 1],\n    [4, 2],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n  [\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [2, 0],\n    [2, 1],\n    [3, 0],\n    [4, 0],\n    [4, 1],\n    [4, 3],\n    [3, 3],\n    [2, 3],\n    [1, 3],\n    [0, 3],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n  [\n    [0, 0],\n    [2, 0],\n    [4, 0],\n    [4, 2],\n    [3, 2],\n    [2, 2],\n    [1, 2],\n    [0, 2],\n    [4, 3],\n    [3, 3],\n    [2, 3],\n    [1, 3],\n    [0, 3],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n    [3, 0],\n    [4, 0],\n    [4, 1],\n    [3, 1],\n    [2, 1],\n    [1, 1],\n    [0, 1],\n    [4, 2],\n    [3, 2],\n    [2, 2],\n    [1, 2],\n    [0, 2],\n    [4, 3],\n    [3, 3],\n    [2, 3],\n    [1, 3],\n    [0, 3],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n    [3, 0],\n    [4, 0],\n    [4, 1],\n    [3, 1],\n    [2, 1],\n    [1, 1],\n    [0, 1],\n    [4, 2],\n    [3, 2],\n    [2, 2],\n    [1, 2],\n    [0, 2],\n    [4, 3],\n    [3, 3],\n    [2, 3],\n    [1, 3],\n    [0, 3],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n  [\n    [0, 0],\n    [1, 0],\n    [2, 0],\n    [3, 0],\n    [4, 0],\n    [4, 1],\n    [3, 1],\n    [2, 1],\n    [1, 1],\n    [0, 1],\n    [4, 2],\n    [3, 2],\n    [2, 2],\n    [1, 2],\n    [0, 2],\n    [4, 3],\n    [3, 3],\n    [2, 3],\n    [1, 3],\n    [0, 3],\n    [4, 4],\n    [3, 4],\n    [2, 4],\n    [1, 4],\n    [0, 4],\n  ],\n] as Frames;\n\nconst initializingFrames = [\n  [],\n  [\n    [1, 0],\n    [3, 0],\n  ],\n  [\n    [1, 0],\n    [3, 0],\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n  ],\n  [\n    [1, 0],\n    [3, 0],\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n    [0, 2],\n    [1, 2],\n    [2, 2],\n    [3, 2],\n    [4, 2],\n  ],\n  [\n    [1, 0],\n    [3, 0],\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n    [0, 2],\n    [1, 2],\n    [2, 2],\n    [3, 2],\n    [4, 2],\n    [1, 3],\n    [2, 3],\n    [3, 3],\n  ],\n  [\n    [1, 0],\n    [3, 0],\n    [0, 1],\n    [1, 1],\n    [2, 1],\n    [3, 1],\n    [4, 1],\n    [0, 2],\n    [1, 2],\n    [2, 2],\n    [3, 2],\n    [4, 2],\n    [1, 3],\n    [2, 3],\n    [3, 3],\n    [2, 4],\n  ],\n  [\n    [1, 2],\n    [2, 1],\n    [2, 2],\n    [2, 3],\n    [3, 2],\n  ],\n  [[2, 2]],\n  [],\n] as Frames;\n\nconst states = {\n  importing: {\n    frames: importingFrames,\n    label: 'Importing',\n  },\n  syncing: {\n    frames: syncingFrames,\n    label: 'Syncing',\n  },\n  searching: {\n    frames: searchingFrames,\n    label: 'Searching',\n  },\n  busy: {\n    frames: busyFrames,\n    label: 'Busy',\n  },\n  saving: {\n    frames: savingFrames,\n    label: 'Saving',\n  },\n  initializing: {\n    frames: initializingFrames,\n    label: 'Initializing',\n  },\n};\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const MotionGridDemo = () => {\n  const [state, setState] = useState<keyof typeof states>('importing');\n\n  const runStates = async () => {\n    while (true) {\n      for (const state of Object.keys(states) as (keyof typeof states)[]) {\n        setState(state);\n        await sleep(3000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    runStates();\n  }, []);\n\n  return (\n    <motion.button\n      layout\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      className=\"px-3 h-11 gap-x-3 relative bg-primary inline-flex items-center justify-center\"\n    >\n      <motion.div layout=\"preserve-aspect\">\n        <MotionGrid\n          gridSize={[5, 5]}\n          frames={states[state].frames}\n          className=\"w-fit gap-0.5\"\n        >\n          <MotionGridCells className=\"size-[3px] rounded-full aspect-square bg-white/20 dark:bg-black/20 data-[active=true]:bg-white/70 dark:data-[active=true]:bg-black/70\" />\n        </MotionGrid>\n      </motion.div>\n\n      <RotatingTextContainer\n        text={states[state].label}\n        className=\"absolute left-[46px] top-1/2 -translate-y-1/2\"\n      >\n        <RotatingText\n          layout=\"preserve-aspect\"\n          className=\"text-primary-foreground\"\n        />\n      </RotatingTextContainer>\n\n      <span className=\"invisible opacity-0\" aria-hidden>\n        {states[state].label}\n      </span>\n    </motion.button>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/motion-grid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-motion-grid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-motion-grid',
  },
  'demo-primitives-animate-pinned-list': {
    name: 'demo-primitives-animate-pinned-list',
    description: 'Demo showing an animated pinned list.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-pinned-list',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/pinned-list/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/pinned-list.tsx',
        content:
          'import {\n  PinnedList,\n  PinnedListItem,\n  PinnedListItems,\n  PinnedListLabel,\n  PinnedListPinned,\n  PinnedListTrigger,\n  PinnedListUnpinned,\n} from \'@/components/animate-ui/primitives/animate/pinned-list\';\nimport { Pin } from \'lucide-react\';\nimport { useState } from \'react\';\n\nconst ITEMS = [\n  { id: \'1\', name: \'Item 1\' },\n  { id: \'2\', name: \'Item 2\', pinned: true },\n  { id: \'3\', name: \'Item 3\', pinned: true },\n  { id: \'4\', name: \'Item 4\' },\n];\n\nexport const PinnedListDemo = () => {\n  const [items, setItems] = useState(ITEMS);\n\n  const pinned = items.filter((item) => item.pinned);\n  const unpinned = items.filter((item) => !item.pinned);\n\n  const toggleStatus = (id: string) => {\n    setItems((prev) => {\n      const item = prev.find((item) => item.id === id);\n      if (!item) return prev;\n      return prev.map((item) => ({\n        ...item,\n        pinned: item.id === id ? !item.pinned : item.pinned,\n      }));\n    });\n  };\n\n  return (\n    <PinnedList className="space-y-6 w-[200px]" onPinnedChange={toggleStatus}>\n      <PinnedListPinned>\n        <PinnedListLabel className="mb-2" hide={pinned.length === 0}>\n          Pinned\n        </PinnedListLabel>\n        <PinnedListItems className="space-y-2">\n          {pinned.map((item) => (\n            <PinnedListItem\n              key={item.id}\n              id={item.id}\n              className="h-12 px-4 bg-accent select-none flex items-center justify-between"\n              customTrigger\n            >\n              {item.name}\n\n              <PinnedListTrigger className="h-9 -mr-2.5 aspect-square bg-background flex items-center justify-center">\n                <Pin\n                  size={16}\n                  className="text-muted-foreground fill-muted-foreground"\n                />\n              </PinnedListTrigger>\n            </PinnedListItem>\n          ))}\n        </PinnedListItems>\n      </PinnedListPinned>\n\n      <PinnedListUnpinned>\n        <PinnedListLabel className="mb-2" hide={unpinned.length === 0}>\n          Unpinned\n        </PinnedListLabel>\n        <PinnedListItems className="space-y-2">\n          {unpinned.map((item) => (\n            <PinnedListItem\n              key={item.id}\n              id={item.id}\n              className="h-12 px-4 bg-accent select-none flex items-center justify-between"\n              customTrigger\n            >\n              {item.name}\n\n              <PinnedListTrigger className="h-9 -mr-2.5 aspect-square bg-background flex items-center justify-center">\n                <Pin size={16} className="text-muted-foreground" />\n              </PinnedListTrigger>\n            </PinnedListItem>\n          ))}\n        </PinnedListItems>\n      </PinnedListUnpinned>\n    </PinnedList>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/pinned-list/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-pinned-list';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-pinned-list',
  },
  'demo-primitives-animate-scroll-progress': {
    name: 'demo-primitives-animate-scroll-progress',
    description: 'Demo showing an animated scroll progress.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-scroll-progress',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/scroll-progress/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/animate/scroll-progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { ArrowDown } from 'lucide-react';\nimport { motion } from 'motion/react';\n\nimport {\n  ScrollProgressProvider,\n  ScrollProgress,\n  ScrollProgressContainer,\n  type ScrollProgressDirection,\n} from '@/components/animate-ui/primitives/animate/scroll-progress';\nimport { cn } from '@/lib/utils';\n\ninterface ScrollProgressDemoProps {\n  global?: boolean;\n  direction?: ScrollProgressDirection;\n}\n\nexport const ScrollProgressDemo = ({\n  global = false,\n  direction = 'vertical',\n}: ScrollProgressDemoProps) => {\n  return (\n    <div className=\"absolute inset-0\" key={String(global) + direction}>\n      <div className=\"relative h-full w-full overflow-hidden\">\n        <ScrollProgressProvider global={global} direction={direction}>\n          <div\n            className={cn(\n              'z-50 ',\n              global\n                ? 'fixed top-0 left-0 right-0'\n                : 'absolute bottom-3 left-3 right-3',\n            )}\n          >\n            <ScrollProgress className=\"bg-foreground h-1.5 data-[global=false]:rounded-full\" />\n          </div>\n\n          {global ? (\n            <div className=\"size-full flex items-center justify-center\">\n              <p className=\"flex items-center gap-2 font-medium\">\n                Scroll the page to see the progress bar\n              </p>\n            </div>\n          ) : (\n            <ScrollProgressContainer className=\"w-full h-full data-[direction=vertical]:overflow-y-auto data-[direction=horizontal]:overflow-x-auto\">\n              <div\n                className={cn('flex', direction === 'vertical' && 'flex-col')}\n              >\n                <div className=\"w-full h-[400px] shrink-0 flex items-center justify-center\">\n                  <p className=\"flex items-center gap-2 font-medium\">\n                    Scroll to see the progress bar{' '}\n                    <motion.span\n                      className={direction === 'horizontal' ? '-rotate-90' : ''}\n                      animate={{ y: [3, -3, 3] }}\n                      transition={{\n                        duration: 1.25,\n                        repeat: Infinity,\n                        ease: 'easeInOut',\n                        type: 'keyframes',\n                      }}\n                    >\n                      <ArrowDown className=\"size-5\" />\n                    </motion.span>\n                  </p>\n                </div>\n                <div className=\"w-full h-[400px] shrink-0 p-3\">\n                  <div className=\"size-full bg-accent rounded-xl\" />\n                </div>\n                <div className=\"w-full h-[400px] shrink-0\" />\n                <div className=\"w-full h-[400px] shrink-0 p-3\">\n                  <div className=\"size-full bg-accent rounded-xl\" />\n                </div>\n                <div className=\"w-full h-[400px] shrink-0\" />\n              </div>\n            </ScrollProgressContainer>\n          )}\n        </ScrollProgressProvider>\n      </div>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/scroll-progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-scroll-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ScrollProgressProvider: {
          global: { value: false },
          direction: {
            value: 'vertical',
            options: { horizontal: 'horizontal', vertical: 'vertical' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-scroll-progress',
  },
  'demo-primitives-animate-spring': {
    name: 'demo-primitives-animate-spring',
    description: 'Demo showing an animated spring.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-spring',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/spring/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/spring.tsx',
        content:
          'import {\n  SpringProvider,\n  Spring,\n  SpringElement,\n} from \'@/components/animate-ui/primitives/animate/spring\';\n\nexport const SpringDemo = () => {\n  return (\n    <SpringProvider>\n      <Spring className="z-50 text-neutral-500" />\n      <SpringElement className="z-50">\n        <img\n          src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n          alt="Animate UI"\n          draggable={false}\n          className="size-12 border"\n        />\n      </SpringElement>\n    </SpringProvider>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/spring/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-spring';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-spring',
  },
  'demo-primitives-animate-tabs': {
    name: 'demo-primitives-animate-tabs',
    description: 'Demo showing an animated tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-animate-tabs'],
    files: [
      {
        path: 'registry/demo/primitives/animate/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/tabs.tsx',
        content:
          'import {\n  Tabs,\n  TabsContent,\n  TabsContents,\n  TabsHighlight,\n  TabsHighlightItem,\n  TabsList,\n  TabsTrigger,\n} from \'@/components/animate-ui/primitives/animate/tabs\';\n\nexport function AnimateTabsDemo() {\n  return (\n    <Tabs className="w-[500px]">\n      <TabsHighlight className="bg-background absolute z-0 inset-0">\n        <TabsList className="h-10 inline-flex p-1 bg-accent w-full">\n          <TabsHighlightItem value="account" className="flex-1">\n            <TabsTrigger\n              value="account"\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Account\n            </TabsTrigger>\n          </TabsHighlightItem>\n          <TabsHighlightItem value="password" className="flex-1">\n            <TabsTrigger\n              value="password"\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Password\n            </TabsTrigger>\n          </TabsHighlightItem>\n        </TabsList>\n      </TabsHighlight>\n      <TabsContents className="bg-background p-3 border border-t-0">\n        <TabsContent value="account" className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Make changes to your account here. Click save when you&apos;re done.\n          </p>\n\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="name" className="text-sm">\n                Name\n              </label>\n              <input\n                id="name"\n                defaultValue="Pedro Duarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="username" className="text-sm">\n                Username\n              </label>\n              <input\n                id="username"\n                defaultValue="@peduarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save changes\n          </button>\n        </TabsContent>\n        <TabsContent value="password" className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Change your password here. After saving, you&apos;ll be logged out.\n          </p>\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="current" className="text-sm">\n                Current password\n              </label>\n              <input\n                id="current"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="new" className="text-sm">\n                New password\n              </label>\n              <input\n                id="new"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="confirm" className="text-sm">\n                Confirm password\n              </label>\n              <input\n                id="confirm"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save password\n          </button>\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-tabs',
  },
  'demo-primitives-animate-tooltip': {
    name: 'demo-primitives-animate-tooltip',
    description: 'Demo showing an animated tooltip.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-tooltip',
    ],
    files: [
      {
        path: 'registry/demo/primitives/animate/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/animate/tooltip.tsx',
        content:
          '\'use client\';\n\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n  TooltipArrow,\n} from \'@/components/animate-ui/primitives/animate/tooltip\';\nimport { motion } from \'motion/react\';\n\ninterface TooltipDemoProps {\n  openDelay?: number;\n  closeDelay?: number;\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n  withTransition?: boolean;\n}\n\nexport const AnimateTooltipDemo = ({\n  openDelay,\n  closeDelay,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n  withTransition,\n}: TooltipDemoProps) => {\n  return (\n    <TooltipProvider\n      key={`${side}-${align}-${sideOffset}-${alignOffset}-${openDelay}-${closeDelay}`}\n      openDelay={openDelay}\n      closeDelay={closeDelay}\n    >\n      <div className="flex flex-col gap-5 justify-center items-center">\n        <div className="flex flex-row gap-2 border p-2">\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger className="bg-accent select-none px-4 py-2">\n              Docs\n            </TooltipTrigger>\n\n            <TooltipContent className="bg-primary px-3 py-1.5 text-sm text-primary-foreground">\n              <TooltipArrow\n                className="fill-primary size-2.5"\n                withTransition={withTransition}\n              />\n              <motion.p layout="preserve-aspect">Documentation</motion.p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger className="bg-accent select-none px-4 py-2">\n              Lorem\n            </TooltipTrigger>\n\n            <TooltipContent className="bg-primary max-w-[200px] px-3 py-1.5 text-sm text-primary-foreground">\n              <TooltipArrow\n                className="fill-primary size-2.5"\n                withTransition={withTransition}\n              />\n              <motion.p layout="preserve-aspect">\n                Lorem ipsum dolor sit amet consectetur adipisicing elit\n              </motion.p>\n            </TooltipContent>\n          </Tooltip>\n\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger className="bg-accent select-none px-4 py-2">\n              Guide\n            </TooltipTrigger>\n\n            <TooltipContent className="bg-primary px-3 py-1.5 text-sm text-primary-foreground">\n              <TooltipArrow\n                className="fill-primary size-2.5"\n                withTransition={withTransition}\n              />\n              <motion.p layout="preserve-aspect">User Guide</motion.p>\n            </TooltipContent>\n          </Tooltip>\n        </div>\n        <div className="flex flex-row gap-5">\n          <Tooltip\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            <TooltipTrigger className="bg-accent select-none px-4 py-2">\n              Repo\n            </TooltipTrigger>\n\n            <TooltipContent className="bg-primary px-3 py-1.5 text-sm text-primary-foreground">\n              <TooltipArrow\n                className="fill-primary size-2.5"\n                withTransition={withTransition}\n              />\n              <motion.p layout="preserve-aspect">GitHub</motion.p>\n            </TooltipContent>\n          </Tooltip>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/animate/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-animate-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipProvider: {
          openDelay: { value: 700 },
          closeDelay: { value: 300 },
        },
        Tooltip: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 0 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
        TooltipArrow: { withTransition: { value: true } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-animate-tooltip',
  },
  'demo-primitives-base-accordion': {
    name: 'demo-primitives-base-accordion',
    description: 'Demo showing an animated base accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-accordion',
    ],
    files: [
      {
        path: 'registry/demo/primitives/base/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/accordion.tsx',
        content:
          "import {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionPanel,\n  AccordionHeader,\n} from '@/components/animate-ui/primitives/base/accordion';\n\nconst ITEMS = [\n  {\n    title: 'What is Animate UI?',\n    content:\n      'Animate UI is an open-source distribution of React components built with TypeScript, Tailwind CSS, and Motion.',\n  },\n  {\n    title: 'How is it different from other libraries?',\n    content:\n      'Instead of installing via NPM, you copy and paste the components directly. This gives you full control to modify or customize them as needed.',\n  },\n  {\n    title: 'Is Animate UI free to use?',\n    content:\n      'Absolutely! Animate UI is fully open-source. You can use, modify, and adapt it to fit your needs.',\n  },\n];\n\ntype BaseAccordionDemoProps = {\n  openMultiple?: boolean;\n  keepRendered?: boolean;\n};\n\nexport const BaseAccordionDemo = ({\n  openMultiple = false,\n  keepRendered = false,\n}: BaseAccordionDemoProps) => {\n  return (\n    <Accordion openMultiple={openMultiple} className=\"max-w-[400px] w-full\">\n      {ITEMS.map((item, index) => (\n        <AccordionItem key={index} value={`item-${index + 1}`}>\n          <AccordionHeader>\n            <AccordionTrigger className=\"border-b py-2 w-full text-start\">\n              {item.title}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionPanel keepRendered={keepRendered}>\n            <div className=\"py-2 text-sm text-muted-foreground\">\n              {item.content}\n            </div>\n          </AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Accordion: { openMultiple: { value: false } },
        AccordionPanel: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-accordion',
  },
  'demo-primitives-base-checkbox': {
    name: 'demo-primitives-base-checkbox',
    description: 'Demo showing an animated base checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-checkbox'],
    files: [
      {
        path: 'registry/demo/primitives/base/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/checkbox.tsx',
        content:
          'import {\n  Checkbox,\n  CheckboxIndicator,\n} from \'@/components/animate-ui/primitives/base/checkbox\';\n\ninterface BaseCheckboxDemoProps {\n  indeterminate: boolean;\n}\n\nexport const BaseCheckboxDemo = ({ indeterminate }: BaseCheckboxDemoProps) => {\n  return (\n    <div className="flex items-center space-x-2">\n      <Checkbox\n        id="terms"\n        indeterminate={indeterminate}\n        className="size-5 flex justify-center items-center border [&[data-checked],&[data-indeterminate]]:bg-primary [&[data-checked],&[data-indeterminate]]:text-primary-foreground transition-colors duration-500"\n      >\n        <CheckboxIndicator className="size-3.5" />\n      </Checkbox>\n      <label htmlFor="terms">Accept terms and conditions</label>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = { Checkbox: { indeterminate: { value: false } } };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-checkbox',
  },
  'demo-primitives-base-collapsible': {
    name: 'demo-primitives-base-collapsible',
    description: 'Demo showing an animated base collapsible.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-collapsible',
    ],
    files: [
      {
        path: 'registry/demo/primitives/base/collapsible/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/collapsible.tsx',
        content:
          'import {\n  Collapsible,\n  CollapsiblePanel,\n  CollapsibleTrigger,\n} from \'@/components/animate-ui/primitives/base/collapsible\';\n\ntype BaseCollapsibleDemoProps = {\n  keepRendered: boolean;\n};\n\nexport const BaseCollapsibleDemo = ({\n  keepRendered = false,\n}: BaseCollapsibleDemoProps) => {\n  return (\n    <Collapsible>\n      <CollapsibleTrigger className="px-3 py-1.5 border-b text-start w-[200px]">\n        Recovery keys\n      </CollapsibleTrigger>\n      <CollapsiblePanel keepRendered={keepRendered}>\n        <div className="pt-1.5 px-3 text-sm text-muted-foreground">\n          <div>alien-bean-pasta</div>\n          <div>wild-irish-burrito</div>\n          <div>horse-battery-staple</div>\n        </div>\n      </CollapsiblePanel>\n    </Collapsible>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/collapsible/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-collapsible';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CollapsiblePanel: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-collapsible',
  },
  'demo-primitives-base-files': {
    name: 'demo-primitives-base-files',
    description: 'Demo showing an animated base files.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-files'],
    files: [
      {
        path: 'registry/demo/primitives/base/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/files.tsx',
        content:
          'import {\n  File,\n  FileHighlight,\n  FileIcon,\n  FileLabel,\n  Files,\n  FilesHighlight,\n  Folder,\n  FolderPanel,\n  FolderHeader,\n  FolderHighlight,\n  FolderIcon,\n  FolderItem,\n  FolderTrigger,\n} from \'@/components/animate-ui/primitives/base/files\';\nimport {\n  FolderOpenIcon,\n  FolderIcon as LucideFolderIcon,\n  FileIcon as LucideFileIcon,\n} from \'lucide-react\';\n\nexport const FilesDemo = () => {\n  return (\n    <div className="relative size-full border bg-background overflow-auto">\n      <Files className="p-3" defaultOpen={[\'folder-1\']}>\n        <FilesHighlight className="bg-accent pointer-events-none">\n          <FolderItem value="folder-1">\n            <FolderHeader>\n              <FolderTrigger className="w-full text-start">\n                <FolderHighlight>\n                  <Folder className="flex items-center gap-2 p-2 pointer-events-none">\n                    <FolderIcon\n                      closeIcon={<LucideFolderIcon className="size-4.5" />}\n                      openIcon={<FolderOpenIcon className="size-4.5" />}\n                    />\n                    <FileLabel className="text-sm">Folder 1</FileLabel>\n                  </Folder>\n                </FolderHighlight>\n              </FolderTrigger>\n            </FolderHeader>\n\n            <div className="relative ml-8 before:absolute before:-left-3 before:inset-y-0 before:w-px before:h-full before:bg-border">\n              <FolderPanel>\n                <FileHighlight>\n                  <File className="flex items-center gap-2 p-2 pointer-events-none">\n                    <FileIcon>\n                      <LucideFileIcon className="size-4.5" />\n                    </FileIcon>\n                    <FileLabel className="text-sm">File 1</FileLabel>\n                  </File>\n                </FileHighlight>\n\n                <Files defaultOpen={[\'folder-2\']}>\n                  <FolderItem value="folder-2">\n                    <FolderHeader>\n                      <FolderTrigger className="w-full text-start">\n                        <FolderHighlight>\n                          <Folder className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FolderIcon\n                              closeIcon={\n                                <LucideFolderIcon className="size-4.5" />\n                              }\n                              openIcon={<FolderOpenIcon className="size-4.5" />}\n                            />\n                            <FileLabel className="text-sm">Folder 2</FileLabel>\n                          </Folder>\n                        </FolderHighlight>\n                      </FolderTrigger>\n                    </FolderHeader>\n\n                    <div className="relative ml-8 before:absolute before:-left-3 before:inset-y-0 before:w-px before:h-full before:bg-border">\n                      <FolderPanel>\n                        <FileHighlight>\n                          <File className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FileIcon>\n                              <LucideFileIcon className="size-4.5" />\n                            </FileIcon>\n                            <FileLabel className="text-sm">File 2</FileLabel>\n                          </File>\n                        </FileHighlight>\n                        <FileHighlight>\n                          <File className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FileIcon>\n                              <LucideFileIcon className="size-4.5" />\n                            </FileIcon>\n                            <FileLabel className="text-sm">File 3</FileLabel>\n                          </File>\n                        </FileHighlight>\n                      </FolderPanel>\n                    </div>\n                  </FolderItem>\n\n                  <FileHighlight>\n                    <File className="flex items-center gap-2 p-2 pointer-events-none">\n                      <FileIcon>\n                        <LucideFileIcon className="size-4.5" />\n                      </FileIcon>\n                      <FileLabel className="text-sm">File 4</FileLabel>\n                    </File>\n                  </FileHighlight>\n                </Files>\n              </FolderPanel>\n            </div>\n          </FolderItem>\n\n          <FileHighlight>\n            <File className="flex items-center gap-2 p-2 pointer-events-none">\n              <FileIcon>\n                <LucideFileIcon className="size-4.5" />\n              </FileIcon>\n              <FileLabel className="text-sm">File 5</FileLabel>\n            </File>\n          </FileHighlight>\n        </FilesHighlight>\n      </Files>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/files/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-files',
  },
  'demo-primitives-base-popover': {
    name: 'demo-primitives-base-popover',
    description: 'Demo showing an animated base popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-popover'],
    files: [
      {
        path: 'registry/demo/primitives/base/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverPositioner,\n  PopoverPopup,\n  PopoverPortal,\n  PopoverTrigger,\n} from \'@/components/animate-ui/primitives/base/popover\';\n\ninterface BasePopoverDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\' | \'inline-start\' | \'inline-end\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport function BasePopoverDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: BasePopoverDemoProps) {\n  return (\n    <Popover>\n      <PopoverTrigger>Open popover</PopoverTrigger>\n      <PopoverPortal>\n        <PopoverPositioner\n          side={side}\n          sideOffset={sideOffset}\n          align={align}\n          alignOffset={alignOffset}\n          className="z-50"\n        >\n          <PopoverPopup className="w-80 bg-background border p-4">\n            <div className="grid gap-4">\n              <div className="space-y-2">\n                <h4 className="font-medium leading-none">Dimensions</h4>\n                <p className="text-sm text-muted-foreground">\n                  Set the dimensions for the layer.\n                </p>\n              </div>\n              <div className="grid gap-2">\n                <div className="grid grid-cols-3 items-center gap-4">\n                  <label htmlFor="width" className="text-sm">\n                    Width\n                  </label>\n                  <input\n                    id="width"\n                    defaultValue="100%"\n                    className="col-span-2 h-8 p-2 border"\n                  />\n                </div>\n                <div className="grid grid-cols-3 items-center gap-4">\n                  <label htmlFor="maxWidth" className="text-sm">\n                    Max. width\n                  </label>\n                  <input\n                    id="maxWidth"\n                    defaultValue="300px"\n                    className="col-span-2 h-8 p-2 border"\n                  />\n                </div>\n                <div className="grid grid-cols-3 items-center gap-4">\n                  <label htmlFor="height" className="text-sm">\n                    Height\n                  </label>\n                  <input\n                    id="height"\n                    defaultValue="25px"\n                    className="col-span-2 h-8 p-2 border"\n                  />\n                </div>\n                <div className="grid grid-cols-3 items-center gap-4">\n                  <label htmlFor="maxHeight" className="text-sm">\n                    Max. height\n                  </label>\n                  <input\n                    id="maxHeight"\n                    defaultValue="none"\n                    className="col-span-2 h-8 p-2 border"\n                  />\n                </div>\n              </div>\n            </div>\n          </PopoverPopup>\n        </PopoverPositioner>\n      </PopoverPortal>\n    </Popover>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverPositioner: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'inline-start': 'inline-start',
              'inline-end': 'inline-end',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-popover',
  },
  'demo-primitives-base-preview-card': {
    name: 'demo-primitives-base-preview-card',
    description: 'Demo showing an animated base preview card.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-preview-card',
    ],
    files: [
      {
        path: 'registry/demo/primitives/base/preview-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/preview-card.tsx',
        content:
          'import {\n  PreviewCard,\n  PreviewCardTrigger,\n  PreviewCardPortal,\n  PreviewCardPositioner,\n  PreviewCardPopup,\n} from \'@/components/animate-ui/primitives/base/preview-card\';\n\ninterface PreviewCardDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\' | \'inline-start\' | \'inline-end\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const PreviewCardDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: PreviewCardDemoProps) => {\n  return (\n    <PreviewCard>\n      <PreviewCardTrigger\n        render={\n          <a\n            className="size-12 border"\n            href="https://twitter.com/animate_ui"\n            target="_blank"\n            rel="noreferrer noopener"\n          >\n            <img\n              src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n              alt="Animate UI"\n            />\n          </a>\n        }\n      />\n      <PreviewCardPortal>\n        <PreviewCardPositioner\n          side={side}\n          sideOffset={sideOffset}\n          align={align}\n          alignOffset={alignOffset}\n          className="z-50"\n        >\n          <PreviewCardPopup className="w-80 bg-background border p-4">\n            <div className="flex flex-col gap-4">\n              <img\n                className="size-16 rounded-full overflow-hidden border"\n                src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n                alt="Animate UI"\n              />\n              <div className="flex flex-col gap-4">\n                <div>\n                  <div className="font-bold">Animate UI</div>\n                  <div className="text-sm text-muted-foreground">\n                    @animate_ui\n                  </div>\n                </div>\n                <div className="text-sm text-muted-foreground">\n                  A fully animated, open-source component distribution built\n                  with React, TypeScript, Tailwind CSS, and Motion.\n                </div>\n                <div className="flex gap-4">\n                  <div className="flex gap-1 text-sm items-center">\n                    <div className="font-bold">0</div>{\' \'}\n                    <div className="text-muted-foreground">Following</div>\n                  </div>\n                  <div className="flex gap-1 text-sm items-center">\n                    <div className="font-bold">2,900</div>{\' \'}\n                    <div className="text-muted-foreground">Followers</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </PreviewCardPopup>\n        </PreviewCardPositioner>\n      </PreviewCardPortal>\n    </PreviewCard>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/preview-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-preview-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PreviewCardPositioner: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'inline-start': 'inline-start',
              'inline-end': 'inline-end',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-preview-card',
  },
  'demo-primitives-base-progress': {
    name: 'demo-primitives-base-progress',
    description: 'Demo showing an animated base progress.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-progress'],
    files: [
      {
        path: 'registry/demo/primitives/base/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/progress.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  Progress,\n  ProgressLabel,\n  ProgressTrack,\n  ProgressValue,\n  ProgressIndicator,\n} from \'@/components/animate-ui/primitives/base/progress\';\n\nexport const BaseProgressDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) return 100;\n        return prev + 25;\n      });\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  React.useEffect(() => {\n    if (progress >= 100) setTimeout(() => setProgress(0), 4000);\n  }, [progress]);\n\n  return (\n    <Progress value={progress} className="w-[300px] space-y-2">\n      <div className="flex items-center justify-between gap-1">\n        <ProgressLabel className="text-sm font-medium">\n          Export data\n        </ProgressLabel>\n        <span className="text-sm">\n          <ProgressValue /> %\n        </span>\n      </div>\n      <ProgressTrack className="w-[300px] h-2 border overflow-hidden">\n        <ProgressIndicator className="bg-primary" />\n      </ProgressTrack>\n    </Progress>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-progress',
  },
  'demo-primitives-base-switch': {
    name: 'demo-primitives-base-switch',
    description: 'Demo showing an animated base switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-switch'],
    files: [
      {
        path: 'registry/demo/primitives/base/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/switch.tsx',
        content:
          'import { Switch, SwitchThumb } from \'@/components/animate-ui/primitives/base/switch\';\nimport { cn } from \'@/lib/utils\';\n\nexport const BaseSwitchDemo = () => {\n  return (\n    <div className="flex items-center space-x-2">\n      <label htmlFor="airplane-mode">Airplane mode</label>\n      <Switch\n        className={cn(\n          \'relative flex p-0.5 h-6 w-10 items-center justify-start rounded-full border transition-colors\',\n          \'data-[checked]:bg-primary data-[checked]:justify-end\',\n        )}\n        defaultChecked\n        id="airplane-mode"\n      >\n        <SwitchThumb\n          className="rounded-full bg-accent h-full aspect-square"\n          pressedAnimation={{ width: 22 }}\n        />\n      </Switch>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-switch',
  },
  'demo-primitives-base-toggle': {
    name: 'demo-primitives-base-toggle',
    description: 'Demo showing an animated base toggle.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-toggle'],
    files: [
      {
        path: 'registry/demo/primitives/base/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/toggle.tsx',
        content:
          'import {\n  Toggle,\n  ToggleHighlight,\n  ToggleItem,\n} from \'@/components/animate-ui/primitives/base/toggle\';\nimport { Bold } from \'lucide-react\';\n\nexport const BaseToggleDemo = () => {\n  return (\n    <Toggle className="relative size-8 flex items-center justify-center">\n      <ToggleHighlight className="bg-accent" />\n      <ToggleItem>\n        <Bold className="h-4 w-4" />\n      </ToggleItem>\n    </Toggle>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-toggle',
  },
  'demo-primitives-base-toggle-group': {
    name: 'demo-primitives-base-toggle-group',
    description: 'Demo showing an animated base toggle group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-toggle-group',
    ],
    files: [
      {
        path: 'registry/demo/primitives/base/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/toggle-group.tsx',
        content:
          'import {\n  ToggleGroup,\n  Toggle,\n  ToggleGroupHighlight,\n  ToggleHighlight,\n} from \'@/components/animate-ui/primitives/base/toggle-group\';\nimport { Bold, Italic, Underline } from \'lucide-react\';\nimport { useEffect, useState } from \'react\';\n\ninterface BaseToggleGroupDemoProps {\n  toggleMultiple: boolean;\n}\n\nexport const BaseToggleGroupDemo = ({\n  toggleMultiple,\n}: BaseToggleGroupDemoProps) => {\n  const [value, setValue] = useState<any[]>([]);\n\n  useEffect(() => {\n    setValue([\'bold\']);\n  }, [toggleMultiple]);\n\n  return !toggleMultiple ? (\n    <ToggleGroup value={value} onValueChange={setValue} className="flex gap-2">\n      <ToggleGroupHighlight className="bg-accent">\n        <ToggleHighlight value="bold">\n          <Toggle\n            value="bold"\n            aria-label="Toggle bold"\n            className="size-8 flex items-center justify-center"\n          >\n            <Bold className="h-4 w-4" />\n          </Toggle>\n        </ToggleHighlight>\n        <ToggleHighlight value="italic">\n          <Toggle\n            value="italic"\n            aria-label="Toggle italic"\n            className="size-8 flex items-center justify-center"\n          >\n            <Italic className="h-4 w-4" />\n          </Toggle>\n        </ToggleHighlight>\n        <ToggleHighlight value="underline">\n          <Toggle\n            value="underline"\n            aria-label="Toggle underline"\n            className="size-8 flex items-center justify-center"\n          >\n            <Underline className="h-4 w-4" />\n          </Toggle>\n        </ToggleHighlight>\n      </ToggleGroupHighlight>\n    </ToggleGroup>\n  ) : (\n    <ToggleGroup\n      toggleMultiple\n      value={value}\n      onValueChange={setValue}\n      className="flex gap-2"\n    >\n      <ToggleHighlight value="bold" className="bg-accent">\n        <Toggle\n          value="bold"\n          aria-label="Toggle bold"\n          className="size-8 flex items-center justify-center"\n        >\n          <Bold className="h-4 w-4" />\n        </Toggle>\n      </ToggleHighlight>\n      <ToggleHighlight value="italic" className="bg-accent">\n        <Toggle\n          value="italic"\n          aria-label="Toggle italic"\n          className="size-8 flex items-center justify-center"\n        >\n          <Italic className="h-4 w-4" />\n        </Toggle>\n      </ToggleHighlight>\n      <ToggleHighlight value="underline" className="bg-accent">\n        <Toggle\n          value="underline"\n          aria-label="Toggle underline"\n          className="size-8 flex items-center justify-center"\n        >\n          <Underline className="h-4 w-4" />\n        </Toggle>\n      </ToggleHighlight>\n    </ToggleGroup>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ToggleGroup: { toggleMultiple: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-toggle-group',
  },
  'demo-primitives-base-tooltip': {
    name: 'demo-primitives-base-tooltip',
    description: 'Demo showing an animated base tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-base-tooltip'],
    files: [
      {
        path: 'registry/demo/primitives/base/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/base/tooltip.tsx',
        content:
          "import {\n  Tooltip,\n  TooltipPositioner,\n  TooltipPopup,\n  TooltipProvider,\n  TooltipPortal,\n  TooltipTrigger,\n} from '@/components/animate-ui/primitives/base/tooltip';\n\ninterface RadixTooltipDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right' | 'inline-start' | 'inline-end';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport const BaseTooltipDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixTooltipDemoProps) => {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger>Hover</TooltipTrigger>\n        <TooltipPortal>\n          <TooltipPositioner\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n            className=\"z-50\"\n          >\n            <TooltipPopup className=\"bg-primary text-primary-foreground px-2 py-1 text-sm\">\n              <p>Add to library</p>\n            </TooltipPopup>\n          </TooltipPositioner>\n        </TooltipPortal>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/base/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-base-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipPositioner: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'inline-start': 'inline-start',
              'inline-end': 'inline-end',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-base-tooltip',
  },
  'demo-primitives-buttons-button': {
    name: 'demo-primitives-buttons-button',
    description: 'Demo showing a button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-button',
    ],
    files: [
      {
        path: 'registry/demo/primitives/buttons/button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/buttons/button.tsx',
        content:
          'import { Button } from \'@/components/animate-ui/primitives/buttons/button\';\n\ninterface ButtonDemoProps {\n  hoverScale: number;\n  tapScale: number;\n}\n\nexport default function ButtonDemo({ hoverScale, tapScale }: ButtonDemoProps) {\n  return (\n    <Button\n      key={`${hoverScale}-${tapScale}`}\n      hoverScale={hoverScale}\n      tapScale={tapScale}\n      className="bg-primary text-primary-foreground text-sm font-medium px-4 py-2 h-10"\n    >\n      Button\n    </Button>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/buttons/button/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-buttons-button';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Button: {
          hoverScale: { value: 1.05, min: 0, max: 2, step: 0.05 },
          tapScale: { value: 0.95, min: 0, max: 2, step: 0.05 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-buttons-button',
  },
  'demo-primitives-buttons-flip': {
    name: 'demo-primitives-buttons-flip',
    description: 'Demo showing an animated flip button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-buttons-flip'],
    files: [
      {
        path: 'registry/demo/primitives/buttons/flip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/buttons/flip.tsx',
        content:
          "import {\n  FlipButton,\n  FlipButtonBack,\n  FlipButtonFront,\n} from '@/components/animate-ui/primitives/buttons/flip';\n\ntype FlipButtonDemoProps = {\n  from?: 'top' | 'right' | 'bottom' | 'left';\n  tapScale?: number;\n};\n\nexport default function FlipButtonDemo({\n  from,\n  tapScale,\n}: FlipButtonDemoProps) {\n  return (\n    <FlipButton\n      key={`${from}-${tapScale}`}\n      from={from}\n      tapScale={tapScale}\n      className=\"text-sm font-medium\"\n    >\n      <FlipButtonFront className=\"px-4 py-2 h-10 bg-primary text-primary-foreground flex items-center justify-center\">\n        Front\n      </FlipButtonFront>\n      <FlipButtonBack className=\"px-4 py-2 h-10 bg-accent text-accent-foreground flex items-center justify-center\">\n        Back Button\n      </FlipButtonBack>\n    </FlipButton>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/buttons/flip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-buttons-flip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        FlipButton: {
          from: {
            value: 'top',
            options: {
              top: 'top',
              right: 'right',
              bottom: 'bottom',
              left: 'left',
            },
          },
          tapScale: { value: 0.95, min: 0, max: 2, step: 0.05 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-buttons-flip',
  },
  'demo-primitives-buttons-liquid': {
    name: 'demo-primitives-buttons-liquid',
    description: 'Demo showing an animated liquid button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-liquid',
    ],
    files: [
      {
        path: 'registry/demo/primitives/buttons/liquid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/buttons/liquid.tsx',
        content:
          'import { LiquidButton } from \'@/components/animate-ui/primitives/buttons/liquid\';\n\ninterface LiquidButtonDemoProps {\n  delay?: string;\n  fillHeight?: string;\n  hoverScale?: number;\n  tapScale?: number;\n}\n\nexport default function LiquidButtonDemo({\n  delay,\n  fillHeight,\n  hoverScale,\n  tapScale,\n}: LiquidButtonDemoProps) {\n  return (\n    <LiquidButton\n      key={`${delay}-${fillHeight}-${hoverScale}-${tapScale}`}\n      delay={`${delay}s`}\n      fillHeight={`${fillHeight}px`}\n      hoverScale={hoverScale}\n      tapScale={tapScale}\n      className="text-sm font-medium px-4 py-2 h-10 overflow-hidden [--liquid-button-color:var(--primary)] [--liquid-button-background-color:var(--accent)] text-primary hover:text-primary-foreground"\n    >\n      Liquid Button\n    </LiquidButton>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/buttons/liquid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-buttons-liquid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        LiquidButton: {
          delay: { value: 0.3, min: 0.1, max: 0.5, step: 0.05 },
          fillHeight: { value: 3, min: 0, max: 10, step: 1 },
          hoverScale: { value: 1.05, min: 0, max: 2, step: 0.05 },
          tapScale: { value: 0.95, min: 0, max: 2, step: 0.05 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-buttons-liquid',
  },
  'demo-primitives-buttons-ripple': {
    name: 'demo-primitives-buttons-ripple',
    description: 'Demo showing a ripple button.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-buttons-ripple',
    ],
    files: [
      {
        path: 'registry/demo/primitives/buttons/ripple/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/buttons/ripple.tsx',
        content:
          'import {\n  RippleButton,\n  RippleButtonRipples,\n} from \'@/components/animate-ui/primitives/buttons/ripple\';\n\ninterface RippleButtonDemoProps {\n  hoverScale: number;\n  tapScale: number;\n}\n\nexport default function RippleButtonDemo({\n  hoverScale,\n  tapScale,\n}: RippleButtonDemoProps) {\n  return (\n    <RippleButton\n      key={`${hoverScale}-${tapScale}`}\n      hoverScale={hoverScale}\n      tapScale={tapScale}\n      className="bg-primary text-primary-foreground text-sm font-medium px-4 py-2 h-10 [--ripple-button-ripple-color:var(--primary-foreground)]"\n    >\n      Ripple Button\n      <RippleButtonRipples />\n    </RippleButton>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/buttons/ripple/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-buttons-ripple';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        RippleButton: {
          hoverScale: { value: 1.05, min: 0, max: 2, step: 0.05 },
          tapScale: { value: 0.95, min: 0, max: 2, step: 0.05 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-buttons-ripple',
  },
  'demo-primitives-effects-blur': {
    name: 'demo-primitives-effects-blur',
    description: 'Demo showing an animated blur.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-effects-blur'],
    files: [
      {
        path: 'registry/demo/primitives/effects/blur/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/blur.tsx',
        content:
          'import { Blur } from \'@/components/animate-ui/primitives/effects/blur\';\n\ntype BlurDemoProps = {\n  delay?: number;\n  initialBlur?: number;\n  blur?: number;\n};\n\nexport default function BlurDemo({\n  delay = 0,\n  initialBlur = 10,\n  blur = 0,\n}: BlurDemoProps) {\n  return (\n    <Blur\n      delay={delay}\n      initialBlur={initialBlur}\n      blur={blur}\n      className="px-6 py-4 bg-accent"\n    >\n      Blur\n    </Blur>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/blur/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-blur';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Blur: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          initialBlur: { value: 10, min: 0, max: 50, step: 1 },
          blur: { value: 0, min: 0, max: 50, step: 1 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-blur',
  },
  'demo-primitives-effects-effect': {
    name: 'demo-primitives-effects-effect',
    description: 'Demo showing an animated effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-effect',
    ],
    files: [
      {
        path: 'registry/demo/primitives/effects/effect/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/effect.tsx',
        content:
          'import { Effect } from \'@/components/animate-ui/primitives/effects/effect\';\n\ntype EffectDemoProps = {\n  delay?: number;\n  blur?: boolean;\n  slide?: boolean;\n  fade?: boolean;\n  zoom?: boolean;\n};\n\nexport default function EffectDemo({\n  delay = 0,\n  blur = false,\n  slide = false,\n  fade = false,\n  zoom = false,\n}: EffectDemoProps) {\n  return (\n    <Effect\n      delay={delay}\n      blur={blur}\n      slide={slide}\n      fade={fade}\n      zoom={zoom}\n      className="px-6 py-4 bg-accent"\n    >\n      Effect\n    </Effect>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/effect/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-effect';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Effect: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          blur: { value: true },
          slide: { value: true },
          fade: { value: true },
          zoom: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-effect',
  },
  'demo-primitives-effects-fade': {
    name: 'demo-primitives-effects-fade',
    description: 'Demo showing an animated fade.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-effects-fade'],
    files: [
      {
        path: 'registry/demo/primitives/effects/fade/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/fade.tsx',
        content:
          'import { Fade } from \'@/components/animate-ui/primitives/effects/fade\';\n\ntype FadeDemoProps = {\n  delay?: number;\n  initialOpacity?: number;\n  opacity?: number;\n};\n\nexport default function FadeDemo({\n  delay = 0,\n  initialOpacity = 0,\n  opacity = 1,\n}: FadeDemoProps) {\n  return (\n    <Fade\n      delay={delay}\n      initialOpacity={initialOpacity}\n      opacity={opacity}\n      className="px-6 py-4 bg-accent"\n    >\n      Fade\n    </Fade>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/fade/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-fade';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Fade: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          initialOpacity: { value: 0, min: 0, max: 1, step: 0.1 },
          opacity: { value: 1, min: 0, max: 1, step: 0.1 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-fade',
  },
  'demo-primitives-effects-highlight': {
    name: 'demo-primitives-effects-highlight',
    description: 'Demo showing an animated highlight.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-highlight',
    ],
    files: [
      {
        path: 'registry/demo/primitives/effects/highlight/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/highlight.tsx',
        content:
          "import { Highlight } from '@/components/animate-ui/primitives/effects/highlight';\n\nconst TABS = [\n  {\n    value: 'tab-1',\n    title: 'Tab 1',\n    description: 'Tab 1 description',\n  },\n  {\n    value: 'tab-2',\n    title: 'Tab 2',\n    description: 'Tab 2 description',\n  },\n  {\n    value: 'tab-3',\n    title: 'Tab 3',\n    description: 'Tab 3 description',\n  },\n];\n\ntype HighlightDemoProps = {\n  mode?: 'children' | 'parent';\n  exitDelay?: number;\n  hover?: boolean;\n};\n\nexport const HighlightDemo = ({\n  mode = 'children',\n  exitDelay = 200,\n  hover = false,\n}: HighlightDemoProps) => {\n  return (\n    <div className=\"flex border rounded-full p-1\">\n      {/* @ts-ignore */}\n      <Highlight\n        defaultValue={TABS[0]?.value}\n        className=\"rounded-full bg-accent inset-0\"\n        {...(mode === 'parent' && {\n          containerClassName: 'flex',\n        })}\n        mode={mode}\n        exitDelay={exitDelay}\n        hover={hover}\n      >\n        {TABS.map((tab) => (\n          <div\n            key={tab.value}\n            data-value={tab.value}\n            className=\"px-3 h-8 flex items-center cursor-pointer justify-center rounded-full text-sm data-[active=true]:text-current data-[active=true]:font-medium text-muted-foreground transition-all duration-300\"\n          >\n            {tab.title}\n          </div>\n        ))}\n      </Highlight>\n    </div>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/highlight/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-highlight';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Highlight: {
          mode: {
            value: 'children',
            options: { children: 'children', parent: 'parent' },
          },
          exitDelay: { value: 200, min: 0, max: 3000, step: 100 },
          hover: { value: false },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-highlight',
  },
  'demo-primitives-effects-magnetic': {
    name: 'demo-primitives-effects-magnetic',
    description: 'Demo showing a magnetic effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-magnetic',
    ],
    files: [
      {
        path: 'registry/demo/primitives/effects/magnetic/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/magnetic.tsx',
        content:
          'import { Magnetic } from \'@/components/animate-ui/primitives/effects/magnetic\';\n\ninterface MagneticDemoProps {\n  onlyOnHover: boolean;\n  strength: number;\n  range: number;\n}\n\nexport const MagneticDemo = (props: MagneticDemoProps) => {\n  return (\n    <div className="size-full flex items-center justify-center">\n      <Magnetic className="size-20 bg-primary" {...props} />\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/magnetic/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-magnetic';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Magnetic: {
          onlyOnHover: { value: false },
          strength: { value: 0.5, min: 0, max: 1, step: 0.05 },
          range: { value: 120 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-magnetic',
  },
  'demo-primitives-effects-particles': {
    name: 'demo-primitives-effects-particles',
    description: 'Demo showing an animated particles.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-particles',
    ],
    files: [
      {
        path: 'registry/demo/primitives/effects/particles/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/particles.tsx',
        content:
          'import {\n  Particles,\n  ParticlesEffect,\n  type ParticlesEffectProps,\n} from \'@/components/animate-ui/primitives/effects/particles\';\nimport { useState } from \'react\';\n\nexport function ParticlesDemo(props: ParticlesEffectProps) {\n  const [key, setKey] = useState(0);\n\n  return (\n    <Particles key={key}>\n      <button\n        className="px-4 py-2 bg-accent"\n        onClick={() => setKey((k) => k + 1)}\n      >\n        Particles\n      </button>\n      <ParticlesEffect className="bg-primary size-1 rounded-full" {...props} />\n    </Particles>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/particles/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-particles';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ParticlesEffect: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 0, min: 0, max: 50, step: 1 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0, min: -50, max: 50, step: 1 },
          count: { value: 6, min: 1, max: 30, step: 1 },
          radius: { value: 30, min: 10, max: 100, step: 1 },
          spread: { value: 360, min: 0, max: 1000, step: 1 },
          duration: { value: 0.8, min: 0.1, max: 2, step: 0.1 },
          holdDelay: { value: 0.05, min: 0, max: 0.2, step: 0.01 },
          delay: { value: 0, min: 0, max: 3000, step: 100 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-particles',
  },
  'demo-primitives-effects-slide': {
    name: 'demo-primitives-effects-slide',
    description: 'Demo showing an animated slide.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-effects-slide'],
    files: [
      {
        path: 'registry/demo/primitives/effects/slide/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/slide.tsx',
        content:
          "import {\n  Slide,\n  type SlideDirection,\n} from '@/components/animate-ui/primitives/effects/slide';\n\ntype SlideDemoProps = {\n  delay?: number;\n  direction?: SlideDirection;\n  offset?: number;\n};\n\nexport default function SlideDemo({\n  delay = 0,\n  direction = 'up',\n  offset = 100,\n}: SlideDemoProps) {\n  return (\n    <Slide\n      delay={delay}\n      direction={direction}\n      offset={offset}\n      className=\"px-6 py-4 bg-accent\"\n    >\n      Slide\n    </Slide>\n  );\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/slide/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-slide';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Slide: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          direction: {
            value: 'up',
            options: { up: 'up', down: 'down', left: 'left', right: 'right' },
          },
          offset: { value: 100, min: 0, max: 1000, step: 10 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-slide',
  },
  'demo-primitives-effects-zoom': {
    name: 'demo-primitives-effects-zoom',
    description: 'Demo showing an animated zoom.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-effects-zoom'],
    files: [
      {
        path: 'registry/demo/primitives/effects/zoom/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/effects/zoom.tsx',
        content:
          'import { Zoom } from \'@/components/animate-ui/primitives/effects/zoom\';\n\ntype ZoomDemoProps = {\n  delay?: number;\n  initialScale?: number;\n  scale?: number;\n};\n\nexport default function ZoomDemo({\n  delay = 0,\n  initialScale = 0.5,\n  scale = 1,\n}: ZoomDemoProps) {\n  return (\n    <Zoom\n      delay={delay}\n      initialScale={initialScale}\n      scale={scale}\n      className="px-6 py-4 bg-accent"\n    >\n      Zoom\n    </Zoom>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/effects/zoom/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-effects-zoom';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Zoom: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          initialScale: { value: 0.5, min: 0, max: 1, step: 0.1 },
          scale: { value: 1, min: 0, max: 1, step: 0.1 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-effects-zoom',
  },
  'demo-primitives-headless-checkbox': {
    name: 'demo-primitives-headless-checkbox',
    description: 'Demo showing an animated headless checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-checkbox',
    ],
    files: [
      {
        path: 'registry/demo/primitives/headless/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/checkbox.tsx',
        content:
          'import {\n  Checkbox,\n  CheckboxIndicator,\n} from \'@/components/animate-ui/primitives/headless/checkbox\';\nimport { Field, Label } from \'@headlessui/react\';\n\ntype HeadlessCheckboxDemoProps = {\n  indeterminate: boolean;\n};\n\nexport const HeadlessCheckboxDemo = ({\n  indeterminate,\n}: HeadlessCheckboxDemoProps) => {\n  return (\n    <Field className="flex items-center space-x-2">\n      <Checkbox\n        id="terms"\n        indeterminate={indeterminate}\n        className="size-5 flex justify-center items-center border [&[data-checked],&[data-indeterminate]]:bg-primary [&[data-checked],&[data-indeterminate]]:text-primary-foreground transition-colors duration-500"\n      >\n        <CheckboxIndicator className="size-3.5" />\n      </Checkbox>\n      <Label htmlFor="terms">Accept terms and conditions</Label>\n    </Field>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = { Checkbox: { indeterminate: { value: false } } };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-checkbox',
  },
  'demo-primitives-headless-dialog': {
    name: 'demo-primitives-headless-dialog',
    description: 'Demo showing an animated headless dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-dialog',
    ],
    files: [
      {
        path: 'registry/demo/primitives/headless/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/dialog.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  Dialog,\n  DialogBackdrop,\n  DialogClose,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogPanel,\n  DialogTitle,\n  type DialogFlipDirection,\n} from \'@/components/animate-ui/primitives/headless/dialog\';\nimport { X } from \'lucide-react\';\n\ntype RadixDialogDemoProps = {\n  from: DialogFlipDirection;\n};\n\nexport const RadixDialogDemo = ({ from }: RadixDialogDemoProps) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <div>\n      <button\n        className="bg-primary text-primary-foreground px-4 py-2 text-sm"\n        onClick={() => setIsOpen(true)}\n      >\n        Open Dialog\n      </button>\n\n      <Dialog open={isOpen} onClose={() => setIsOpen(false)}>\n        <DialogBackdrop className="fixed inset-0 z-50 bg-black/80" />\n        <DialogPanel\n          from={from}\n          className="sm:max-w-md fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] z-50 border bg-background p-6"\n        >\n          <DialogHeader>\n            <DialogTitle className="text-lg">Terms of Service</DialogTitle>\n            <DialogDescription className="text-sm">\n              Please read the following terms of service carefully.\n            </DialogDescription>\n          </DialogHeader>\n\n          <p className="py-4 text-sm text-muted-foreground">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam,\n            quos. Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Quisquam, quos.\n          </p>\n\n          <DialogFooter>\n            <button className="bg-primary text-primary-foreground px-4 py-2 text-sm">\n              Accept\n            </button>\n          </DialogFooter>\n\n          <DialogClose className="absolute top-4 right-4">\n            <X className="size-4" />\n            <span className="sr-only">Close</span>\n          </DialogClose>\n        </DialogPanel>\n      </Dialog>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DialogPanel: {
          from: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-dialog',
  },
  'demo-primitives-headless-disclosure': {
    name: 'demo-primitives-headless-disclosure',
    description: 'Demo showing an animated headless disclosure.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-disclosure',
    ],
    files: [
      {
        path: 'registry/demo/primitives/headless/disclosure/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/disclosure.tsx',
        content:
          'import {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from \'@/components/animate-ui/primitives/headless/disclosure\';\n\ntype HeadlessDisclosureDemoProps = {\n  keepRendered: boolean;\n};\n\nexport const HeadlessDisclosureDemo = ({\n  keepRendered = false,\n}: HeadlessDisclosureDemoProps) => {\n  return (\n    <Disclosure className="w-[350px]" as="div">\n      <DisclosureButton className="px-3 py-1.5 border-b text-start w-[200px]">\n        Recovery keys\n      </DisclosureButton>\n      <DisclosurePanel keepRendered={keepRendered}>\n        <div className="pt-1.5 px-3 text-sm text-muted-foreground">\n          <div>alien-bean-pasta</div>\n          <div>wild-irish-burrito</div>\n          <div>horse-battery-staple</div>\n        </div>\n      </DisclosurePanel>\n    </Disclosure>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/disclosure/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-disclosure';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DisclosurePanel: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-disclosure',
  },
  'demo-primitives-headless-popover': {
    name: 'demo-primitives-headless-popover',
    description: 'Demo showing an animated headless popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-popover',
    ],
    files: [
      {
        path: 'registry/demo/primitives/headless/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n} from \'@/components/animate-ui/primitives/headless/popover\';\n\ninterface HeadlessPopoverDemoProps {\n  anchor?:\n    | \'top\'\n    | \'bottom\'\n    | \'left\'\n    | \'right\'\n    | \'top start\'\n    | \'top end\'\n    | \'bottom start\'\n    | \'bottom end\'\n    | \'left start\'\n    | \'left end\'\n    | \'right start\'\n    | \'right end\';\n  gap?: number;\n}\n\nexport function HeadlessPopoverDemo({\n  anchor = \'bottom\',\n  gap = 4,\n}: HeadlessPopoverDemoProps) {\n  return (\n    <Popover>\n      <PopoverButton>Open popover</PopoverButton>\n\n      <PopoverPanel\n        anchor={{ to: anchor, gap }}\n        className="w-80 bg-background border p-4 z-50"\n      >\n        <div className="grid gap-4">\n          <div className="space-y-2">\n            <h4 className="font-medium leading-none">Dimensions</h4>\n            <p className="text-sm text-muted-foreground">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className="grid gap-2">\n            <div className="grid grid-cols-3 items-center gap-4">\n              <label htmlFor="width" className="text-sm">\n                Width\n              </label>\n              <input\n                id="width"\n                defaultValue="100%"\n                className="col-span-2 h-8 p-2 border"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <label htmlFor="maxWidth" className="text-sm">\n                Max. width\n              </label>\n              <input\n                id="maxWidth"\n                defaultValue="300px"\n                className="col-span-2 h-8 p-2 border"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <label htmlFor="height" className="text-sm">\n                Height\n              </label>\n              <input\n                id="height"\n                defaultValue="25px"\n                className="col-span-2 h-8 p-2 border"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <label htmlFor="maxHeight" className="text-sm">\n                Max. height\n              </label>\n              <input\n                id="maxHeight"\n                defaultValue="none"\n                className="col-span-2 h-8 p-2 border"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverPanel>\n    </Popover>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverPanel: {
          anchor: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
              'top start': 'top start',
              'top end': 'top end',
              'bottom start': 'bottom start',
              'bottom end': 'bottom end',
              'left start': 'left start',
              'left end': 'left end',
              'right start': 'right start',
              'right end': 'right end',
            },
          },
          gap: { value: 4 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-popover',
  },
  'demo-primitives-headless-switch': {
    name: 'demo-primitives-headless-switch',
    description: 'Demo showing an animated headless switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-headless-switch',
    ],
    files: [
      {
        path: 'registry/demo/primitives/headless/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/switch.tsx',
        content:
          "import { Switch, SwitchThumb } from '@/components/animate-ui/primitives/headless/switch';\nimport { Field, Label } from '@headlessui/react';\nimport { cn } from '@/lib/utils';\n\nexport const HeadlessSwitchDemo = () => {\n  return (\n    <Field className=\"flex items-center space-x-2\">\n      <Label htmlFor=\"airplane-mode\">Airplane mode</Label>\n      <Switch\n        className={cn(\n          'relative flex p-0.5 h-6 w-10 items-center justify-start rounded-full border transition-colors',\n          'data-[checked]:bg-primary data-[checked]:justify-end',\n        )}\n        defaultChecked\n        id=\"airplane-mode\"\n      >\n        <SwitchThumb\n          className=\"rounded-full bg-accent h-full aspect-square\"\n          pressedAnimation={{ width: 22 }}\n        />\n      </Switch>\n    </Field>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-switch',
  },
  'demo-primitives-headless-tabs': {
    name: 'demo-primitives-headless-tabs',
    description: 'Demo showing an animated headless tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-headless-tabs'],
    files: [
      {
        path: 'registry/demo/primitives/headless/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/headless/tabs.tsx',
        content:
          'import {\n  TabGroup,\n  TabPanel,\n  TabPanels,\n  TabHighlight,\n  TabHighlightItem,\n  TabList,\n  Tab,\n} from \'@/components/animate-ui/primitives/headless/tabs\';\n\nexport function HeadlessTabsDemo() {\n  return (\n    <TabGroup className="w-[500px]">\n      <TabHighlight className="bg-background absolute z-0 inset-0">\n        <TabList className="h-10 inline-flex p-1 bg-accent w-full">\n          <TabHighlightItem index={0} className="flex-1">\n            <Tab\n              index={0}\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Account\n            </Tab>\n          </TabHighlightItem>\n          <TabHighlightItem index={1} className="flex-1">\n            <Tab\n              index={1}\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Password\n            </Tab>\n          </TabHighlightItem>\n        </TabList>\n      </TabHighlight>\n      <TabPanels className="bg-background p-3 border border-t-0">\n        <TabPanel className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Make changes to your account here. Click save when you&apos;re done.\n          </p>\n\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="name" className="text-sm">\n                Name\n              </label>\n              <input\n                id="name"\n                defaultValue="Pedro Duarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="username" className="text-sm">\n                Username\n              </label>\n              <input\n                id="username"\n                defaultValue="@peduarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save changes\n          </button>\n        </TabPanel>\n        <TabPanel className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Change your password here. After saving, you&apos;ll be logged out.\n          </p>\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="current" className="text-sm">\n                Current password\n              </label>\n              <input\n                id="current"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="new" className="text-sm">\n                New password\n              </label>\n              <input\n                id="new"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="confirm" className="text-sm">\n                Confirm password\n              </label>\n              <input\n                id="confirm"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save password\n          </button>\n        </TabPanel>\n      </TabPanels>\n    </TabGroup>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/headless/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-headless-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-headless-tabs',
  },
  'demo-primitives-radix-accordion': {
    name: 'demo-primitives-radix-accordion',
    description: 'Demo showing an animated radix accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-accordion',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/accordion.tsx',
        content:
          "import {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n  AccordionHeader,\n} from '@/components/animate-ui/primitives/radix/accordion';\n\nconst ITEMS = [\n  {\n    title: 'What is Animate UI?',\n    content:\n      'Animate UI is an open-source distribution of React components built with TypeScript, Tailwind CSS, and Motion.',\n  },\n  {\n    title: 'How is it different from other libraries?',\n    content:\n      'Instead of installing via NPM, you copy and paste the components directly. This gives you full control to modify or customize them as needed.',\n  },\n  {\n    title: 'Is Animate UI free to use?',\n    content:\n      'Absolutely! Animate UI is fully open-source. You can use, modify, and adapt it to fit your needs.',\n  },\n];\n\ntype RadixAccordionDemoProps = {\n  multiple?: boolean;\n  collapsible?: boolean;\n  keepRendered?: boolean;\n};\n\nexport const RadixAccordionDemo = ({\n  multiple = false,\n  collapsible = true,\n  keepRendered = false,\n}: RadixAccordionDemoProps) => {\n  return (\n    <Accordion\n      type={multiple ? 'multiple' : 'single'}\n      collapsible={collapsible}\n      className=\"max-w-[400px] w-full\"\n    >\n      {ITEMS.map((item, index) => (\n        <AccordionItem key={index} value={`item-${index + 1}`}>\n          <AccordionHeader>\n            <AccordionTrigger className=\"border-b py-2 w-full text-start\">\n              {item.title}\n            </AccordionTrigger>\n          </AccordionHeader>\n          <AccordionContent keepRendered={keepRendered}>\n            <div className=\"py-2 text-sm text-muted-foreground\">\n              {item.content}\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Accordion: { multiple: { value: false }, collapsible: { value: true } },
        AccordionContent: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-accordion',
  },
  'demo-primitives-radix-checkbox': {
    name: 'demo-primitives-radix-checkbox',
    description: 'Demo showing an animated radix checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-checkbox',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/checkbox.tsx',
        content:
          'import {\n  Checkbox,\n  CheckboxIndicator,\n} from \'@/components/animate-ui/primitives/radix/checkbox\';\nimport { useEffect, useState } from \'react\';\n\ntype RadixCheckboxDemoProps = {\n  checked: boolean | \'indeterminate\';\n};\n\nexport const RadixCheckboxDemo = ({ checked }: RadixCheckboxDemoProps) => {\n  const [isChecked, setIsChecked] = useState(checked ?? false);\n\n  useEffect(() => {\n    setIsChecked(checked);\n  }, [checked]);\n\n  return (\n    <div className="flex items-center space-x-2">\n      <Checkbox\n        id="terms"\n        checked={isChecked}\n        onCheckedChange={setIsChecked}\n        className="size-5 flex justify-center items-center border [&[data-state=checked],&[data-state=indeterminate]]:bg-primary [&[data-state=checked],&[data-state=indeterminate]]:text-primary-foreground transition-colors duration-500"\n      >\n        <CheckboxIndicator className="size-3.5" />\n      </Checkbox>\n      <label htmlFor="terms">Accept terms and conditions</label>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        Checkbox: {
          checked: {
            value: false,
            options: {
              true: true,
              false: false,
              indeterminate: 'indeterminate',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-checkbox',
  },
  'demo-primitives-radix-collapsible': {
    name: 'demo-primitives-radix-collapsible',
    description: 'Demo showing an animated radix collapsible.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-collapsible',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/collapsible/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/collapsible.tsx',
        content:
          'import {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \'@/components/animate-ui/primitives/radix/collapsible\';\n\ntype RadixCollapsibleDemoProps = {\n  keepRendered: boolean;\n};\n\nexport const RadixCollapsibleDemo = ({\n  keepRendered = false,\n}: RadixCollapsibleDemoProps) => {\n  return (\n    <Collapsible>\n      <CollapsibleTrigger className="px-3 py-1.5 border-b text-start w-[200px]">\n        Recovery keys\n      </CollapsibleTrigger>\n      <CollapsibleContent keepRendered={keepRendered}>\n        <div className="pt-1.5 px-3 text-sm text-muted-foreground">\n          <div>alien-bean-pasta</div>\n          <div>wild-irish-burrito</div>\n          <div>horse-battery-staple</div>\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/collapsible/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-collapsible';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CollapsibleContent: { keepRendered: { value: false } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-collapsible',
  },
  'demo-primitives-radix-dialog': {
    name: 'demo-primitives-radix-dialog',
    description: 'Demo showing an animated radix dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-dialog'],
    files: [
      {
        path: 'registry/demo/primitives/radix/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/dialog.tsx',
        content:
          'import {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  type DialogFlipDirection,\n} from \'@/components/animate-ui/primitives/radix/dialog\';\nimport { X } from \'lucide-react\';\n\ntype RadixDialogDemoProps = {\n  from: DialogFlipDirection;\n};\n\nexport const RadixDialogDemo = ({ from }: RadixDialogDemoProps) => {\n  return (\n    <Dialog>\n      <DialogTrigger className="bg-primary text-primary-foreground px-4 py-2 text-sm">\n        Open Dialog\n      </DialogTrigger>\n\n      <DialogPortal>\n        <DialogOverlay className="fixed inset-0 z-50 bg-black/80" />\n        <DialogContent\n          from={from}\n          className="sm:max-w-md fixed left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] z-50 border bg-background p-6"\n        >\n          <DialogHeader>\n            <DialogTitle className="text-lg">Terms of Service</DialogTitle>\n            <DialogDescription className="text-sm">\n              Please read the following terms of service carefully.\n            </DialogDescription>\n          </DialogHeader>\n\n          <p className="py-4 text-sm text-muted-foreground">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam,\n            quos. Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Quisquam, quos.\n          </p>\n\n          <DialogFooter>\n            <button className="bg-primary text-primary-foreground px-4 py-2 text-sm">\n              Accept\n            </button>\n          </DialogFooter>\n\n          <DialogClose className="absolute top-4 right-4">\n            <X className="size-4" />\n            <span className="sr-only">Close</span>\n          </DialogClose>\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DialogContent: {
          from: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-dialog',
  },
  'demo-primitives-radix-dropdown-menu': {
    name: 'demo-primitives-radix-dropdown-menu',
    description: 'Demo showing an animated radix dropdown menu.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-dropdown-menu',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/dropdown-menu/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/dropdown-menu.tsx',
        content:
          "'use client';\n\nimport {\n  ChevronRight,\n  CreditCard,\n  Keyboard,\n  LogOut,\n  Mail,\n  MessageSquare,\n  Plus,\n  PlusCircle,\n  Settings,\n  User,\n  UserPlus,\n  Users,\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuHighlight,\n  DropdownMenuHighlightItem,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/components/animate-ui/primitives/radix/dropdown-menu';\n\nconst itemClassName =\n  'relative z-[1] focus:text-accent-foreground select-none flex items-center gap-2 px-2 py-1.5 text-sm outline-none [&_svg]:size-4 [&_span]:data-[slot=dropdown-menu-shortcut]:text-xs [&_span]:data-[slot=dropdown-menu-shortcut]:ml-auto';\nconst separatorClassName = '-mx-1 my-1 h-px bg-border';\n\ninterface RadixDropdownMenuDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport const RadixDropdownMenuDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixDropdownMenuDemoProps) => {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n      <DropdownMenuContent\n        side={side}\n        sideOffset={sideOffset}\n        align={align}\n        alignOffset={alignOffset}\n        className=\"w-56 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden border bg-background p-1 z-50\"\n      >\n        <DropdownMenuHighlight className=\"absolute inset-0 bg-accent z-0\">\n          <DropdownMenuLabel className=\"px-2 py-1.5 text-sm font-semibold\">\n            My Account\n          </DropdownMenuLabel>\n          <DropdownMenuSeparator className={separatorClassName} />\n          <DropdownMenuGroup>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <User />\n                <span>Profile</span>\n                <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <CreditCard />\n                <span>Billing</span>\n                <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <Settings />\n                <span>Settings</span>\n                <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <Keyboard />\n                <span>Keyboard shortcuts</span>\n                <DropdownMenuShortcut>⌘K</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator className={separatorClassName} />\n          <DropdownMenuGroup>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <Users />\n                <span>Team</span>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n            <DropdownMenuSub>\n              <DropdownMenuHighlightItem>\n                <DropdownMenuSubTrigger className={itemClassName}>\n                  <UserPlus />\n                  <span>Invite users</span>\n                  <ChevronRight data-chevron className=\"ml-auto size-4\" />\n                </DropdownMenuSubTrigger>\n              </DropdownMenuHighlightItem>\n\n              <DropdownMenuSubContent className=\"overflow-hidden min-w-[8rem] overflow-y-auto overflow-x-hidden border bg-background p-1 z-50\">\n                <DropdownMenuHighlightItem>\n                  <DropdownMenuItem className={itemClassName}>\n                    <Mail />\n                    <span>Email</span>\n                  </DropdownMenuItem>\n                </DropdownMenuHighlightItem>\n                <DropdownMenuHighlightItem>\n                  <DropdownMenuItem className={itemClassName}>\n                    <MessageSquare />\n                    <span>Message</span>\n                  </DropdownMenuItem>\n                </DropdownMenuHighlightItem>\n                <DropdownMenuSeparator className={separatorClassName} />\n                <DropdownMenuHighlightItem>\n                  <DropdownMenuItem className={itemClassName}>\n                    <PlusCircle />\n                    <span>More...</span>\n                  </DropdownMenuItem>\n                </DropdownMenuHighlightItem>\n              </DropdownMenuSubContent>\n            </DropdownMenuSub>\n            <DropdownMenuHighlightItem>\n              <DropdownMenuItem className={itemClassName}>\n                <Plus />\n                <span>New Team</span>\n                <DropdownMenuShortcut>⌘+T</DropdownMenuShortcut>\n              </DropdownMenuItem>\n            </DropdownMenuHighlightItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator className={separatorClassName} />\n          <DropdownMenuHighlightItem>\n            <DropdownMenuItem className={itemClassName}>\n              <LogOut />\n              <span>Log out</span>\n              <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>\n            </DropdownMenuItem>\n          </DropdownMenuHighlightItem>\n        </DropdownMenuHighlight>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/dropdown-menu/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-dropdown-menu';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        DropdownMenuContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-dropdown-menu',
  },
  'demo-primitives-radix-files': {
    name: 'demo-primitives-radix-files',
    description: 'Demo showing an animated radix files.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-files'],
    files: [
      {
        path: 'registry/demo/primitives/radix/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/files.tsx',
        content:
          'import {\n  File,\n  FileHighlight,\n  FileIcon,\n  FileLabel,\n  Files,\n  FilesHighlight,\n  Folder,\n  FolderContent,\n  FolderHeader,\n  FolderHighlight,\n  FolderIcon,\n  FolderItem,\n  FolderTrigger,\n} from \'@/components/animate-ui/primitives/radix/files\';\nimport {\n  FolderOpenIcon,\n  FolderIcon as LucideFolderIcon,\n  FileIcon as LucideFileIcon,\n} from \'lucide-react\';\n\nexport const FilesDemo = () => {\n  return (\n    <div className="relative size-full border bg-background overflow-auto">\n      <Files className="p-3" defaultOpen={[\'folder-1\']}>\n        <FilesHighlight className="bg-accent pointer-events-none">\n          <FolderItem value="folder-1">\n            <FolderHeader>\n              <FolderTrigger className="w-full text-start">\n                <FolderHighlight>\n                  <Folder className="flex items-center gap-2 p-2 pointer-events-none">\n                    <FolderIcon\n                      closeIcon={<LucideFolderIcon className="size-4.5" />}\n                      openIcon={<FolderOpenIcon className="size-4.5" />}\n                    />\n                    <FileLabel className="text-sm">Folder 1</FileLabel>\n                  </Folder>\n                </FolderHighlight>\n              </FolderTrigger>\n            </FolderHeader>\n\n            <div className="relative ml-8 before:absolute before:-left-3 before:inset-y-0 before:w-px before:h-full before:bg-border">\n              <FolderContent>\n                <FileHighlight>\n                  <File className="flex items-center gap-2 p-2 pointer-events-none">\n                    <FileIcon>\n                      <LucideFileIcon className="size-4.5" />\n                    </FileIcon>\n                    <FileLabel className="text-sm">File 1</FileLabel>\n                  </File>\n                </FileHighlight>\n\n                <Files defaultOpen={[\'folder-2\']}>\n                  <FolderItem value="folder-2">\n                    <FolderHeader>\n                      <FolderTrigger className="w-full text-start">\n                        <FolderHighlight>\n                          <Folder className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FolderIcon\n                              closeIcon={\n                                <LucideFolderIcon className="size-4.5" />\n                              }\n                              openIcon={<FolderOpenIcon className="size-4.5" />}\n                            />\n                            <FileLabel className="text-sm">Folder 2</FileLabel>\n                          </Folder>\n                        </FolderHighlight>\n                      </FolderTrigger>\n                    </FolderHeader>\n\n                    <div className="relative ml-8 before:absolute before:-left-3 before:inset-y-0 before:w-px before:h-full before:bg-border">\n                      <FolderContent>\n                        <FileHighlight>\n                          <File className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FileIcon>\n                              <LucideFileIcon className="size-4.5" />\n                            </FileIcon>\n                            <FileLabel className="text-sm">File 2</FileLabel>\n                          </File>\n                        </FileHighlight>\n                        <FileHighlight>\n                          <File className="flex items-center gap-2 p-2 pointer-events-none">\n                            <FileIcon>\n                              <LucideFileIcon className="size-4.5" />\n                            </FileIcon>\n                            <FileLabel className="text-sm">File 3</FileLabel>\n                          </File>\n                        </FileHighlight>\n                      </FolderContent>\n                    </div>\n                  </FolderItem>\n\n                  <FileHighlight>\n                    <File className="flex items-center gap-2 p-2 pointer-events-none">\n                      <FileIcon>\n                        <LucideFileIcon className="size-4.5" />\n                      </FileIcon>\n                      <FileLabel className="text-sm">File 4</FileLabel>\n                    </File>\n                  </FileHighlight>\n                </Files>\n              </FolderContent>\n            </div>\n          </FolderItem>\n\n          <FileHighlight>\n            <File className="flex items-center gap-2 p-2 pointer-events-none">\n              <FileIcon>\n                <LucideFileIcon className="size-4.5" />\n              </FileIcon>\n              <FileLabel className="text-sm">File 5</FileLabel>\n            </File>\n          </FileHighlight>\n        </FilesHighlight>\n      </Files>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/files/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-files',
  },
  'demo-primitives-radix-hover-card': {
    name: 'demo-primitives-radix-hover-card',
    description: 'Demo showing an animated radix hover card.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-hover-card',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/hover-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/hover-card.tsx',
        content:
          'import {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n} from \'@/components/animate-ui/primitives/radix/hover-card\';\n\ninterface RadixHoverCardDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport const RadixHoverCardDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixHoverCardDemoProps) => {\n  return (\n    <HoverCard>\n      <HoverCardTrigger asChild>\n        <a\n          className="size-12 border"\n          href="https://twitter.com/animate_ui"\n          target="_blank"\n          rel="noreferrer noopener"\n        >\n          <img\n            src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n            alt="Animate UI"\n          />\n        </a>\n      </HoverCardTrigger>\n      <HoverCardPortal>\n        <HoverCardContent\n          side={side}\n          sideOffset={sideOffset}\n          align={align}\n          alignOffset={alignOffset}\n          className="w-80 bg-background border p-4 z-50"\n        >\n          <div className="flex flex-col gap-4">\n            <img\n              className="size-16 rounded-full overflow-hidden border"\n              src="https://pbs.twimg.com/profile_images/1950218390741618688/72447Y7e_400x400.jpg"\n              alt="Animate UI"\n            />\n            <div className="flex flex-col gap-4">\n              <div>\n                <div className="font-bold">Animate UI</div>\n                <div className="text-sm text-muted-foreground">@animate_ui</div>\n              </div>\n              <div className="text-sm text-muted-foreground">\n                A fully animated, open-source component distribution built with\n                React, TypeScript, Tailwind CSS, and Motion.\n              </div>\n              <div className="flex gap-4">\n                <div className="flex gap-1 text-sm items-center">\n                  <div className="font-bold">0</div>{\' \'}\n                  <div className="text-muted-foreground">Following</div>\n                </div>\n                <div className="flex gap-1 text-sm items-center">\n                  <div className="font-bold">2,900</div>{\' \'}\n                  <div className="text-muted-foreground">Followers</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </HoverCardContent>\n      </HoverCardPortal>\n    </HoverCard>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/hover-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-hover-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        HoverCardContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-hover-card',
  },
  'demo-primitives-radix-popover': {
    name: 'demo-primitives-radix-popover',
    description: 'Demo showing an animated radix popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-popover'],
    files: [
      {
        path: 'registry/demo/primitives/radix/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/popover.tsx',
        content:
          'import {\n  Popover,\n  PopoverContent,\n  PopoverPortal,\n  PopoverTrigger,\n} from \'@/components/animate-ui/primitives/radix/popover\';\n\ninterface RadixPopoverDemoProps {\n  side?: \'top\' | \'bottom\' | \'left\' | \'right\';\n  sideOffset?: number;\n  align?: \'start\' | \'center\' | \'end\';\n  alignOffset?: number;\n}\n\nexport function RadixPopoverDemo({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixPopoverDemoProps) {\n  return (\n    <Popover>\n      <PopoverTrigger>Open popover</PopoverTrigger>\n      <PopoverPortal>\n        <PopoverContent\n          side={side}\n          sideOffset={sideOffset}\n          align={align}\n          alignOffset={alignOffset}\n          className="w-80 bg-background border p-4 z-50"\n        >\n          <div className="grid gap-4">\n            <div className="space-y-2">\n              <h4 className="font-medium leading-none">Dimensions</h4>\n              <p className="text-sm text-muted-foreground">\n                Set the dimensions for the layer.\n              </p>\n            </div>\n            <div className="grid gap-2">\n              <div className="grid grid-cols-3 items-center gap-4">\n                <label htmlFor="width" className="text-sm">\n                  Width\n                </label>\n                <input\n                  id="width"\n                  defaultValue="100%"\n                  className="col-span-2 h-8 p-2 border"\n                />\n              </div>\n              <div className="grid grid-cols-3 items-center gap-4">\n                <label htmlFor="maxWidth" className="text-sm">\n                  Max. width\n                </label>\n                <input\n                  id="maxWidth"\n                  defaultValue="300px"\n                  className="col-span-2 h-8 p-2 border"\n                />\n              </div>\n              <div className="grid grid-cols-3 items-center gap-4">\n                <label htmlFor="height" className="text-sm">\n                  Height\n                </label>\n                <input\n                  id="height"\n                  defaultValue="25px"\n                  className="col-span-2 h-8 p-2 border"\n                />\n              </div>\n              <div className="grid grid-cols-3 items-center gap-4">\n                <label htmlFor="maxHeight" className="text-sm">\n                  Max. height\n                </label>\n                <input\n                  id="maxHeight"\n                  defaultValue="none"\n                  className="col-span-2 h-8 p-2 border"\n                />\n              </div>\n            </div>\n          </div>\n        </PopoverContent>\n      </PopoverPortal>\n    </Popover>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        PopoverContent: {
          side: {
            value: 'bottom',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-popover',
  },
  'demo-primitives-radix-progress': {
    name: 'demo-primitives-radix-progress',
    description: 'Demo showing an animated radix progress.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-progress',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Progress,\n  ProgressIndicator,\n} from '@/components/animate-ui/primitives/radix/progress';\n\nexport const RadixProgressDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) return 100;\n        return prev + 25;\n      });\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  React.useEffect(() => {\n    if (progress >= 100) setTimeout(() => setProgress(0), 4000);\n  }, [progress]);\n\n  return (\n    <Progress value={progress} className=\"w-[300px] h-2 border overflow-hidden\">\n      <ProgressIndicator className=\"size-full flex-1 bg-primary\" />\n    </Progress>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-progress',
  },
  'demo-primitives-radix-radio-group': {
    name: 'demo-primitives-radix-radio-group',
    description: 'Demo showing an animated radix radio group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-radio-group',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/radio-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/radio-group.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport {\n  RadioGroup,\n  RadioGroupItem,\n  RadioGroupIndicator,\n} from \'@/components/animate-ui/primitives/radix/radio-group\';\n\nconst itemClassName =\n  \'size-5 rounded-full flex items-center justify-center border\';\nconst indicatorClassName = \'size-3 bg-primary rounded-full\';\n\nexport function RadioGroupDemo() {\n  return (\n    <RadioGroup defaultValue="default" className="flex flex-col gap-2">\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="default" id="r1" className={itemClassName}>\n          <RadioGroupIndicator className={indicatorClassName} />\n        </RadioGroupItem>\n        <Label htmlFor="r1">Default</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="comfortable" id="r2" className={itemClassName}>\n          <RadioGroupIndicator className={indicatorClassName} />\n        </RadioGroupItem>\n        <Label htmlFor="r2">Comfortable</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="compact" id="r3" className={itemClassName}>\n          <RadioGroupIndicator className={indicatorClassName} />\n        </RadioGroupItem>\n        <Label htmlFor="r3">Compact</Label>\n      </div>\n    </RadioGroup>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/radio-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-radio-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-radio-group',
  },
  'demo-primitives-radix-sheet': {
    name: 'demo-primitives-radix-sheet',
    description: 'Demo showing an animated radix sheet.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-sheet'],
    files: [
      {
        path: 'registry/demo/primitives/radix/sheet/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/sheet.tsx',
        content:
          'import {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetDescription,\n  SheetFooter,\n  SheetHeader,\n  SheetOverlay,\n  SheetPortal,\n  SheetTitle,\n  SheetTrigger,\n} from \'@/components/animate-ui/primitives/radix/sheet\';\n\ninterface RadixSheetDemoProps {\n  side: \'right\' | \'left\' | \'top\' | \'bottom\';\n}\nexport const RadixSheetDemo = ({ side }: RadixSheetDemoProps) => {\n  return (\n    <Sheet>\n      <SheetTrigger>Open</SheetTrigger>\n      <SheetPortal>\n        <SheetOverlay className="fixed inset-0 z-50 bg-black/80" />\n\n        <SheetContent\n          side={side}\n          className="gap-4 bg-background p-6 w-full size-full data-[side=right]:w-[350px] data-[side=left]:w-[350px] data-[side=top]:h-[350px] data-[side=bottom]:h-[350px] z-50"\n        >\n          <SheetHeader>\n            <SheetTitle className="text-xl">Edit profile</SheetTitle>\n            <SheetDescription className="text-sm text-muted-foreground">\n              Make changes to your profile here. Click save when you&apos;re\n              done.\n            </SheetDescription>\n          </SheetHeader>\n          <div className="grid gap-4 py-4">\n            <div className="flex flex-col gap-2">\n              <label htmlFor="name">Name</label>\n              <input\n                id="name"\n                placeholder="Pedro Duarte"\n                className="p-2 border"\n              />\n            </div>\n            <div className="flex flex-col gap-2">\n              <label htmlFor="username">Username</label>\n              <input\n                id="username"\n                placeholder="@peduarte"\n                className="p-2 border"\n              />\n            </div>\n          </div>\n          <SheetFooter>\n            <SheetClose\n              type="submit"\n              className="w-full p-2 text-center bg-primary text-primary-foreground"\n            >\n              Save changes\n            </SheetClose>\n          </SheetFooter>\n        </SheetContent>\n      </SheetPortal>\n    </Sheet>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/sheet/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-sheet';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        SheetContent: {
          side: {
            value: 'right',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-sheet',
  },
  'demo-primitives-radix-switch': {
    name: 'demo-primitives-radix-switch',
    description: 'Demo showing an animated radix switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-switch'],
    files: [
      {
        path: 'registry/demo/primitives/radix/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/switch.tsx',
        content:
          'import { Switch, SwitchThumb } from \'@/components/animate-ui/primitives/radix/switch\';\nimport { cn } from \'@/lib/utils\';\n\nexport const RadixSwitchDemo = () => {\n  return (\n    <div className="flex items-center space-x-2">\n      <label htmlFor="airplane-mode">Airplane mode</label>\n      <Switch\n        className={cn(\n          \'relative flex p-0.5 h-6 w-10 items-center justify-start rounded-full border transition-colors\',\n          \'data-[state=checked]:bg-primary data-[state=checked]:justify-end\',\n        )}\n        defaultChecked\n        id="airplane-mode"\n      >\n        <SwitchThumb\n          className="rounded-full bg-accent h-full aspect-square"\n          pressedAnimation={{ width: 22 }}\n        />\n      </Switch>\n    </div>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-switch',
  },
  'demo-primitives-radix-tabs': {
    name: 'demo-primitives-radix-tabs',
    description: 'Demo showing an animated radix tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-tabs'],
    files: [
      {
        path: 'registry/demo/primitives/radix/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/tabs.tsx',
        content:
          'import {\n  Tabs,\n  TabsContent,\n  TabsContents,\n  TabsHighlight,\n  TabsHighlightItem,\n  TabsList,\n  TabsTrigger,\n} from \'@/components/animate-ui/primitives/radix/tabs\';\n\nexport function RadixTabsDemo() {\n  return (\n    <Tabs defaultValue="account" className="w-[500px]">\n      <TabsHighlight className="bg-background absolute z-0 inset-0">\n        <TabsList className="h-10 inline-flex p-1 bg-accent w-full">\n          <TabsHighlightItem value="account" className="flex-1">\n            <TabsTrigger\n              value="account"\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Account\n            </TabsTrigger>\n          </TabsHighlightItem>\n          <TabsHighlightItem value="password" className="flex-1">\n            <TabsTrigger\n              value="password"\n              className="h-full px-4 py-2 leading-0 w-full text-sm"\n            >\n              Password\n            </TabsTrigger>\n          </TabsHighlightItem>\n        </TabsList>\n      </TabsHighlight>\n      <TabsContents className="bg-background p-3 border border-t-0">\n        <TabsContent value="account" className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Make changes to your account here. Click save when you&apos;re done.\n          </p>\n\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="name" className="text-sm">\n                Name\n              </label>\n              <input\n                id="name"\n                defaultValue="Pedro Duarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="username" className="text-sm">\n                Username\n              </label>\n              <input\n                id="username"\n                defaultValue="@peduarte"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save changes\n          </button>\n        </TabsContent>\n        <TabsContent value="password" className="space-y-4">\n          <p className="text-sm text-muted-foreground">\n            Change your password here. After saving, you&apos;ll be logged out.\n          </p>\n          <div className="space-y-3">\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="current" className="text-sm">\n                Current password\n              </label>\n              <input\n                id="current"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="new" className="text-sm">\n                New password\n              </label>\n              <input\n                id="new"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n            <div className="space-y-1 flex flex-col">\n              <label htmlFor="confirm" className="text-sm">\n                Confirm password\n              </label>\n              <input\n                id="confirm"\n                type="password"\n                className="border px-3 py-1.5 text-sm"\n              />\n            </div>\n          </div>\n\n          <button className="bg-primary text-primary-foreground px-3 py-1.5 text-sm">\n            Save password\n          </button>\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n}',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-tabs',
  },
  'demo-primitives-radix-toggle': {
    name: 'demo-primitives-radix-toggle',
    description: 'Demo showing an animated radix toggle.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-toggle'],
    files: [
      {
        path: 'registry/demo/primitives/radix/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/toggle.tsx',
        content:
          'import {\n  Toggle,\n  ToggleHighlight,\n  ToggleItem,\n} from \'@/components/animate-ui/primitives/radix/toggle\';\nimport { Bold } from \'lucide-react\';\n\nexport const RadixToggleDemo = () => {\n  return (\n    <Toggle className="relative size-8 flex items-center justify-center">\n      <ToggleHighlight className="bg-accent" />\n      <ToggleItem>\n        <Bold className="h-4 w-4" />\n      </ToggleItem>\n    </Toggle>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-toggle',
  },
  'demo-primitives-radix-toggle-group': {
    name: 'demo-primitives-radix-toggle-group',
    description: 'Demo showing an animated radix toggle group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-toggle-group',
    ],
    files: [
      {
        path: 'registry/demo/primitives/radix/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/toggle-group.tsx',
        content:
          'import {\n  ToggleGroup,\n  ToggleGroupItem,\n  ToggleGroupHighlight,\n  ToggleGroupHighlightItem,\n} from \'@/components/animate-ui/primitives/radix/toggle-group\';\nimport { Bold, Italic, Underline } from \'lucide-react\';\nimport { useEffect, useState } from \'react\';\n\ninterface RadixToggleGroupDemoProps {\n  type: \'single\' | \'multiple\';\n}\n\nexport const RadixToggleGroupDemo = ({ type }: RadixToggleGroupDemoProps) => {\n  const [value, setValue] = useState<string | string[] | undefined>(undefined);\n\n  useEffect(() => {\n    if (type === \'single\') {\n      setValue(\'bold\');\n    } else {\n      setValue([\'bold\']);\n    }\n  }, [type]);\n\n  return type === \'single\' ? (\n    <ToggleGroup\n      type="single"\n      value={value as string}\n      onValueChange={(value) => setValue(value as string)}\n      className="flex gap-2"\n    >\n      <ToggleGroupHighlight className="bg-accent">\n        <ToggleGroupHighlightItem value="bold">\n          <ToggleGroupItem\n            value="bold"\n            aria-label="Toggle bold"\n            className="size-8 flex items-center justify-center"\n          >\n            <Bold className="h-4 w-4" />\n          </ToggleGroupItem>\n        </ToggleGroupHighlightItem>\n        <ToggleGroupHighlightItem value="italic">\n          <ToggleGroupItem\n            value="italic"\n            aria-label="Toggle italic"\n            className="size-8 flex items-center justify-center"\n          >\n            <Italic className="h-4 w-4" />\n          </ToggleGroupItem>\n        </ToggleGroupHighlightItem>\n        <ToggleGroupHighlightItem value="underline">\n          <ToggleGroupItem\n            value="underline"\n            aria-label="Toggle underline"\n            className="size-8 flex items-center justify-center"\n          >\n            <Underline className="h-4 w-4" />\n          </ToggleGroupItem>\n        </ToggleGroupHighlightItem>\n      </ToggleGroupHighlight>\n    </ToggleGroup>\n  ) : (\n    <ToggleGroup\n      type="multiple"\n      value={value as string[]}\n      onValueChange={(value) => setValue(value as string[])}\n      className="flex gap-2"\n    >\n      <ToggleGroupHighlightItem value="bold" className="bg-accent">\n        <ToggleGroupItem\n          value="bold"\n          aria-label="Toggle bold"\n          className="size-8 flex items-center justify-center"\n        >\n          <Bold className="h-4 w-4" />\n        </ToggleGroupItem>\n      </ToggleGroupHighlightItem>\n      <ToggleGroupHighlightItem value="italic" className="bg-accent">\n        <ToggleGroupItem\n          value="italic"\n          aria-label="Toggle italic"\n          className="size-8 flex items-center justify-center"\n        >\n          <Italic className="h-4 w-4" />\n        </ToggleGroupItem>\n      </ToggleGroupHighlightItem>\n      <ToggleGroupHighlightItem value="underline" className="bg-accent">\n        <ToggleGroupItem\n          value="underline"\n          aria-label="Toggle underline"\n          className="size-8 flex items-center justify-center"\n        >\n          <Underline className="h-4 w-4" />\n        </ToggleGroupItem>\n      </ToggleGroupHighlightItem>\n    </ToggleGroup>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ToggleGroup: {
          type: {
            value: 'single',
            options: { single: 'single', multiple: 'multiple' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-toggle-group',
  },
  'demo-primitives-radix-tooltip': {
    name: 'demo-primitives-radix-tooltip',
    description: 'Demo showing an animated radix tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-radix-tooltip'],
    files: [
      {
        path: 'registry/demo/primitives/radix/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/radix/tooltip.tsx',
        content:
          "import {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipPortal,\n  TooltipTrigger,\n} from '@/components/animate-ui/primitives/radix/tooltip';\n\ninterface RadixTooltipDemoProps {\n  side?: 'top' | 'bottom' | 'left' | 'right';\n  sideOffset?: number;\n  align?: 'start' | 'center' | 'end';\n  alignOffset?: number;\n}\n\nexport const RadixTooltipDemo = ({\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n}: RadixTooltipDemoProps) => {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger>Hover</TooltipTrigger>\n        <TooltipPortal>\n          <TooltipContent\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n            className=\"bg-primary text-primary-foreground px-2 py-1 text-sm z-50\"\n          >\n            <p>Add to library</p>\n          </TooltipContent>\n        </TooltipPortal>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/radix/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-radix-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TooltipContent: {
          side: {
            value: 'top',
            options: {
              top: 'top',
              bottom: 'bottom',
              left: 'left',
              right: 'right',
            },
          },
          sideOffset: { value: 4 },
          align: {
            value: 'center',
            options: { start: 'start', center: 'center', end: 'end' },
          },
          alignOffset: { value: 0 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-radix-tooltip',
  },
  'demo-primitives-texts-counting-number': {
    name: 'demo-primitives-texts-counting-number',
    description: 'Demo showing an animated counting number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-counting-number',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/counting-number/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/texts/counting-number.tsx',
        content:
          'import { CountingNumber } from \'@/components/animate-ui/primitives/texts/counting-number\';\n\ninterface CountingFromNumberDemoProps {\n  number: number;\n  fromNumber: number;\n  padStart: boolean;\n  decimalSeparator: string;\n  decimalPlaces: number;\n  delay: number;\n}\n\nexport const CountingFromNumberDemo = ({\n  number,\n  fromNumber,\n  padStart,\n  decimalSeparator,\n  decimalPlaces,\n  delay,\n}: CountingFromNumberDemoProps) => {\n  return (\n    <CountingNumber\n      key={delay}\n      delay={delay}\n      number={number}\n      fromNumber={fromNumber}\n      padStart={padStart}\n      decimalSeparator={decimalSeparator}\n      decimalPlaces={decimalPlaces}\n      className="text-4xl font-semibold"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/counting-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-counting-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        CountingNumber: {
          number: { value: 2025 },
          fromNumber: { value: 0 },
          padStart: { value: false },
          decimalSeparator: { value: '.' },
          decimalPlaces: { value: 0 },
          delay: { value: 0, min: 0, max: 3000, step: 100 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-counting-number',
  },
  'demo-primitives-texts-gradient': {
    name: 'demo-primitives-texts-gradient',
    description: 'Demo showing an animated gradient text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-gradient',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/gradient/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/gradient.tsx',
        content:
          'import { GradientText } from \'@/components/animate-ui/primitives/texts/gradient\';\n\ninterface GradientTextDemoProps {\n  neon: boolean;\n}\n\nexport const GradientTextDemo = ({ neon }: GradientTextDemoProps) => {\n  return (\n    <GradientText\n      className="text-4xl font-semibold"\n      text="Gradient Text"\n      neon={neon}\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/gradient/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-gradient';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = { GradientText: { neon: { value: false } } };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-gradient',
  },
  'demo-primitives-texts-highlight': {
    name: 'demo-primitives-texts-highlight',
    description: 'Demo showing an animated highlight text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-highlight',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/highlight/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/highlight.tsx',
        content:
          'import { HighlightText } from \'@/components/animate-ui/primitives/texts/highlight\';\n\ninterface HighlightTextDemoProps {\n  delay: number;\n}\n\nexport const HighlightTextDemo = ({ delay }: HighlightTextDemoProps) => {\n  return (\n    <HighlightText\n      key={delay}\n      delay={delay}\n      className="text-4xl font-semibold bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-500 dark:to-purple-500"\n      text="Highlight Text"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/highlight/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-highlight';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        HighlightText: { delay: { value: 0, min: 0, max: 3000, step: 100 } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-highlight',
  },
  'demo-primitives-texts-rolling': {
    name: 'demo-primitives-texts-rolling',
    description: 'Demo showing an animated rolling text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-texts-rolling'],
    files: [
      {
        path: 'registry/demo/primitives/texts/rolling/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/rolling.tsx',
        content:
          'import { RollingText } from \'@/components/animate-ui/primitives/texts/rolling\';\n\ninterface RollingTextDemoProps {\n  delay: number;\n}\n\nexport const RollingTextDemo = ({ delay }: RollingTextDemoProps) => {\n  return (\n    <RollingText\n      key={delay}\n      delay={delay}\n      className="text-4xl font-semibold"\n      text="Rolling Text"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/rolling/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-rolling';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        RollingText: { delay: { value: 0, min: 0, max: 3000, step: 100 } },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-rolling',
  },
  'demo-primitives-texts-rotating': {
    name: 'demo-primitives-texts-rotating',
    description: 'Demo showing an animated rotating text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-rotating',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/rotating/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/rotating.tsx',
        content:
          "import {\n  RotatingText,\n  RotatingTextContainer,\n} from '@/components/animate-ui/primitives/texts/rotating';\n\ninterface RotatingTextDemoProps {\n  delay: number;\n  y: number;\n  duration: number;\n}\n\nexport const RotatingTextDemo = ({\n  delay,\n  y,\n  duration,\n}: RotatingTextDemoProps) => {\n  return (\n    <RotatingTextContainer\n      key={delay}\n      delay={delay}\n      y={y}\n      duration={duration}\n      className=\"text-4xl font-semibold\"\n      text={['Rotating', 'Text', 'Demo']}\n    >\n      <RotatingText />\n    </RotatingTextContainer>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/rotating/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-rotating';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        RotatingText: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          y: { value: -50, min: -100, max: 100, step: 10 },
          duration: { value: 2000, min: 1000, max: 5000, step: 100 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-rotating',
  },
  'demo-primitives-texts-scrolling-number': {
    name: 'demo-primitives-texts-scrolling-number',
    description: 'Demo showing an animated scrolling number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-scrolling-number',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/scrolling-number/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/texts/scrolling-number.tsx',
        content:
          "'use client';\n\nimport React from 'react';\n\nimport {\n  ScrollingNumberContainer,\n  ScrollingNumber,\n  ScrollingNumberHighlight,\n  ScrollingNumberItems,\n  type ScrollingNumberDirection,\n} from '@/components/animate-ui/primitives/texts/scrolling-number';\n\ninterface ScrollingNumberDemoProps {\n  direction: ScrollingNumberDirection;\n  delay: number;\n}\n\nexport const ScrollingNumberDemo = ({\n  direction = 'btt',\n  delay = 1000,\n}: ScrollingNumberDemoProps) => {\n  const isVertical = direction === 'btt' || direction === 'ttb';\n\n  return (\n    <ScrollingNumberContainer\n      key={direction}\n      number={1000}\n      step={100}\n      className={isVertical ? 'w-18' : 'h-10'}\n      itemsSize={isVertical ? 40 : 75}\n      direction={direction}\n    >\n      <ScrollingNumber delay={delay}>\n        <ScrollingNumberItems className=\"flex items-center justify-center\" />\n      </ScrollingNumber>\n      <ScrollingNumberHighlight className=\"bg-accent size-full\" />\n    </ScrollingNumberContainer>\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/scrolling-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-scrolling-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ScrollingNumberContainer: {
          direction: {
            value: 'btt',
            options: { btt: 'btt', ttb: 'ttb', ltr: 'ltr', rtl: 'rtl' },
          },
        },
        ScrollingNumber: {
          delay: { value: 1000, min: 0, max: 3000, step: 100 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-scrolling-number',
  },
  'demo-primitives-texts-shimmering': {
    name: 'demo-primitives-texts-shimmering',
    description: 'Demo showing an animated shimmering text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-shimmering',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/shimmering/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/shimmering.tsx',
        content:
          'import { ShimmeringText } from \'@/components/animate-ui/primitives/texts/shimmering\';\n\ninterface ShimmeringTextDemoProps {\n  wave: boolean;\n  duration: number;\n}\n\nexport const ShimmeringTextDemo = ({\n  wave,\n  duration,\n}: ShimmeringTextDemoProps) => {\n  return (\n    <ShimmeringText\n      key={`${wave}-${duration}`}\n      className="text-4xl font-semibold"\n      wave={wave}\n      duration={duration}\n      text="Shimmering Text"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/shimmering/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-shimmering';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        ShimmeringText: {
          wave: { value: false },
          duration: { value: 1, min: 0.1, max: 3, step: 0.1 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-shimmering',
  },
  'demo-primitives-texts-sliding-number': {
    name: 'demo-primitives-texts-sliding-number',
    description: 'Demo showing an animated sliding number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-sliding-number',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/sliding-number/index.tsx',
        type: 'registry:ui',
        target:
          'components/animate-ui/demo/primitives/texts/sliding-number.tsx',
        content:
          'import { SlidingNumber } from \'@/components/animate-ui/primitives/texts/sliding-number\';\n\ninterface SlidingNumberDemoProps {\n  number: number;\n  fromNumber: boolean;\n  padStart: boolean;\n  decimalSeparator: string;\n  decimalPlaces: number;\n  delay: number;\n}\n\nexport const SlidingNumberDemo = ({\n  number,\n  fromNumber,\n  padStart,\n  decimalSeparator,\n  decimalPlaces,\n  delay,\n}: SlidingNumberDemoProps) => {\n  return (\n    <SlidingNumber\n      key={`${delay}-${fromNumber}`}\n      delay={delay}\n      number={number}\n      fromNumber={fromNumber ? 0 : undefined}\n      padStart={padStart}\n      decimalSeparator={decimalSeparator}\n      decimalPlaces={decimalPlaces}\n      className="text-4xl font-semibold"\n    />\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/sliding-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-sliding-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        SlidingNumber: {
          number: { value: 2025 },
          fromNumber: { value: true },
          padStart: { value: true },
          decimalSeparator: { value: '.' },
          decimalPlaces: { value: 0 },
          delay: { value: 0, min: 0, max: 3000, step: 100 },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-sliding-number',
  },
  'demo-primitives-texts-splitting': {
    name: 'demo-primitives-texts-splitting',
    description: 'Demo showing an animated splitting text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-texts-splitting',
    ],
    files: [
      {
        path: 'registry/demo/primitives/texts/splitting/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/splitting.tsx',
        content:
          "import {\n  SplittingText,\n  type SplittingTextProps,\n} from '@/components/animate-ui/primitives/texts/splitting';\nimport { cn } from '@/lib/utils';\n\nconst ANIMATIONS: Record<\n  string,\n  {\n    initial: SplittingTextProps['initial'];\n    animate: SplittingTextProps['animate'];\n    transition: SplittingTextProps['transition'];\n  } | null\n> = {\n  default: null,\n  vibe: {\n    initial: { y: 50, scale: 0.5, opacity: 0, x: 50, rotate: 90 },\n    animate: { y: 0, scale: 1, opacity: 1, x: 0, rotate: 0 },\n    transition: { duration: 0.5, ease: 'easeOut' },\n  },\n  writing: {\n    initial: { y: 10, opacity: 0 },\n    animate: { y: 0, opacity: 1 },\n    transition: { type: 'spring', bounce: 0, duration: 2 },\n  },\n};\n\ninterface SplittingTextDemoProps {\n  type: SplittingTextProps['type'];\n  delay: number;\n  animation: keyof typeof ANIMATIONS;\n}\n\nexport const SplittingTextDemo = ({\n  type,\n  delay,\n  animation,\n}: SplittingTextDemoProps) => {\n  return (\n    // @ts-expect-error\n    <SplittingText\n      key={`${type}-${delay}-${animation}`}\n      className={cn('text-4xl font-semibold', type === 'lines' && 'text-xl')}\n      type={type}\n      delay={delay}\n      initial={ANIMATIONS[animation]?.initial}\n      animate={ANIMATIONS[animation]?.animate}\n      transition={ANIMATIONS[animation]?.transition}\n      text={\n        type === 'lines'\n          ? [\n              'Introducing Splitting Text component',\n              'Made with Motion. Highly customizable and easy to use.',\n            ]\n          : 'Splitting Text'\n      }\n    />\n  );\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/splitting/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-splitting';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        SplittingText: {
          type: {
            value: 'chars',
            options: { chars: 'chars', words: 'words', lines: 'lines' },
          },
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          animation: {
            value: 'default',
            options: { default: 'default', vibe: 'vibe', writing: 'writing' },
          },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-splitting',
  },
  'demo-primitives-texts-typing': {
    name: 'demo-primitives-texts-typing',
    description: 'Demo showing an animated typing text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-texts-typing'],
    files: [
      {
        path: 'registry/demo/primitives/texts/typing/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/demo/primitives/texts/typing.tsx',
        content:
          'import {\n  TypingText,\n  TypingTextCursor,\n} from \'@/components/animate-ui/primitives/texts/typing\';\n\ninterface TypingTextDemoProps {\n  delay: number;\n  holdDelay: number;\n  loop: boolean;\n  cursor: boolean;\n}\n\nexport const TypingTextDemo = ({\n  delay,\n  holdDelay,\n  loop,\n  cursor,\n}: TypingTextDemoProps) => {\n  return (\n    <TypingText\n      key={`${delay}-${holdDelay}-${loop}-${cursor}`}\n      delay={delay}\n      holdDelay={holdDelay}\n      className="text-4xl font-semibold"\n      text="Typing Text component made with Motion. Highly customizable and easy to use."\n      loop={loop}\n    >\n      {cursor && <TypingTextCursor className="!h-8 !w-1 rounded-full ml-1" />}\n    </TypingText>\n  );\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/demo/primitives/texts/typing/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'demo-primitives-texts-typing';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {
        TypingText: {
          delay: { value: 0, min: 0, max: 3000, step: 100 },
          holdDelay: { value: 1000, min: 0, max: 3000, step: 100 },
          loop: { value: false },
          cursor: { value: true },
        },
      };
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/demo-primitives-texts-typing',
  },
  'hooks-use-controlled-state': {
    name: 'hooks-use-controlled-state',
    description: 'A hook that allows you to control a state.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-controlled-state/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/hooks/use-controlled-state.tsx',
        content:
          "import * as React from 'react';\n\ninterface CommonControlledStateProps<T> {\n  value?: T;\n  defaultValue?: T;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useControlledState<T, Rest extends any[] = []>(\n  props: CommonControlledStateProps<T> & {\n    onChange?: (value: T, ...args: Rest) => void;\n  },\n): readonly [T, (next: T, ...args: Rest) => void] {\n  const { value, defaultValue, onChange } = props;\n\n  const [state, setInternalState] = React.useState<T>(\n    value !== undefined ? value : (defaultValue as T),\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined) setInternalState(value);\n  }, [value]);\n\n  const setState = React.useCallback(\n    (next: T, ...args: Rest) => {\n      setInternalState(next);\n      onChange?.(next, ...args);\n    },\n    [onChange],\n  );\n\n  return [state, setState] as const;\n}",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/hooks/use-controlled-state/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'hooks-use-controlled-state';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/hooks-use-controlled-state',
  },
  'hooks-use-data-state': {
    name: 'hooks-use-data-state',
    description: 'A hook that allows you to get the data-state of an element.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-data-state/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/hooks/use-data-state.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\ntype DataStateValue = string | boolean | null;\n\nfunction parseDatasetValue(value: string | null): DataStateValue {\n  if (value === null) return null;\n  if (value === '' || value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n}\n\nfunction useDataState<T extends HTMLElement = HTMLElement>(\n  key: string,\n  forwardedRef?: React.Ref<T | null>,\n  onChange?: (value: DataStateValue) => void,\n): [DataStateValue, React.RefObject<T | null>] {\n  const localRef = React.useRef<T | null>(null);\n  React.useImperativeHandle(forwardedRef, () => localRef.current as T);\n\n  const getSnapshot = (): DataStateValue => {\n    const el = localRef.current;\n    return el ? parseDatasetValue(el.getAttribute(`data-${key}`)) : null;\n  };\n\n  const subscribe = (callback: () => void) => {\n    const el = localRef.current;\n    if (!el) return () => {};\n    const observer = new MutationObserver((records) => {\n      for (const record of records) {\n        if (record.attributeName === `data-${key}`) {\n          callback();\n          break;\n        }\n      }\n    });\n    observer.observe(el, {\n      attributes: true,\n      attributeFilter: [`data-${key}`],\n    });\n    return () => observer.disconnect();\n  };\n\n  const value = React.useSyncExternalStore(subscribe, getSnapshot);\n\n  React.useEffect(() => {\n    if (onChange) onChange(value);\n  }, [value, onChange]);\n\n  return [value, localRef];\n}\n\nexport { useDataState, type DataStateValue };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/hooks/use-data-state/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'hooks-use-data-state';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/hooks-use-data-state',
  },
  'hooks-use-is-in-view': {
    name: 'hooks-use-is-in-view',
    description: 'A hook that allows you to check if an element is in view.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-is-in-view/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/hooks/use-is-in-view.tsx',
        content:
          "import * as React from 'react';\nimport { useInView, type UseInViewOptions } from 'motion/react';\n\ninterface UseIsInViewOptions {\n  inView?: boolean;\n  inViewOnce?: boolean;\n  inViewMargin?: UseInViewOptions['margin'];\n}\n\nfunction useIsInView<T extends HTMLElement = HTMLElement>(\n  ref: React.Ref<T>,\n  options: UseIsInViewOptions = {},\n) {\n  const { inView, inViewOnce = false, inViewMargin = '0px' } = options;\n  const localRef = React.useRef<T>(null);\n  React.useImperativeHandle(ref, () => localRef.current as T);\n  const inViewResult = useInView(localRef, {\n    once: inViewOnce,\n    margin: inViewMargin,\n  });\n  const isInView = !inView || inViewResult;\n  return { ref: localRef, isInView };\n}\n\nexport { useIsInView, type UseIsInViewOptions };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/hooks/use-is-in-view/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'hooks-use-is-in-view';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/hooks-use-is-in-view',
  },
  'hooks-use-motion-value-state': {
    name: 'hooks-use-motion-value-state',
    description: 'A hook that allows you to use a motion value state.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-motion-value-state/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/hooks/use-motion-value-state.tsx',
        content:
          "import * as React from 'react';\nimport { type MotionValue } from 'motion/react';\n\nfunction useMotionValueState(motionValue: MotionValue): number {\n  return React.useSyncExternalStore(\n    (callback) => {\n      const unsub = motionValue.on('change', callback);\n      return unsub;\n    },\n    () => motionValue.get(),\n    () => motionValue.get(),\n  );\n}\n\nexport { useMotionValueState };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/hooks/use-motion-value-state/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'hooks-use-motion-value-state';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/hooks-use-motion-value-state',
  },
  'hooks-use-strict-context': {
    name: 'hooks-use-strict-context',
    description: 'A hook that allows you to create a strict context.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-strict-context/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/hooks/use-strict-context.tsx',
        content:
          "import * as React from 'react';\n\nfunction getStrictContext<T>(\n  name?: string,\n): readonly [\n  ({\n    value,\n    children,\n  }: {\n    value: T;\n    children?: React.ReactNode;\n  }) => React.JSX.Element,\n  () => T,\n] {\n  const Context = React.createContext<T | undefined>(undefined);\n\n  const Provider = ({\n    value,\n    children,\n  }: {\n    value: T;\n    children?: React.ReactNode;\n  }) => <Context.Provider value={value}>{children}</Context.Provider>;\n\n  const useSafeContext = () => {\n    const ctx = React.useContext(Context);\n    if (ctx === undefined) {\n      throw new Error(`useContext must be used within ${name ?? 'a Provider'}`);\n    }\n    return ctx;\n  };\n\n  return [Provider, useSafeContext] as const;\n}\n\nexport { getStrictContext };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/hooks/use-strict-context/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'hooks-use-strict-context';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/hooks-use-strict-context',
  },
  'primitives-animate-avatar-group': {
    name: 'primitives-animate-avatar-group',
    description:
      'An animated avatar group that displays overlapping user images and smoothly shifts each avatar forward on hover to highlight it.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-tooltip',
    ],
    files: [
      {
        path: 'registry/primitives/animate/avatar-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/avatar-group.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion, type Transition } from 'motion/react';\n\nimport {\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipArrow,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipContentProps,\n  type TooltipArrowProps,\n} from '@/components/animate-ui/primitives/animate/tooltip';\n\ntype AvatarProps = Omit<HTMLMotionProps<'div'>, 'translate'> & {\n  children: React.ReactNode;\n  zIndex: number;\n  translate?: string | number;\n} & Omit<TooltipProps, 'children'>;\n\nfunction AvatarContainer({\n  zIndex,\n  translate,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n  ...props\n}: AvatarProps) {\n  return (\n    <Tooltip\n      side={side}\n      sideOffset={sideOffset}\n      align={align}\n      alignOffset={alignOffset}\n    >\n      <TooltipTrigger asChild>\n        <motion.div\n          data-slot=\"avatar-container\"\n          initial=\"initial\"\n          whileHover=\"hover\"\n          whileTap=\"hover\"\n          style={{ position: 'relative', zIndex }}\n        >\n          <motion.div\n            variants={{\n              initial: { y: 0 },\n              hover: { y: translate },\n            }}\n            {...props}\n          />\n        </motion.div>\n      </TooltipTrigger>\n    </Tooltip>\n  );\n}\n\ntype AvatarGroupProps = Omit<React.ComponentProps<'div'>, 'translate'> & {\n  children: React.ReactElement[];\n  invertOverlap?: boolean;\n  translate?: string | number;\n  transition?: Transition;\n  tooltipTransition?: Transition;\n} & Omit<TooltipProviderProps, 'children'> &\n  Omit<TooltipProps, 'children'>;\n\nfunction AvatarGroup({\n  ref,\n  children,\n  transition = { type: 'spring', stiffness: 300, damping: 17 },\n  invertOverlap = false,\n  translate = '-30%',\n  openDelay = 0,\n  closeDelay = 0,\n  side = 'top',\n  sideOffset = 25,\n  align = 'center',\n  alignOffset = 0,\n  tooltipTransition = { type: 'spring', stiffness: 300, damping: 35 },\n  style,\n  ...props\n}: AvatarGroupProps) {\n  return (\n    <TooltipProvider\n      openDelay={openDelay}\n      closeDelay={closeDelay}\n      transition={tooltipTransition}\n    >\n      <div\n        ref={ref}\n        data-slot=\"avatar-group\"\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          ...style,\n        }}\n        {...props}\n      >\n        {children?.map((child, index) => (\n          <AvatarContainer\n            key={index}\n            zIndex={\n              invertOverlap ? React.Children.count(children) - index : index\n            }\n            transition={transition}\n            translate={translate}\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n          >\n            {child}\n          </AvatarContainer>\n        ))}\n      </div>\n    </TooltipProvider>\n  );\n}\n\ntype AvatarGroupTooltipProps = TooltipContentProps;\n\nfunction AvatarGroupTooltip(props: AvatarGroupTooltipProps) {\n  return <TooltipContent {...props} />;\n}\n\ntype AvatarGroupTooltipArrowProps = TooltipArrowProps;\n\nfunction AvatarGroupTooltipArrow(props: AvatarGroupTooltipArrowProps) {\n  return <TooltipArrow {...props} />;\n}\n\nexport {\n  AvatarGroup,\n  AvatarGroupTooltip,\n  AvatarGroupTooltipArrow,\n  type AvatarGroupProps,\n  type AvatarGroupTooltipProps,\n  type AvatarGroupTooltipArrowProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/avatar-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-avatar-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-avatar-group',
  },
  'primitives-animate-code-block': {
    name: 'primitives-animate-code-block',
    description:
      'A code block component that animates the code as it is written.',
    type: 'registry:ui',
    dependencies: ['shiki'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/animate/code-block/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/code-block.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\ntype CodeBlockProps = React.ComponentProps<'div'> & {\n  code: string;\n  lang: string;\n  theme?: 'light' | 'dark';\n  themes?: { light: string; dark: string };\n  writing?: boolean;\n  duration?: number;\n  delay?: number;\n  onDone?: () => void;\n  onWrite?: (info: { index: number; length: number; done: boolean }) => void;\n  scrollContainerRef?: React.RefObject<HTMLElement | null>;\n} & UseIsInViewOptions;\n\nfunction CodeBlock({\n  ref,\n  code,\n  lang,\n  theme = 'light',\n  themes = {\n    light: 'github-light',\n    dark: 'github-dark',\n  },\n  writing = false,\n  duration = 5000,\n  delay = 0,\n  onDone,\n  onWrite,\n  scrollContainerRef,\n  inView = false,\n  inViewOnce = true,\n  inViewMargin = '0px',\n  ...props\n}: CodeBlockProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const [visibleCode, setVisibleCode] = React.useState('');\n  const [highlightedCode, setHighlightedCode] = React.useState('');\n  const [isDone, setIsDone] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!visibleCode.length || !isInView) return;\n\n    const loadHighlightedCode = async () => {\n      try {\n        const { codeToHtml } = await import('shiki');\n\n        const highlighted = await codeToHtml(visibleCode, {\n          lang,\n          themes,\n          defaultColor: theme,\n        });\n\n        setHighlightedCode(highlighted);\n      } catch (e) {\n        console.error(`Language \"${lang}\" could not be loaded.`, e);\n      }\n    };\n\n    loadHighlightedCode();\n  }, [lang, themes, writing, isInView, duration, delay, visibleCode]);\n\n  React.useEffect(() => {\n    if (!writing) {\n      setVisibleCode(code);\n      onDone?.();\n      onWrite?.({ index: code.length, length: code.length, done: true });\n      return;\n    }\n\n    if (!code.length || !isInView) return;\n\n    const characters = Array.from(code);\n    let index = 0;\n    const totalDuration = duration;\n    const interval = totalDuration / characters.length;\n    let intervalId: NodeJS.Timeout;\n\n    const timeout = setTimeout(() => {\n      intervalId = setInterval(() => {\n        if (index < characters.length) {\n          setVisibleCode((prev) => {\n            const currentIndex = index;\n            index += 1;\n            onWrite?.({\n              index: currentIndex + 1,\n              length: characters.length,\n              done: false,\n            });\n            return prev + characters[currentIndex];\n          });\n          localRef.current?.scrollTo({\n            top: localRef.current?.scrollHeight,\n            behavior: 'smooth',\n          });\n        } else {\n          clearInterval(intervalId);\n          setIsDone(true);\n          onDone?.();\n          onWrite?.({\n            index: characters.length,\n            length: characters.length,\n            done: true,\n          });\n        }\n      }, interval);\n    }, delay);\n\n    return () => {\n      clearTimeout(timeout);\n      clearInterval(intervalId);\n    };\n  }, [code, duration, delay, isInView, writing, onDone, onWrite]);\n\n  React.useEffect(() => {\n    if (!writing || !isInView) return;\n    const el =\n      scrollContainerRef?.current ??\n      (localRef.current?.parentElement as HTMLElement | null) ??\n      (localRef.current as unknown as HTMLElement | null);\n\n    if (!el) return;\n\n    requestAnimationFrame(() => {\n      el.scrollTo({\n        top: el.scrollHeight,\n        behavior: 'smooth',\n      });\n    });\n  }, [highlightedCode, writing, isInView, scrollContainerRef]);\n\n  return (\n    <div\n      ref={localRef}\n      data-slot=\"code-block\"\n      data-writing={writing}\n      data-done={isDone}\n      dangerouslySetInnerHTML={{ __html: highlightedCode }}\n      {...props}\n    />\n  );\n}\n\nexport { CodeBlock, type CodeBlockProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/code-block/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-code-block';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-code-block',
  },
  'primitives-animate-counter': {
    name: 'primitives-animate-counter',
    description:
      'A numeric input control featuring increment and decrement buttons, smoothly animating number transitions using the SlidingNumber component.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/primitives-animate-sliding-number',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/animate/counter/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/counter.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Transition } from 'motion/react';\n\nimport {\n  SlidingNumber,\n  type SlidingNumberProps,\n} from '@/components/animate-ui/primitives/texts/sliding-number';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype CounterContextType = {\n  value: number;\n  setValue: (value: number) => void;\n};\n\nconst [CounterProvider, useCounter] =\n  getStrictContext<CounterContextType>('CounterContext');\n\ntype BaseCounterProps = HTMLMotionProps<'div'> & {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\ntype CounterControlProps = {\n  value?: number;\n  defaultValue?: number;\n  onValueChange?: (value: number) => void;\n};\n\ntype CounterProps = WithAsChild<BaseCounterProps & CounterControlProps>;\n\nfunction Counter({\n  value,\n  defaultValue = 0,\n  onValueChange,\n  transition = { type: 'spring', bounce: 0, stiffness: 300, damping: 30 },\n  asChild = false,\n  ...props\n}: CounterProps) {\n  const [number, setNumber] = useControlledState({\n    value,\n    defaultValue,\n    onChange: onValueChange,\n  });\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <CounterProvider value={{ value: number, setValue: setNumber }}>\n      <Component\n        data-slot=\"counter\"\n        layout\n        transition={transition}\n        {...props}\n      />\n    </CounterProvider>\n  );\n}\n\ntype CounterMinusButtonProps = WithAsChild<HTMLMotionProps<'button'>>;\n\nconst CounterMinusButton = ({\n  onClick,\n  asChild = false,\n  ...props\n}: CounterMinusButtonProps) => {\n  const { setValue, value } = useCounter();\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      data-slot=\"counter-minus-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n        setValue(value - 1);\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n};\n\ntype CounterPlusButtonProps = WithAsChild<HTMLMotionProps<'button'>>;\n\nconst CounterPlusButton = ({\n  onClick,\n  asChild = false,\n  ...props\n}: CounterPlusButtonProps) => {\n  const { setValue, value } = useCounter();\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      data-slot=\"counter-plus-button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n        setValue(value + 1);\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n};\n\ntype CounterNumberProps = Omit<SlidingNumberProps, 'number'>;\n\nconst CounterNumber = (props: CounterNumberProps) => {\n  const { value } = useCounter();\n\n  return <SlidingNumber data-slot=\"counter-number\" number={value} {...props} />;\n};\n\nexport {\n  Counter,\n  CounterMinusButton,\n  CounterPlusButton,\n  CounterNumber,\n  type CounterProps,\n  type CounterMinusButtonProps,\n  type CounterPlusButtonProps,\n  type CounterContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/counter/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-counter';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-counter',
  },
  'primitives-animate-cursor': {
    name: 'primitives-animate-cursor',
    description:
      'An animated cursor component that allows you to customize both the cursor and cursor follow elements with smooth animations.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/animate/cursor/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/cursor.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  AnimatePresence,\n  type HTMLMotionProps,\n  type SpringOptions,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype CursorContextType = {\n  cursorPos: { x: number; y: number };\n  active: boolean;\n  global: boolean;\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  cursorRef: React.RefObject<HTMLDivElement | null>;\n};\n\nconst [LocalCursorProvider, useCursor] =\n  getStrictContext<CursorContextType>('CursorContext');\n\ntype CursorProviderProps = {\n  children: React.ReactNode;\n  global?: boolean;\n};\n\nfunction CursorProvider({ children, global = false }: CursorProviderProps) {\n  const [cursorPos, setCursorPos] = React.useState({ x: 0, y: 0 });\n  const [active, setActive] = React.useState(false);\n\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const cursorRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const id = '__cursor_none_style__';\n    if (document.getElementById(id)) return;\n\n    const style = document.createElement('style');\n    style.id = id;\n    style.textContent = `\n      .animate-ui-cursor-none, .animate-ui-cursor-none * { cursor: none !important; }\n    `;\n    document.head.appendChild(style);\n  }, []);\n\n  React.useEffect(() => {\n    let removeListeners: () => void;\n\n    if (global) {\n      const handlePointerMove = (e: PointerEvent) => {\n        setCursorPos({ x: e.clientX, y: e.clientY });\n        setActive(true);\n      };\n\n      const handlePointerOut = (e: PointerEvent | MouseEvent) => {\n        if (e instanceof PointerEvent && e.relatedTarget === null) {\n          setActive(false);\n        }\n      };\n\n      const handleVisibilityChange = () => {\n        if (document.visibilityState === 'hidden') setActive(false);\n      };\n\n      window.addEventListener('pointermove', handlePointerMove, {\n        passive: true,\n      });\n      window.addEventListener('pointerout', handlePointerOut, {\n        passive: true,\n      });\n      window.addEventListener('mouseout', handlePointerOut, { passive: true });\n      document.addEventListener('visibilitychange', handleVisibilityChange);\n\n      removeListeners = () => {\n        window.removeEventListener('pointermove', handlePointerMove);\n        window.removeEventListener('pointerout', handlePointerOut);\n        window.removeEventListener('mouseout', handlePointerOut);\n        document.removeEventListener(\n          'visibilitychange',\n          handleVisibilityChange,\n        );\n      };\n    } else {\n      if (!containerRef.current) return;\n\n      const parent = containerRef.current.parentElement;\n      if (!parent) return;\n\n      if (getComputedStyle(parent).position === 'static') {\n        parent.style.position = 'relative';\n      }\n\n      const handlePointerMove = (e: PointerEvent) => {\n        const rect = parent.getBoundingClientRect();\n        setCursorPos({ x: e.clientX - rect.left, y: e.clientY - rect.top });\n        setActive(true);\n      };\n\n      const handlePointerOut = (e: PointerEvent | MouseEvent) => {\n        if (\n          e.relatedTarget === null ||\n          !(parent as Node).contains(e.relatedTarget as Node)\n        ) {\n          setActive(false);\n        }\n      };\n\n      parent.addEventListener('pointermove', handlePointerMove, {\n        passive: true,\n      });\n      parent.addEventListener('pointerout', handlePointerOut, {\n        passive: true,\n      });\n      parent.addEventListener('mouseout', handlePointerOut, { passive: true });\n\n      removeListeners = () => {\n        parent.removeEventListener('pointermove', handlePointerMove);\n        parent.removeEventListener('pointerout', handlePointerOut);\n        parent.removeEventListener('mouseout', handlePointerOut);\n      };\n    }\n\n    return removeListeners;\n  }, [global]);\n\n  return (\n    <LocalCursorProvider\n      value={{ cursorPos, active, global, containerRef, cursorRef }}\n    >\n      {children}\n    </LocalCursorProvider>\n  );\n}\n\ntype CursorContainerProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction CursorContainer({\n  ref,\n  asChild = false,\n  ...props\n}: CursorContainerProps) {\n  const { containerRef, global, active } = useCursor();\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={containerRef}\n      data-slot=\"cursor-container\"\n      data-global={global}\n      data-active={active}\n      {...props}\n    />\n  );\n}\n\ntype CursorProps = WithAsChild<\n  HTMLMotionProps<'div'> & {\n    children: React.ReactNode;\n  }\n>;\n\nfunction Cursor({ ref, asChild = false, style, ...props }: CursorProps) {\n  const { cursorPos, active, containerRef, cursorRef, global } = useCursor();\n  React.useImperativeHandle(ref, () => cursorRef.current as HTMLDivElement);\n\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n\n  React.useEffect(() => {\n    const target = global\n      ? document.documentElement\n      : containerRef.current?.parentElement;\n\n    if (!target) return;\n\n    if (active) {\n      target.classList.add('animate-ui-cursor-none');\n    } else {\n      target.classList.remove('animate-ui-cursor-none');\n    }\n\n    return () => {\n      target.classList.remove('animate-ui-cursor-none');\n    };\n  }, [active, global, containerRef]);\n\n  React.useEffect(() => {\n    x.set(cursorPos.x);\n    y.set(cursorPos.y);\n  }, [cursorPos, x, y]);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <AnimatePresence>\n      {active && (\n        <Component\n          ref={cursorRef}\n          data-slot=\"cursor\"\n          data-global={global}\n          data-active={active}\n          style={{\n            transform: 'translate(-50%,-50%)',\n            pointerEvents: 'none',\n            zIndex: 9999,\n            position: global ? 'fixed' : 'absolute',\n            top: y,\n            left: x,\n            ...style,\n          }}\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          exit={{ scale: 0, opacity: 0 }}\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype CursorFollowSide = 'top' | 'right' | 'bottom' | 'left';\ntype CursorFollowAlign = 'start' | 'center' | 'end';\n\ntype CursorFollowProps = WithAsChild<\n  Omit<HTMLMotionProps<'div'>, 'transition'> & {\n    side?: CursorFollowSide;\n    sideOffset?: number;\n    align?: CursorFollowAlign;\n    alignOffset?: number;\n    transition?: SpringOptions;\n    children: React.ReactNode;\n  }\n>;\n\nfunction CursorFollow({\n  ref,\n  asChild = false,\n  side = 'bottom',\n  sideOffset = 0,\n  align = 'end',\n  alignOffset = 0,\n  style,\n  transition = { stiffness: 500, damping: 50, bounce: 0 },\n  ...props\n}: CursorFollowProps) {\n  const { cursorPos, active, cursorRef, global } = useCursor();\n  const cursorFollowRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(\n    ref,\n    () => cursorFollowRef.current as HTMLDivElement,\n  );\n\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n\n  const springX = useSpring(x, transition);\n  const springY = useSpring(y, transition);\n\n  const calculateOffset = React.useCallback(() => {\n    const rect = cursorFollowRef.current?.getBoundingClientRect();\n    const width = rect?.width ?? 0;\n    const height = rect?.height ?? 0;\n\n    let offsetX = 0;\n    let offsetY = 0;\n\n    switch (side) {\n      case 'top':\n        offsetY = height + sideOffset;\n        switch (align) {\n          case 'start':\n            offsetX = width + alignOffset;\n            break;\n          case 'center':\n            offsetX = width / 2;\n            break;\n          case 'end':\n            offsetX = -alignOffset;\n            break;\n        }\n        break;\n\n      case 'bottom':\n        offsetY = -sideOffset;\n        switch (align) {\n          case 'start':\n            offsetX = width + alignOffset;\n            break;\n          case 'center':\n            offsetX = width / 2;\n            break;\n          case 'end':\n            offsetX = -alignOffset;\n            break;\n        }\n        break;\n\n      case 'left':\n        offsetX = width + sideOffset;\n        switch (align) {\n          case 'start':\n            offsetY = height + alignOffset;\n            break;\n          case 'center':\n            offsetY = height / 2;\n            break;\n          case 'end':\n            offsetY = -alignOffset;\n            break;\n        }\n        break;\n\n      case 'right':\n        offsetX = -sideOffset;\n        switch (align) {\n          case 'start':\n            offsetY = height + alignOffset;\n            break;\n          case 'center':\n            offsetY = height / 2;\n            break;\n          case 'end':\n            offsetY = -alignOffset;\n            break;\n        }\n        break;\n    }\n\n    return { x: offsetX, y: offsetY };\n  }, [side, align, sideOffset, alignOffset]);\n\n  React.useEffect(() => {\n    const offset = calculateOffset();\n    const cursorRect = cursorRef.current?.getBoundingClientRect();\n    const cursorWidth = cursorRect?.width ?? 20;\n    const cursorHeight = cursorRect?.height ?? 20;\n\n    x.set(cursorPos.x - offset.x + cursorWidth / 2);\n    y.set(cursorPos.y - offset.y + cursorHeight / 2);\n  }, [calculateOffset, cursorPos, cursorRef, x, y]);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <AnimatePresence>\n      {active && (\n        <Component\n          ref={cursorFollowRef}\n          data-slot=\"cursor-follow\"\n          data-global={global}\n          data-active={active}\n          style={{\n            transform: 'translate(-50%,-50%)',\n            pointerEvents: 'none',\n            zIndex: 9998,\n            position: global ? 'fixed' : 'absolute',\n            top: springY,\n            left: springX,\n            ...style,\n          }}\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          exit={{ scale: 0, opacity: 0 }}\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  CursorProvider,\n  Cursor,\n  CursorContainer,\n  CursorFollow,\n  useCursor,\n  type CursorProviderProps,\n  type CursorProps,\n  type CursorContainerProps,\n  type CursorFollowProps,\n  type CursorFollowAlign,\n  type CursorFollowSide,\n  type CursorContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/cursor/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-cursor';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-cursor',
  },
  'primitives-animate-github-stars': {
    name: 'primitives-animate-github-stars',
    description:
      'A component that animates a number of stars, smoothly animating number transitions using the SlidingNumber component.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/primitives-animate-sliding-number',
      'https://animate-ui.com/r/hooks-use-is-in-view',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/animate/github-stars/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/github-stars.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\nimport {\n  SlidingNumber,\n  type SlidingNumberProps,\n} from '@/components/animate-ui/primitives/texts/sliding-number';\nimport {\n  Particles,\n  ParticlesEffect,\n  type ParticlesEffectProps,\n} from '@/components/animate-ui/primitives/effects/particles';\nimport { cn } from '@/lib/utils';\n\ntype GithubStarsContextType = {\n  stars: number;\n  setStars: (stars: number) => void;\n  currentStars: number;\n  setCurrentStars: (stars: number) => void;\n  isCompleted: boolean;\n  isLoading: boolean;\n};\n\nconst [GithubStarsProvider, useGithubStars] =\n  getStrictContext<GithubStarsContextType>('GithubStarsContext');\n\ntype GithubStarsProps = WithAsChild<\n  {\n    children: React.ReactNode;\n    username?: string;\n    repo?: string;\n    value?: number;\n    delay?: number;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nfunction GithubStars({\n  ref,\n  children,\n  username,\n  repo,\n  value,\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  asChild = false,\n  ...props\n}: GithubStarsProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    { inView, inViewOnce, inViewMargin },\n  );\n\n  const [stars, setStars] = React.useState(value ?? 0);\n  const [currentStars, setCurrentStars] = React.useState(0);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const isCompleted = React.useMemo(\n    () => currentStars === stars,\n    [currentStars, stars],\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  React.useEffect(() => {\n    if (value !== undefined && username && repo) return;\n    if (!isInView) {\n      setStars(0);\n      setIsLoading(true);\n      return;\n    }\n\n    const timeout = setTimeout(() => {\n      fetch(`https://api.github.com/repos/${username}/${repo}`)\n        .then((response) => response.json())\n        .then((data) => {\n          if (data && typeof data.stargazers_count === 'number') {\n            setStars(data.stargazers_count);\n          }\n        })\n        .catch(console.error)\n        .finally(() => setIsLoading(false));\n    }, delay);\n\n    return () => clearTimeout(timeout);\n  }, [username, repo, value, isInView]);\n\n  return (\n    <GithubStarsProvider\n      value={{\n        stars,\n        currentStars,\n        isCompleted,\n        isLoading,\n        setStars,\n        setCurrentStars,\n      }}\n    >\n      {!isLoading && (\n        <Component ref={localRef} {...props}>\n          {children}\n        </Component>\n      )}\n    </GithubStarsProvider>\n  );\n}\n\ntype GithubStarsNumberProps = Omit<SlidingNumberProps, 'number' | 'fromNumber'>;\n\nfunction GithubStarsNumber({\n  padStart = true,\n  ...props\n}: GithubStarsNumberProps) {\n  const { stars, setCurrentStars } = useGithubStars();\n\n  return (\n    <SlidingNumber\n      number={stars}\n      fromNumber={0}\n      onNumberChange={setCurrentStars}\n      padStart={padStart}\n      {...props}\n    />\n  );\n}\n\ntype GithubStarsIconProps<T extends React.ElementType> = {\n  icon: React.ReactElement<T>;\n  color?: string;\n  activeClassName?: string;\n} & React.ComponentProps<T>;\n\nfunction GithubStarsIcon<T extends React.ElementType>({\n  icon: Icon,\n  color = 'currentColor',\n  activeClassName,\n  className,\n  ...props\n}: GithubStarsIconProps<T>) {\n  const { stars, currentStars, isCompleted } = useGithubStars();\n  const fillPercentage = (currentStars / stars) * 100;\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <Icon aria-hidden=\"true\" className={cn(className)} {...props} />\n      <Icon\n        aria-hidden=\"true\"\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          fill: color,\n          stroke: color,\n          clipPath: `inset(${100 - (isCompleted ? fillPercentage : fillPercentage - 10)}% 0 0 0)`,\n        }}\n        className={cn(className, activeClassName)}\n        {...props}\n      />\n    </div>\n  );\n}\n\ntype GithubStarsParticlesProps = ParticlesEffectProps & {\n  children: React.ReactElement;\n  size?: number;\n};\n\nfunction GithubStarsParticles({\n  children,\n  size = 4,\n  style,\n  ...props\n}: GithubStarsParticlesProps) {\n  const { isCompleted } = useGithubStars();\n\n  return (\n    <Particles animate={isCompleted}>\n      {children}\n      <ParticlesEffect\n        style={{\n          backgroundColor: 'currentcolor',\n          borderRadius: '50%',\n          width: size,\n          height: size,\n          ...style,\n        }}\n        {...props}\n      />\n    </Particles>\n  );\n}\n\ntype GithubStarsLogoProps = React.SVGProps<SVGSVGElement>;\n\nfunction GithubStarsLogo(props: GithubStarsLogoProps) {\n  return (\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n      aria-label=\"GitHub\"\n      {...props}\n    >\n      <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"></path>\n    </svg>\n  );\n}\n\nexport {\n  GithubStars,\n  GithubStarsNumber,\n  GithubStarsIcon,\n  GithubStarsParticles,\n  GithubStarsLogo,\n  useGithubStars,\n  type GithubStarsProps,\n  type GithubStarsNumberProps,\n  type GithubStarsIconProps,\n  type GithubStarsParticlesProps,\n  type GithubStarsLogoProps,\n  type GithubStarsContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/github-stars/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-github-stars';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-github-stars',
  },
  'primitives-animate-motion-grid': {
    name: 'primitives-animate-motion-grid',
    description: 'A grid that displays animations in a grid.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/animate/motion-grid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/motion-grid.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype FrameDot = [number, number];\ntype Frame = FrameDot[];\ntype Frames = Frame[];\n\ntype MotionGridContextType = {\n  index: number;\n  cols: number;\n  rows: number;\n  frames: Frames;\n  duration: number;\n  animate: boolean;\n};\n\nconst [MotionGridProvider, useMotionGrid] =\n  getStrictContext<MotionGridContextType>('MotionGridContext');\n\ntype MotionGridProps = WithAsChild<\n  {\n    gridSize: [number, number];\n    frames: Frames;\n    duration?: number;\n    animate?: boolean;\n  } & HTMLMotionProps<'div'>\n>;\n\nconst MotionGrid = ({\n  gridSize,\n  frames,\n  duration = 200,\n  animate = true,\n  asChild = false,\n  style,\n  ...props\n}: MotionGridProps) => {\n  const [index, setIndex] = React.useState(0);\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  React.useEffect(() => {\n    if (!animate || frames.length === 0) return;\n    intervalRef.current = setInterval(\n      () => setIndex((i) => (i + 1) % frames.length),\n      duration,\n    );\n    return () => clearInterval(intervalRef.current!);\n  }, [frames.length, duration, animate]);\n\n  const [cols, rows] = gridSize;\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <MotionGridProvider\n      value={{ animate, index, cols, rows, frames, duration }}\n    >\n      <Component\n        data-animate={animate}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,\n          gridAutoRows: '1fr',\n          ...style,\n        }}\n        {...props}\n      />\n    </MotionGridProvider>\n  );\n};\n\ntype MotionGridCellsProps = HTMLMotionProps<'div'> & {\n  activeProps?: HTMLMotionProps<'div'>;\n  inactiveProps?: HTMLMotionProps<'div'>;\n};\n\nfunction MotionGridCells({\n  activeProps,\n  inactiveProps,\n  ...props\n}: MotionGridCellsProps) {\n  const { animate, index, cols, rows, frames, duration } = useMotionGrid();\n\n  const active = new Set<number>(\n    frames[index]?.map(([x, y]) => y * cols + x) ?? [],\n  );\n\n  return Array.from({ length: cols * rows }).map((_, i) => {\n    const isActive = active.has(i);\n    const componentProps: HTMLMotionProps<'div'> = {\n      ...(isActive ? activeProps : inactiveProps),\n    };\n    componentProps.className = cn(\n      props?.className,\n      isActive ? activeProps?.className : inactiveProps?.className,\n    );\n    componentProps.style = {\n      ...props?.style,\n      ...(isActive ? activeProps?.style : inactiveProps?.style),\n    };\n\n    return (\n      <motion.div\n        key={i}\n        data-active={isActive}\n        data-animate={animate}\n        transition={{ duration, ease: 'easeInOut' }}\n        {...props}\n        {...componentProps}\n      />\n    );\n  });\n}\n\nexport {\n  MotionGrid,\n  MotionGridCells,\n  type MotionGridProps,\n  type MotionGridCellsProps,\n  type FrameDot,\n  type Frame,\n  type Frames,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/motion-grid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-motion-grid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-motion-grid',
  },
  'primitives-animate-pinned-list': {
    name: 'primitives-animate-pinned-list',
    description:
      'A pin list component that allows you to pin items to the top of the list.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-animate-slot'],
    files: [
      {
        path: 'registry/primitives/animate/pinned-list/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/pinned-list.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  LayoutGroup,\n  AnimatePresence,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype PinnedListContextType = {\n  movingId: string | null;\n  setMovingId: (id: string | null) => void;\n  onPinnedChange?: (id: string) => void;\n};\n\ntype PinnedListItemContextType = {\n  id: string;\n};\n\nconst [PinnedListProvider, usePinnedList] =\n  getStrictContext<PinnedListContextType>('PinnedListContext');\n\nconst [PinnedListItemProvider, usePinnedListItem] =\n  getStrictContext<PinnedListItemContextType>('PinnedListItemContext');\n\ntype PinnedListProps = HTMLMotionProps<'div'> & {\n  children: React.ReactNode;\n  onPinnedChange?: (id: string) => void;\n};\n\nfunction PinnedList({ children, onPinnedChange, ...props }: PinnedListProps) {\n  const [movingId, setMovingId] = React.useState<string | null>(null);\n\n  return (\n    <PinnedListProvider value={{ movingId, setMovingId, onPinnedChange }}>\n      <motion.div data-slot=\"pinned-list\" {...props}>\n        <LayoutGroup>{children}</LayoutGroup>\n      </motion.div>\n    </PinnedListProvider>\n  );\n}\n\ntype PinnedListPinnedProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n};\n\nfunction PinnedListPinned(props: PinnedListPinnedProps) {\n  return <div data-slot=\"pinned-list-pinned\" {...props} />;\n}\n\ntype PinnedListUnpinnedProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n};\n\nfunction PinnedListUnpinned(props: PinnedListUnpinnedProps) {\n  return <div data-slot=\"pinned-list-unpinned\" {...props} />;\n}\n\ntype PinnedListLabelProps = WithAsChild<\n  HTMLMotionProps<'p'> & {\n    hide?: boolean;\n  }\n>;\n\nfunction PinnedListLabel({\n  hide = false,\n  asChild = false,\n  transition = { duration: 0.22, ease: 'easeInOut' },\n  ...props\n}: PinnedListLabelProps) {\n  const Component = asChild ? Slot : motion.p;\n\n  return (\n    <AnimatePresence initial={false}>\n      {!hide && (\n        <Component\n          layout\n          key=\"pinned-list-label\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={transition}\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype PinnedListItemsProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n};\n\nfunction PinnedListItems(props: PinnedListItemsProps) {\n  return <div data-slot=\"pinned-list-items\" {...props} />;\n}\n\ntype PinnedListItemProps = WithAsChild<\n  HTMLMotionProps<'div'> & {\n    id: string;\n    children: React.ReactNode;\n    customTrigger?: boolean;\n  }\n>;\n\nfunction PinnedListItem({\n  id,\n  asChild = false,\n  customTrigger = false,\n  transition = { stiffness: 320, damping: 25, mass: 0.8, type: 'spring' },\n  onClick,\n  ...props\n}: PinnedListItemProps) {\n  const { movingId, setMovingId, onPinnedChange } = usePinnedList();\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <PinnedListItemProvider value={{ id }}>\n      <Component\n        data-slot=\"pinned-list-item\"\n        layoutId={`pinned-list-item-${id}`}\n        style={{\n          position: 'relative',\n          zIndex: movingId === id ? 10 : undefined,\n        }}\n        onLayoutAnimationComplete={() => {\n          if (id === movingId) setMovingId(null);\n        }}\n        onClick={(e: React.MouseEvent<HTMLDivElement>) => {\n          if (!customTrigger) {\n            setMovingId(id);\n            onPinnedChange?.(id);\n          }\n          onClick?.(e);\n        }}\n        transition={transition}\n        whileHover={!customTrigger ? { scale: 1.05 } : undefined}\n        whileTap={!customTrigger ? { scale: 0.95 } : undefined}\n        {...props}\n      />\n    </PinnedListItemProvider>\n  );\n}\n\ntype PinnedListTriggerProps = WithAsChild<HTMLMotionProps<'button'>>;\n\nfunction PinnedListTrigger({\n  asChild = false,\n  onClick,\n  ...props\n}: PinnedListTriggerProps) {\n  const { setMovingId, onPinnedChange } = usePinnedList();\n  const { id } = usePinnedListItem();\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      data-slot=\"pinned-list-trigger\"\n      onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n        setMovingId(id);\n        onPinnedChange?.(id);\n        onClick?.(e);\n      }}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  PinnedList,\n  PinnedListPinned,\n  PinnedListUnpinned,\n  PinnedListLabel,\n  PinnedListItems,\n  PinnedListItem,\n  PinnedListTrigger,\n  usePinnedList,\n  usePinnedListItem,\n  type PinnedListProps,\n  type PinnedListPinnedProps,\n  type PinnedListUnpinnedProps,\n  type PinnedListLabelProps,\n  type PinnedListItemsProps,\n  type PinnedListItemProps,\n  type PinnedListTriggerProps,\n  type PinnedListContextType,\n  type PinnedListItemContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/pinned-list/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-pinned-list';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-pinned-list',
  },
  'primitives-animate-scroll-progress': {
    name: 'primitives-animate-scroll-progress',
    description:
      'A scroll progress component that allows you to track the progress of a scrollable element.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-motion-value-state',
    ],
    files: [
      {
        path: 'registry/primitives/animate/scroll-progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/scroll-progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useScroll,\n  useSpring,\n  type MotionValue,\n  type HTMLMotionProps,\n  type SpringOptions,\n} from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useMotionValueState } from '@/components/animate-ui/hooks/use-motion-value-state';\n\ntype ScrollProgressDirection = 'horizontal' | 'vertical';\n\ntype ScrollProgressContextType = {\n  containerRef: React.RefObject<HTMLDivElement | null>;\n  progress: MotionValue<number>;\n  scale: MotionValue<number>;\n  direction: ScrollProgressDirection;\n  global: boolean;\n};\n\nconst [LocalScrollProgressProvider, useScrollProgress] =\n  getStrictContext<ScrollProgressContextType>('ScrollProgressContext');\n\ntype ScrollProgressProviderProps = {\n  children: React.ReactNode;\n  global?: boolean;\n  transition?: SpringOptions;\n  direction?: ScrollProgressDirection;\n};\n\nfunction ScrollProgressProvider({\n  global = false,\n  transition = { stiffness: 250, damping: 40, bounce: 0 },\n  direction = 'vertical',\n  ...props\n}: ScrollProgressProviderProps) {\n  const containerRef = React.useRef<HTMLDivElement | null>(null);\n\n  const { scrollYProgress, scrollXProgress } = useScroll(\n    global ? undefined : { container: containerRef },\n  );\n\n  const progress = direction === 'vertical' ? scrollYProgress : scrollXProgress;\n  const scale = useSpring(progress, transition);\n\n  return (\n    <LocalScrollProgressProvider\n      value={{\n        containerRef,\n        progress,\n        scale,\n        direction,\n        global,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype ScrollProgressMode = 'width' | 'height' | 'scaleY' | 'scaleX';\n\ntype ScrollProgressProps = WithAsChild<\n  HTMLMotionProps<'div'> & {\n    mode?: ScrollProgressMode;\n  }\n>;\n\nfunction ScrollProgress({\n  style,\n  mode = 'width',\n  asChild = false,\n  ...props\n}: ScrollProgressProps) {\n  const { scale, direction, global } = useScrollProgress();\n  const scaleValue = useMotionValueState(scale);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      data-slot=\"scroll-progress\"\n      data-direction={direction}\n      data-mode={mode}\n      data-global={global}\n      style={{\n        ...(mode === 'width' || mode === 'height'\n          ? {\n              [mode]: scaleValue * 100 + '%',\n            }\n          : {\n              [mode]: scale,\n            }),\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype ScrollProgressContainerProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction ScrollProgressContainer({\n  ref,\n  asChild = false,\n  ...props\n}: ScrollProgressContainerProps) {\n  const { containerRef, direction } = useScrollProgress();\n\n  React.useImperativeHandle(ref, () => containerRef.current as HTMLDivElement);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={containerRef}\n      data-slot=\"scroll-progress-container\"\n      data-direction={direction}\n      data-global={global}\n      {...props}\n    />\n  );\n}\n\nexport {\n  ScrollProgressProvider,\n  ScrollProgress,\n  ScrollProgressContainer,\n  useScrollProgress,\n  type ScrollProgressProviderProps,\n  type ScrollProgressProps,\n  type ScrollProgressContainerProps,\n  type ScrollProgressDirection,\n  type ScrollProgressMode,\n  type ScrollProgressContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/scroll-progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-scroll-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-scroll-progress',
  },
  'primitives-animate-slot': {
    name: 'primitives-animate-slot',
    description:
      'A slot component that allows you to use motion components with any element.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/primitives/animate/slot/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/slot.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, isMotionComponent, type HTMLMotionProps } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ntype AnyProps = Record<string, unknown>;\n\ntype DOMMotionProps<T extends HTMLElement = HTMLElement> = Omit<\n  HTMLMotionProps<keyof HTMLElementTagNameMap>,\n  'ref'\n> & { ref?: React.Ref<T> };\n\ntype WithAsChild<Base extends object> =\n  | (Base & { asChild: true; children: React.ReactElement })\n  | (Base & { asChild?: false | undefined });\n\ntype SlotProps<T extends HTMLElement = HTMLElement> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  children?: any;\n} & DOMMotionProps<T>;\n\nfunction mergeRefs<T>(\n  ...refs: (React.Ref<T> | undefined)[]\n): React.RefCallback<T> {\n  return (node) => {\n    refs.forEach((ref) => {\n      if (!ref) return;\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        (ref as React.RefObject<T | null>).current = node;\n      }\n    });\n  };\n}\n\nfunction mergeProps<T extends HTMLElement>(\n  childProps: AnyProps,\n  slotProps: DOMMotionProps<T>,\n): AnyProps {\n  const merged: AnyProps = { ...childProps, ...slotProps };\n\n  if (childProps.className || slotProps.className) {\n    merged.className = cn(\n      childProps.className as string,\n      slotProps.className as string,\n    );\n  }\n\n  if (childProps.style || slotProps.style) {\n    merged.style = {\n      ...(childProps.style as React.CSSProperties),\n      ...(slotProps.style as React.CSSProperties),\n    };\n  }\n\n  return merged;\n}\n\nfunction Slot<T extends HTMLElement = HTMLElement>({\n  children,\n  ref,\n  ...props\n}: SlotProps<T>) {\n  const isAlreadyMotion =\n    typeof children.type === 'object' &&\n    children.type !== null &&\n    isMotionComponent(children.type);\n\n  const Base = React.useMemo(\n    () =>\n      isAlreadyMotion\n        ? (children.type as React.ElementType)\n        : motion.create(children.type as React.ElementType),\n    [isAlreadyMotion, children.type],\n  );\n\n  if (!React.isValidElement(children)) return null;\n\n  const { ref: childRef, ...childProps } = children.props as AnyProps;\n\n  const mergedProps = mergeProps(childProps, props);\n\n  return (\n    <Base {...mergedProps} ref={mergeRefs(childRef as React.Ref<T>, ref)} />\n  );\n}\n\nexport {\n  Slot,\n  type SlotProps,\n  type WithAsChild,\n  type DOMMotionProps,\n  type AnyProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/slot/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-slot';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-slot',
  },
  'primitives-animate-spring': {
    name: 'primitives-animate-spring',
    description:
      'A flexible, animated spring component that attaches a draggable element to its origin with a spring line.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-motion-value-state',
    ],
    files: [
      {
        path: 'registry/primitives/animate/spring/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/spring.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring as useMotionSpring,\n  type SpringOptions,\n  type HTMLMotionProps,\n  type MotionValue,\n} from 'motion/react';\n\nimport { useMotionValueState } from '@/components/animate-ui/hooks/use-motion-value-state';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype SpringPathConfig = {\n  coilCount?: number;\n  amplitudeMin?: number;\n  amplitudeMax?: number;\n  curveRatioMin?: number;\n  curveRatioMax?: number;\n  bezierOffset?: number;\n};\n\nfunction generateSpringPath(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  pathConfig: SpringPathConfig = {},\n) {\n  const {\n    coilCount = 8,\n    amplitudeMin = 8,\n    amplitudeMax = 20,\n    curveRatioMin = 0.5,\n    curveRatioMax = 1,\n    bezierOffset = 8,\n  } = pathConfig;\n\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dist = Math.sqrt(dx * dx + dy * dy);\n  if (dist < 2) return `M${x1},${y1}`;\n  const d = dist / coilCount;\n  const h = Math.max(0.8, 1 - (dist - 40) / 200);\n  const amplitude = Math.max(\n    amplitudeMin,\n    Math.min(amplitudeMax, amplitudeMax * h),\n  );\n  const curveRatio =\n    dist <= 40\n      ? curveRatioMax\n      : dist <= 120\n        ? curveRatioMax - ((dist - 40) / 80) * (curveRatioMax - curveRatioMin)\n        : curveRatioMin;\n  const ux = dx / dist,\n    uy = dy / dist;\n  const perpX = -uy,\n    perpY = ux;\n\n  let path = [];\n  for (let i = 0; i < coilCount; i++) {\n    const sx = x1 + ux * (i * d);\n    const sy = y1 + uy * (i * d);\n    const ex = x1 + ux * ((i + 1) * d);\n    const ey = y1 + uy * ((i + 1) * d);\n\n    const mx = x1 + ux * ((i + 0.5) * d) + perpX * amplitude;\n    const my = y1 + uy * ((i + 0.5) * d) + perpY * amplitude;\n\n    const c1x = sx + d * curveRatio * ux;\n    const c1y = sy + d * curveRatio * uy;\n    const c2x = mx + ux * bezierOffset;\n    const c2y = my + uy * bezierOffset;\n    const c3x = mx - ux * bezierOffset;\n    const c3y = my - uy * bezierOffset;\n    const c4x = ex - d * curveRatio * ux;\n    const c4y = ey - d * curveRatio * uy;\n\n    if (i === 0) path.push(`M${sx},${sy}`);\n    else path.push(`L${sx},${sy}`);\n    path.push(`C${c1x},${c1y} ${c2x},${c2y} ${mx},${my}`);\n    path.push(`C${c3x},${c3y} ${c4x},${c4y} ${ex},${ey}`);\n  }\n  return path.join(' ');\n}\n\ntype SpringContextType = {\n  dragElastic?: number;\n  childRef: React.RefObject<HTMLDivElement | null>;\n  springX: MotionValue<number>;\n  springY: MotionValue<number>;\n  x: MotionValue<number>;\n  y: MotionValue<number>;\n  isDragging: boolean;\n  setIsDragging: (isDragging: boolean) => void;\n  path: string;\n};\n\nconst [LocalSpringProvider, useSpring] =\n  getStrictContext<SpringContextType>('SpringContext');\n\ntype SpringProviderProps = {\n  children: React.ReactNode;\n  dragElastic?: number;\n  pathConfig?: SpringPathConfig;\n  transition?: SpringOptions;\n};\n\nfunction SpringProvider({\n  dragElastic = 0.2,\n  transition = { stiffness: 200, damping: 16 },\n  pathConfig = {},\n  ...props\n}: SpringProviderProps) {\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n\n  const springX = useMotionSpring(x, transition);\n  const springY = useMotionSpring(y, transition);\n\n  const sx = useMotionValueState(springX);\n  const sy = useMotionValueState(springY);\n\n  const childRef = React.useRef<HTMLDivElement>(null);\n\n  const [center, setCenter] = React.useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = React.useState(false);\n\n  React.useLayoutEffect(() => {\n    function update() {\n      if (childRef.current) {\n        const rect = childRef.current.getBoundingClientRect();\n        setCenter({\n          x: rect.left + rect.width / 2,\n          y: rect.top + rect.height / 2,\n        });\n      }\n    }\n\n    update();\n\n    window.addEventListener('resize', update);\n    window.addEventListener('scroll', update, true);\n\n    return () => {\n      window.removeEventListener('resize', update);\n      window.removeEventListener('scroll', update, true);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (isDragging) {\n      document.body.style.cursor = 'grabbing';\n    } else {\n      document.body.style.cursor = 'default';\n    }\n  }, [isDragging]);\n\n  const path = generateSpringPath(\n    center.x,\n    center.y,\n    center.x + sx,\n    center.y + sy,\n    pathConfig,\n  );\n\n  return (\n    <LocalSpringProvider\n      value={{\n        springX,\n        springY,\n        x,\n        y,\n        isDragging,\n        setIsDragging,\n        dragElastic,\n        childRef,\n        path,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype SpringProps = React.SVGProps<SVGSVGElement>;\n\nfunction Spring({ style, ...props }: SpringProps) {\n  const { path } = useSpring();\n\n  return (\n    <>\n      <svg\n        width=\"100vw\"\n        height=\"100vh\"\n        style={{\n          position: 'fixed',\n          inset: 0,\n          pointerEvents: 'none',\n          ...style,\n        }}\n        {...props}\n      >\n        <path\n          d={path}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          stroke=\"currentColor\"\n          strokeWidth={2}\n          fill=\"none\"\n        />\n      </svg>\n    </>\n  );\n}\n\ntype SpringElementProps = WithAsChild<\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    children: React.ReactElement;\n  }\n>;\n\nfunction SpringElement({\n  ref,\n  asChild = false,\n  style,\n  ...props\n}: SpringElementProps) {\n  const {\n    childRef,\n    dragElastic,\n    isDragging,\n    setIsDragging,\n    springX,\n    springY,\n    x,\n    y,\n  } = useSpring();\n\n  React.useImperativeHandle(ref, () => childRef.current as HTMLDivElement);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={childRef}\n      style={{\n        cursor: isDragging ? 'grabbing' : 'grab',\n        x: springX,\n        y: springY,\n        ...style,\n      }}\n      drag\n      dragElastic={dragElastic}\n      dragMomentum={false}\n      onDragStart={() => {\n        setIsDragging(true);\n      }}\n      onDrag={(_, info) => {\n        x.set(info.offset.x);\n        y.set(info.offset.y);\n      }}\n      onDragEnd={() => {\n        x.set(0);\n        y.set(0);\n        setIsDragging(false);\n      }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  SpringProvider,\n  Spring,\n  SpringElement,\n  useSpring,\n  type SpringProviderProps,\n  type SpringProps,\n  type SpringElementProps,\n  type SpringPathConfig,\n  type SpringContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/spring/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-spring';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-spring',
  },
  'primitives-animate-tabs': {
    name: 'primitives-animate-tabs',
    description:
      'A tabs component that allows you to switch between different views.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/animate/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/tabs.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype TabsContextType = {\n  activeValue: string;\n  handleValueChange: (value: string) => void;\n  registerTrigger: (value: string, node: HTMLElement | null) => void;\n};\n\nconst [TabsProvider, useTabs] =\n  getStrictContext<TabsContextType>('TabsContext');\n\ntype BaseTabsProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n};\n\ntype UnControlledTabsProps = BaseTabsProps & {\n  defaultValue?: string;\n  value?: never;\n  onValueChange?: never;\n};\n\ntype ControlledTabsProps = BaseTabsProps & {\n  value: string;\n  onValueChange?: (value: string) => void;\n  defaultValue?: never;\n};\n\ntype TabsProps = UnControlledTabsProps | ControlledTabsProps;\n\nfunction Tabs({\n  defaultValue,\n  value,\n  onValueChange,\n  children,\n  ...props\n}: TabsProps) {\n  const [activeValue, setActiveValue] = React.useState<string | undefined>(\n    defaultValue,\n  );\n  const triggersRef = React.useRef(new Map<string, HTMLElement>());\n  const initialSet = React.useRef(false);\n  const isControlled = value !== undefined;\n\n  React.useEffect(() => {\n    if (\n      !isControlled &&\n      activeValue === undefined &&\n      triggersRef.current.size > 0 &&\n      !initialSet.current\n    ) {\n      const firstTab = triggersRef.current.keys().next().value as\n        | string\n        | undefined;\n      if (firstTab !== undefined) {\n        setActiveValue(firstTab);\n        initialSet.current = true;\n      }\n    }\n  }, [activeValue, isControlled]);\n\n  const registerTrigger = React.useCallback(\n    (val: string, node: HTMLElement | null) => {\n      if (node) {\n        triggersRef.current.set(val, node);\n        if (!isControlled && activeValue === undefined && !initialSet.current) {\n          setActiveValue(val);\n          initialSet.current = true;\n        }\n      } else {\n        triggersRef.current.delete(val);\n      }\n    },\n    [activeValue, isControlled],\n  );\n\n  const handleValueChange = React.useCallback(\n    (val: string) => {\n      if (!isControlled) setActiveValue(val);\n      else onValueChange?.(val);\n    },\n    [isControlled, onValueChange],\n  );\n\n  return (\n    <TabsProvider\n      value={{\n        activeValue: (value ?? activeValue) as string,\n        handleValueChange,\n        registerTrigger,\n      }}\n    >\n      <div data-slot=\"tabs\" {...props}>\n        {children}\n      </div>\n    </TabsProvider>\n  );\n}\n\ntype TabsHighlightProps = Omit<HighlightProps, 'controlledItems' | 'value'>;\n\nfunction TabsHighlight({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: TabsHighlightProps) {\n  const { activeValue } = useTabs();\n\n  return (\n    <Highlight\n      data-slot=\"tabs-highlight\"\n      controlledItems\n      value={activeValue}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype TabsListProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n};\n\nfunction TabsList(props: TabsListProps) {\n  return <div role=\"tablist\" data-slot=\"tabs-list\" {...props} />;\n}\n\ntype TabsHighlightItemProps = HighlightItemProps & {\n  value: string;\n};\n\nfunction TabsHighlightItem(props: TabsHighlightItemProps) {\n  return <HighlightItem data-slot=\"tabs-highlight-item\" {...props} />;\n}\n\ntype TabsTriggerProps = WithAsChild<\n  {\n    value: string;\n    children: React.ReactNode;\n  } & HTMLMotionProps<'button'>\n>;\n\nfunction TabsTrigger({\n  ref,\n  value,\n  asChild = false,\n  ...props\n}: TabsTriggerProps) {\n  const { activeValue, handleValueChange, registerTrigger } = useTabs();\n\n  const localRef = React.useRef<HTMLButtonElement | null>(null);\n  React.useImperativeHandle(ref, () => localRef.current as HTMLButtonElement);\n\n  React.useEffect(() => {\n    registerTrigger(value, localRef.current);\n    return () => registerTrigger(value, null);\n  }, [value, registerTrigger]);\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      ref={localRef}\n      data-slot=\"tabs-trigger\"\n      role=\"tab\"\n      onClick={() => handleValueChange(value)}\n      data-state={activeValue === value ? 'active' : 'inactive'}\n      {...props}\n    />\n  );\n}\n\ntype TabsContentsProps = React.ComponentProps<'div'> & {\n  children: React.ReactNode;\n  transition?: Transition;\n};\n\nfunction TabsContents({\n  children,\n  style,\n  transition = {\n    type: 'spring',\n    stiffness: 300,\n    damping: 32,\n    bounce: 0,\n    restDelta: 0.01,\n  },\n  ...props\n}: TabsContentsProps) {\n  const { activeValue } = useTabs();\n  const childrenArray = React.useMemo(\n    () => React.Children.toArray(children),\n    [children],\n  );\n  const activeIndex = React.useMemo(\n    () =>\n      childrenArray.findIndex(\n        (child): child is React.ReactElement<{ value: string }> =>\n          React.isValidElement(child) &&\n          typeof child.props === 'object' &&\n          child.props !== null &&\n          'value' in child.props &&\n          child.props.value === activeValue,\n      ),\n    [childrenArray, activeValue],\n  );\n\n  return (\n    <div\n      data-slot=\"tabs-contents\"\n      style={{ overflow: 'hidden', ...style }}\n      {...props}\n    >\n      <motion.div\n        style={{ display: 'flex', marginInline: '-20px' }}\n        animate={{ x: activeIndex * -100 + '%' }}\n        transition={transition}\n      >\n        {childrenArray.map((child, index) => (\n          <div\n            key={index}\n            style={{ width: '100%', flexShrink: 0, paddingInline: '20px' }}\n          >\n            {child}\n          </div>\n        ))}\n      </motion.div>\n    </div>\n  );\n}\n\ntype TabsContentProps = WithAsChild<\n  {\n    value: string;\n    children: React.ReactNode;\n  } & HTMLMotionProps<'div'>\n>;\n\nfunction TabsContent({\n  value,\n  style,\n  asChild = false,\n  ...props\n}: TabsContentProps) {\n  const { activeValue } = useTabs();\n  const isActive = activeValue === value;\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      role=\"tabpanel\"\n      data-slot=\"tabs-content\"\n      style={{ overflow: 'hidden', ...style }}\n      initial={{ filter: 'blur(0px)' }}\n      animate={{ filter: isActive ? 'blur(0px)' : 'blur(4px)' }}\n      exit={{ filter: 'blur(0px)' }}\n      transition={{ type: 'spring', stiffness: 200, damping: 25 }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Tabs,\n  TabsList,\n  TabsHighlight,\n  TabsHighlightItem,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  useTabs,\n  type TabsProps,\n  type TabsListProps,\n  type TabsHighlightProps,\n  type TabsHighlightItemProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n  type TabsContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/tabs/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-tabs',
  },
  'primitives-animate-tooltip': {
    name: 'primitives-animate-tooltip',
    description:
      'An animated tooltip that shows contextual info on hover or focus and smoothly glides to the next element without disappearing between transitions.',
    type: 'registry:ui',
    dependencies: ['motion', '@floating-ui/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/animate/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/animate/tooltip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  AnimatePresence,\n  LayoutGroup,\n  type Transition,\n  type HTMLMotionProps,\n} from 'motion/react';\nimport {\n  useFloating,\n  autoUpdate,\n  offset as floatingOffset,\n  flip,\n  shift,\n  arrow as floatingArrow,\n  FloatingPortal,\n  FloatingArrow,\n  type UseFloatingReturn,\n} from '@floating-ui/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\ntype Align = 'start' | 'center' | 'end';\n\ntype TooltipData = {\n  contentProps: HTMLMotionProps<'div'>;\n  contentAsChild: boolean;\n  rect: DOMRect;\n  side: Side;\n  sideOffset: number;\n  align: Align;\n  alignOffset: number;\n  id: string;\n};\n\ntype GlobalTooltipContextType = {\n  showTooltip: (data: TooltipData) => void;\n  hideTooltip: () => void;\n  hideImmediate: () => void;\n  currentTooltip: TooltipData | null;\n  transition: Transition;\n  globalId: string;\n  setReferenceEl: (el: HTMLElement | null) => void;\n  referenceElRef: React.RefObject<HTMLElement | null>;\n};\n\nconst [GlobalTooltipProvider, useGlobalTooltip] =\n  getStrictContext<GlobalTooltipContextType>('GlobalTooltipProvider');\n\ntype TooltipContextType = {\n  props: HTMLMotionProps<'div'>;\n  setProps: React.Dispatch<React.SetStateAction<HTMLMotionProps<'div'>>>;\n  asChild: boolean;\n  setAsChild: React.Dispatch<React.SetStateAction<boolean>>;\n  side: Side;\n  sideOffset: number;\n  align: Align;\n  alignOffset: number;\n  id: string;\n};\n\nconst [LocalTooltipProvider, useTooltip] = getStrictContext<TooltipContextType>(\n  'LocalTooltipProvider',\n);\n\ntype TooltipPosition = { x: number; y: number };\n\ntype TooltipProviderProps = {\n  children: React.ReactNode;\n  openDelay?: number;\n  closeDelay?: number;\n  transition?: Transition;\n};\n\nfunction getResolvedSide(placement: Side | `${Side}-${Align}`) {\n  if (placement.includes('-')) {\n    return placement.split('-')[0] as Side;\n  }\n  return placement as Side;\n}\n\nfunction initialFromSide(side: Side): Partial<Record<'x' | 'y', number>> {\n  if (side === 'top') return { y: 15 };\n  if (side === 'bottom') return { y: -15 };\n  if (side === 'left') return { x: 15 };\n  return { x: -15 };\n}\n\nfunction TooltipProvider({\n  children,\n  openDelay = 700,\n  closeDelay = 300,\n  transition = { type: 'spring', stiffness: 300, damping: 35 },\n}: TooltipProviderProps) {\n  const globalId = React.useId();\n  const [currentTooltip, setCurrentTooltip] =\n    React.useState<TooltipData | null>(null);\n  const timeoutRef = React.useRef<number | null>(null);\n  const lastCloseTimeRef = React.useRef<number>(0);\n  const referenceElRef = React.useRef<HTMLElement | null>(null);\n\n  const showTooltip = React.useCallback(\n    (data: TooltipData) => {\n      if (timeoutRef.current) clearTimeout(timeoutRef.current);\n      if (currentTooltip !== null) {\n        setCurrentTooltip(data);\n        return;\n      }\n      const now = Date.now();\n      const delay = now - lastCloseTimeRef.current < closeDelay ? 0 : openDelay;\n      timeoutRef.current = window.setTimeout(\n        () => setCurrentTooltip(data),\n        delay,\n      );\n    },\n    [openDelay, closeDelay, currentTooltip],\n  );\n\n  const hideTooltip = React.useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      setCurrentTooltip(null);\n      lastCloseTimeRef.current = Date.now();\n    }, closeDelay);\n  }, [closeDelay]);\n\n  const hideImmediate = React.useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    setCurrentTooltip(null);\n    lastCloseTimeRef.current = Date.now();\n  }, []);\n\n  const setReferenceEl = React.useCallback((el: HTMLElement | null) => {\n    referenceElRef.current = el;\n  }, []);\n\n  React.useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') hideImmediate();\n    };\n    window.addEventListener('keydown', onKeyDown, true);\n    window.addEventListener('scroll', hideImmediate, true);\n    window.addEventListener('resize', hideImmediate, true);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown, true);\n      window.removeEventListener('scroll', hideImmediate, true);\n      window.removeEventListener('resize', hideImmediate, true);\n    };\n  }, [hideImmediate]);\n\n  return (\n    <GlobalTooltipProvider\n      value={{\n        showTooltip,\n        hideTooltip,\n        hideImmediate,\n        currentTooltip,\n        transition,\n        globalId,\n        setReferenceEl,\n        referenceElRef,\n      }}\n    >\n      <LayoutGroup>{children}</LayoutGroup>\n      <TooltipOverlay />\n    </GlobalTooltipProvider>\n  );\n}\n\ntype RenderedTooltipContextType = {\n  side: Side;\n  align: Align;\n  open: boolean;\n};\n\nconst [RenderedTooltipProvider, useRenderedTooltip] =\n  getStrictContext<RenderedTooltipContextType>('RenderedTooltipContext');\n\ntype FloatingContextType = {\n  context: UseFloatingReturn['context'];\n  arrowRef: React.RefObject<SVGSVGElement | null>;\n};\n\nconst [FloatingProvider, useFloatingContext] =\n  getStrictContext<FloatingContextType>('FloatingContext');\n\nconst MotionTooltipArrow = motion.create(FloatingArrow);\n\ntype TooltipArrowProps = Omit<\n  React.ComponentProps<typeof MotionTooltipArrow>,\n  'context'\n> & {\n  withTransition?: boolean;\n};\n\nfunction TooltipArrow({\n  ref,\n  withTransition = true,\n  ...props\n}: TooltipArrowProps) {\n  const { side, align, open } = useRenderedTooltip();\n  const { context, arrowRef } = useFloatingContext();\n  const { transition, globalId } = useGlobalTooltip();\n\n  const resolvedSide = getResolvedSide(context.placement);\n  const deg = { top: 0, right: 90, bottom: 180, left: -90 }[resolvedSide];\n\n  return (\n    <MotionTooltipArrow\n      ref={arrowRef}\n      context={context}\n      data-state={open ? 'open' : 'closed'}\n      data-resolved-side={resolvedSide}\n      data-side={side}\n      data-align={align}\n      data-slot=\"tooltip-arrow\"\n      style={{ rotate: deg }}\n      layoutId={withTransition ? `tooltip-arrow-${globalId}` : undefined}\n      transition={withTransition ? transition : undefined}\n      {...props}\n    />\n  );\n}\n\ntype TooltipPortalProps = React.ComponentProps<typeof FloatingPortal>;\n\nfunction TooltipPortal(props: TooltipPortalProps) {\n  return <FloatingPortal {...props} />;\n}\n\nfunction TooltipOverlay() {\n  const { currentTooltip, transition, globalId, referenceElRef } =\n    useGlobalTooltip();\n\n  const [rendered, setRendered] = React.useState<{\n    data: TooltipData | null;\n    open: boolean;\n  }>({ data: null, open: false });\n\n  const arrowRef = React.useRef<SVGSVGElement | null>(null);\n\n  const side = rendered.data?.side ?? 'top';\n  const align = rendered.data?.align ?? 'center';\n\n  const { refs, x, y, strategy, context, update } = useFloating({\n    placement: align === 'center' ? side : `${side}-${align}`,\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      floatingOffset({\n        mainAxis: rendered.data?.sideOffset ?? 0,\n        crossAxis: rendered.data?.alignOffset ?? 0,\n      }),\n      flip(),\n      shift({ padding: 8 }),\n      floatingArrow({ element: arrowRef }),\n    ],\n  });\n\n  React.useEffect(() => {\n    if (currentTooltip) {\n      setRendered({ data: currentTooltip, open: true });\n    } else {\n      setRendered((p) => (p.data ? { ...p, open: false } : p));\n    }\n  }, [currentTooltip]);\n\n  React.useLayoutEffect(() => {\n    if (referenceElRef.current) {\n      refs.setReference(referenceElRef.current);\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      update();\n    }\n  }, [referenceElRef, refs, update, rendered.data]);\n\n  const ready = x != null && y != null;\n  const Component = rendered.data?.contentAsChild ? Slot : motion.div;\n\n  return (\n    <AnimatePresence>\n      {rendered.data && ready && (\n        <TooltipPortal>\n          <div\n            ref={refs.setFloating}\n            data-slot=\"tooltip-overlay\"\n            data-resolved-side={getResolvedSide(context.placement)}\n            data-side={rendered.data.side}\n            data-align={rendered.data.align}\n            data-state={rendered.open ? 'open' : 'closed'}\n            style={{\n              position: strategy,\n              top: 0,\n              left: 0,\n              zIndex: 50,\n              transform: `translate3d(${x!}px, ${y!}px, 0)`,\n            }}\n          >\n            <FloatingProvider value={{ context, arrowRef }}>\n              <RenderedTooltipProvider\n                value={{\n                  side: rendered.data.side,\n                  align: rendered.data.align,\n                  open: rendered.open,\n                }}\n              >\n                <Component\n                  data-slot=\"tooltip-content\"\n                  data-resolved-side={getResolvedSide(context.placement)}\n                  data-side={rendered.data.side}\n                  data-align={rendered.data.align}\n                  data-state={rendered.open ? 'open' : 'closed'}\n                  layoutId={`tooltip-content-${globalId}`}\n                  initial={{\n                    opacity: 0,\n                    scale: 0,\n                    ...initialFromSide(rendered.data.side),\n                  }}\n                  animate={\n                    rendered.open\n                      ? { opacity: 1, scale: 1, x: 0, y: 0 }\n                      : {\n                          opacity: 0,\n                          scale: 0,\n                          ...initialFromSide(rendered.data.side),\n                        }\n                  }\n                  exit={{\n                    opacity: 0,\n                    scale: 0,\n                    ...initialFromSide(rendered.data.side),\n                  }}\n                  onAnimationComplete={() => {\n                    if (!rendered.open)\n                      setRendered({ data: null, open: false });\n                  }}\n                  transition={transition}\n                  {...rendered.data.contentProps}\n                  style={{\n                    position: 'relative',\n                    ...(rendered.data.contentProps?.style || {}),\n                  }}\n                />\n              </RenderedTooltipProvider>\n            </FloatingProvider>\n          </div>\n        </TooltipPortal>\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype TooltipProps = {\n  children: React.ReactNode;\n  side?: Side;\n  sideOffset?: number;\n  align?: Align;\n  alignOffset?: number;\n};\n\nfunction Tooltip({\n  children,\n  side = 'top',\n  sideOffset = 0,\n  align = 'center',\n  alignOffset = 0,\n}: TooltipProps) {\n  const id = React.useId();\n  const [props, setProps] = React.useState<HTMLMotionProps<'div'>>({});\n  const [asChild, setAsChild] = React.useState(false);\n\n  return (\n    <LocalTooltipProvider\n      value={{\n        props,\n        setProps,\n        asChild,\n        setAsChild,\n        side,\n        sideOffset,\n        align,\n        alignOffset,\n        id,\n      }}\n    >\n      {children}\n    </LocalTooltipProvider>\n  );\n}\n\ntype TooltipContentProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction shallowEqualWithoutChildren(\n  a?: HTMLMotionProps<'div'>,\n  b?: HTMLMotionProps<'div'>,\n) {\n  if (a === b) return true;\n  if (!a || !b) return false;\n  const keysA = Object.keys(a).filter((k) => k !== 'children');\n  const keysB = Object.keys(b).filter((k) => k !== 'children');\n  if (keysA.length !== keysB.length) return false;\n  for (const k of keysA) {\n    // @ts-expect-error index\n    if (a[k] !== b[k]) return false;\n  }\n  return true;\n}\n\nfunction TooltipContent({ asChild = false, ...props }: TooltipContentProps) {\n  const { setProps, setAsChild } = useTooltip();\n  const lastPropsRef = React.useRef<HTMLMotionProps<'div'> | undefined>(\n    undefined,\n  );\n\n  React.useEffect(() => {\n    if (!shallowEqualWithoutChildren(lastPropsRef.current, props)) {\n      lastPropsRef.current = props;\n      setProps(props);\n    }\n  }, [props, setProps]);\n\n  React.useEffect(() => {\n    setAsChild(asChild);\n  }, [asChild, setAsChild]);\n\n  return null;\n}\n\ntype TooltipTriggerProps = WithAsChild<HTMLMotionProps<'div'>>;\n\nfunction TooltipTrigger({\n  ref,\n  onMouseEnter,\n  onMouseLeave,\n  onFocus,\n  onBlur,\n  onPointerDown,\n  asChild = false,\n  ...props\n}: TooltipTriggerProps) {\n  const {\n    props: contentProps,\n    asChild: contentAsChild,\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    id,\n  } = useTooltip();\n  const {\n    showTooltip,\n    hideTooltip,\n    hideImmediate,\n    currentTooltip,\n    setReferenceEl,\n  } = useGlobalTooltip();\n\n  const triggerRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => triggerRef.current as HTMLDivElement);\n\n  const suppressNextFocusRef = React.useRef(false);\n\n  const handleOpen = React.useCallback(() => {\n    if (!triggerRef.current) return;\n    setReferenceEl(triggerRef.current);\n    const rect = triggerRef.current.getBoundingClientRect();\n    showTooltip({\n      contentProps,\n      contentAsChild,\n      rect,\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      id,\n    });\n  }, [\n    showTooltip,\n    setReferenceEl,\n    contentProps,\n    contentAsChild,\n    side,\n    sideOffset,\n    align,\n    alignOffset,\n    id,\n  ]);\n\n  const handlePointerDown = React.useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      onPointerDown?.(e);\n      if (currentTooltip?.id === id) {\n        suppressNextFocusRef.current = true;\n        hideImmediate();\n        Promise.resolve().then(() => {\n          suppressNextFocusRef.current = false;\n        });\n      }\n    },\n    [onPointerDown, currentTooltip?.id, id, hideImmediate],\n  );\n\n  const handleMouseEnter = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      onMouseEnter?.(e);\n      handleOpen();\n    },\n    [handleOpen, onMouseEnter],\n  );\n\n  const handleMouseLeave = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      onMouseLeave?.(e);\n      hideTooltip();\n    },\n    [hideTooltip, onMouseLeave],\n  );\n\n  const handleFocus = React.useCallback(\n    (e: React.FocusEvent<HTMLDivElement>) => {\n      onFocus?.(e);\n      if (suppressNextFocusRef.current) return;\n      handleOpen();\n    },\n    [handleOpen, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (e: React.FocusEvent<HTMLDivElement>) => {\n      onBlur?.(e);\n      hideTooltip();\n    },\n    [hideTooltip, onBlur],\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={triggerRef}\n      onPointerDown={handlePointerDown}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      data-slot=\"tooltip-trigger\"\n      data-side={side}\n      data-align={align}\n      data-state={currentTooltip?.id === id ? 'open' : 'closed'}\n      {...props}\n    />\n  );\n}\n\nexport {\n  TooltipProvider,\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n  TooltipArrow,\n  useGlobalTooltip,\n  useTooltip,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipContentProps,\n  type TooltipTriggerProps,\n  type TooltipArrowProps,\n  type TooltipPosition,\n  type GlobalTooltipContextType,\n  type TooltipContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/animate/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-animate-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-animate-tooltip',
  },
  'primitives-base-accordion': {
    name: 'primitives-base-accordion',
    description: 'An easily stylable accordion component.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/accordion.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Accordion as AccordionPrimitive } from '@base-ui-components/react/accordion';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype AccordionContextType = {\n  value: string | string[] | undefined;\n  setValue: (value: string | string[] | undefined) => void;\n};\n\ntype AccordionItemContextType = {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n};\n\nconst [AccordionProvider, useAccordion] =\n  getStrictContext<AccordionContextType>('AccordionContext');\n\nconst [AccordionItemProvider, useAccordionItem] =\n  getStrictContext<AccordionItemContextType>('AccordionItemContext');\n\ntype AccordionProps = React.ComponentProps<typeof AccordionPrimitive.Root>;\n\nfunction Accordion(props: AccordionProps) {\n  const [value, setValue] = useControlledState<string | string[] | undefined>({\n    value: props?.value,\n    defaultValue: props?.defaultValue,\n    onChange: props?.onValueChange as (\n      value: string | string[] | undefined,\n    ) => void,\n  });\n\n  return (\n    <AccordionProvider value={{ value, setValue }}>\n      <AccordionPrimitive.Root\n        data-slot=\"accordion\"\n        {...props}\n        onValueChange={setValue}\n      />\n    </AccordionProvider>\n  );\n}\n\ntype AccordionItemProps = React.ComponentProps<typeof AccordionPrimitive.Item>;\n\nfunction AccordionItem(props: AccordionItemProps) {\n  const { value } = useAccordion();\n  const [isOpen, setIsOpen] = React.useState(\n    value?.includes(props?.value) ?? false,\n  );\n\n  React.useEffect(() => {\n    setIsOpen(value?.includes(props?.value) ?? false);\n  }, [value, props?.value]);\n\n  return (\n    <AccordionItemProvider value={{ isOpen, setIsOpen }}>\n      <AccordionPrimitive.Item data-slot=\"accordion-item\" {...props} />\n    </AccordionItemProvider>\n  );\n}\n\ntype AccordionHeaderProps = React.ComponentProps<\n  typeof AccordionPrimitive.Header\n>;\n\nfunction AccordionHeader(props: AccordionHeaderProps) {\n  return <AccordionPrimitive.Header data-slot=\"accordion-header\" {...props} />;\n}\n\ntype AccordionTriggerProps = React.ComponentProps<\n  typeof AccordionPrimitive.Trigger\n>;\n\nfunction AccordionTrigger(props: AccordionTriggerProps) {\n  return (\n    <AccordionPrimitive.Trigger data-slot=\"accordion-trigger\" {...props} />\n  );\n}\n\ntype AccordionPanelProps = Omit<\n  React.ComponentProps<typeof AccordionPrimitive.Panel>,\n  'keepMounted' | 'render'\n> &\n  HTMLMotionProps<'div'> & {\n    keepRendered?: boolean;\n  };\n\nfunction AccordionPanel({\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  hiddenUntilFound,\n  keepRendered = false,\n  ...props\n}: AccordionPanelProps) {\n  const { isOpen } = useAccordionItem();\n\n  return (\n    <AnimatePresence>\n      {keepRendered ? (\n        <AccordionPrimitive.Panel\n          hidden={false}\n          hiddenUntilFound={hiddenUntilFound}\n          keepMounted\n          render={\n            <motion.div\n              key=\"accordion-panel\"\n              data-slot=\"accordion-panel\"\n              initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              animate={\n                isOpen\n                  ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n                  : { height: 0, opacity: 0, '--mask-stop': '0%' }\n              }\n              transition={transition}\n              style={{\n                maskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                WebkitMaskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                overflow: 'hidden',\n              }}\n              {...props}\n            />\n          }\n        />\n      ) : (\n        isOpen && (\n          <AccordionPrimitive.Panel\n            hidden={false}\n            hiddenUntilFound={hiddenUntilFound}\n            keepMounted\n            render={\n              <motion.div\n                key=\"accordion-panel\"\n                data-slot=\"accordion-panel\"\n                initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n                exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                transition={transition}\n                style={{\n                  maskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  WebkitMaskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  overflow: 'hidden',\n                }}\n                {...props}\n              />\n            }\n          />\n        )\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionPanel,\n  useAccordionItem,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionHeaderProps,\n  type AccordionTriggerProps,\n  type AccordionPanelProps,\n  type AccordionItemContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-accordion',
  },
  'primitives-base-checkbox': {
    name: 'primitives-base-checkbox',
    description: 'An easily stylable checkbox component.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/checkbox.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { Checkbox as CheckboxPrimitive } from \'@base-ui-components/react/checkbox\';\nimport {\n  motion,\n  type HTMLMotionProps,\n  type SVGMotionProps,\n} from \'motion/react\';\n\nimport { getStrictContext } from \'@/components/animate-ui/hooks/use-strict-context\';\nimport { useControlledState } from \'@/components/animate-ui/hooks/use-controlled-state\';\n\ntype CheckboxContextType = {\n  isChecked: boolean;\n  setIsChecked: (checked: boolean, event: Event) => void;\n  isIndeterminate: boolean | undefined;\n};\n\nconst [CheckboxProvider, useCheckbox] =\n  getStrictContext<CheckboxContextType>(\'CheckboxContext\');\n\ntype CheckboxProps = Omit<\n  React.ComponentProps<typeof CheckboxPrimitive.Root>,\n  \'render\'\n> &\n  HTMLMotionProps<\'button\'>;\n\nfunction Checkbox({\n  name,\n  checked,\n  defaultChecked,\n  onCheckedChange,\n  indeterminate,\n  value,\n  nativeButton,\n  parent,\n  disabled,\n  readOnly,\n  required,\n  inputRef,\n  id,\n  ...props\n}: CheckboxProps) {\n  const [isChecked, setIsChecked] = useControlledState({\n    value: checked,\n    defaultValue: defaultChecked,\n    onChange: onCheckedChange,\n  });\n\n  return (\n    <CheckboxProvider\n      value={{ isChecked, setIsChecked, isIndeterminate: indeterminate }}\n    >\n      <CheckboxPrimitive.Root\n        name={name}\n        defaultChecked={defaultChecked}\n        checked={checked}\n        onCheckedChange={setIsChecked}\n        indeterminate={indeterminate}\n        value={value}\n        nativeButton={nativeButton}\n        parent={parent}\n        disabled={disabled}\n        readOnly={readOnly}\n        required={required}\n        inputRef={inputRef}\n        id={id}\n        render={\n          <motion.button\n            data-slot="checkbox"\n            whileTap={{ scale: 0.95 }}\n            whileHover={{ scale: 1.05 }}\n            {...props}\n          />\n        }\n      />\n    </CheckboxProvider>\n  );\n}\n\ntype CheckboxIndicatorProps = SVGMotionProps<SVGSVGElement>;\n\nfunction CheckboxIndicator(props: CheckboxIndicatorProps) {\n  const { isChecked, isIndeterminate } = useCheckbox();\n\n  return (\n    <CheckboxPrimitive.Indicator\n      keepMounted\n      render={\n        <motion.svg\n          data-slot="checkbox-indicator"\n          xmlns="http://www.w3.org/2000/svg"\n          fill="none"\n          viewBox="0 0 24 24"\n          strokeWidth="3.5"\n          stroke="currentColor"\n          initial="unchecked"\n          animate={isChecked ? \'checked\' : \'unchecked\'}\n          {...props}\n        >\n          {isIndeterminate ? (\n            <motion.line\n              x1="5"\n              y1="12"\n              x2="19"\n              y2="12"\n              strokeLinecap="round"\n              initial={{ pathLength: 0, opacity: 0 }}\n              animate={{\n                pathLength: 1,\n                opacity: 1,\n                transition: { duration: 0.2 },\n              }}\n            />\n          ) : (\n            <motion.path\n              strokeLinecap="round"\n              strokeLinejoin="round"\n              d="M4.5 12.75l6 6 9-13.5"\n              variants={{\n                checked: {\n                  pathLength: 1,\n                  opacity: 1,\n                  transition: {\n                    duration: 0.2,\n                    delay: 0.2,\n                  },\n                },\n                unchecked: {\n                  pathLength: 0,\n                  opacity: 0,\n                  transition: {\n                    duration: 0.2,\n                  },\n                },\n              }}\n            />\n          )}\n        </motion.svg>\n      }\n    ></CheckboxPrimitive.Indicator>\n  );\n}\n\nexport {\n  Checkbox,\n  CheckboxIndicator,\n  useCheckbox,\n  type CheckboxProps,\n  type CheckboxIndicatorProps,\n  type CheckboxContextType,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-checkbox',
  },
  'primitives-base-collapsible': {
    name: 'primitives-base-collapsible',
    description: 'A collapsible panel controlled by a button.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/collapsible/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/collapsible.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Collapsible as CollapsiblePrimitive } from '@base-ui-components/react/collapsible';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype CollapsibleContextType = {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n};\n\nconst [CollapsibleProvider, useCollapsible] =\n  getStrictContext<CollapsibleContextType>('CollapsibleContext');\n\ntype CollapsibleProps = React.ComponentProps<typeof CollapsiblePrimitive.Root>;\n\nfunction Collapsible(props: CollapsibleProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <CollapsibleProvider value={{ isOpen, setIsOpen }}>\n      <CollapsiblePrimitive.Root\n        data-slot=\"collapsible\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </CollapsibleProvider>\n  );\n}\n\ntype CollapsibleTriggerProps = React.ComponentProps<\n  typeof CollapsiblePrimitive.Trigger\n>;\n\nfunction CollapsibleTrigger(props: CollapsibleTriggerProps) {\n  return (\n    <CollapsiblePrimitive.Trigger data-slot=\"collapsible-trigger\" {...props} />\n  );\n}\n\ntype CollapsiblePanelProps = Omit<\n  React.ComponentProps<typeof CollapsiblePrimitive.Panel>,\n  'keepMounted' | 'render'\n> &\n  HTMLMotionProps<'div'> & {\n    keepRendered?: boolean;\n  };\n\nfunction CollapsiblePanel({\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  hiddenUntilFound,\n  keepRendered = false,\n  ...props\n}: CollapsiblePanelProps) {\n  const { isOpen } = useCollapsible();\n\n  return (\n    <AnimatePresence>\n      {keepRendered ? (\n        <CollapsiblePrimitive.Panel\n          hidden={false}\n          hiddenUntilFound={hiddenUntilFound}\n          keepMounted\n          render={\n            <motion.div\n              key=\"collapsible-panel\"\n              data-slot=\"collapsible-panel\"\n              initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              animate={\n                isOpen\n                  ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n                  : { height: 0, opacity: 0, '--mask-stop': '0%' }\n              }\n              transition={transition}\n              style={{\n                maskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                WebkitMaskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                overflow: 'hidden',\n              }}\n              {...props}\n            />\n          }\n        />\n      ) : (\n        isOpen && (\n          <CollapsiblePrimitive.Panel\n            hidden={false}\n            hiddenUntilFound={hiddenUntilFound}\n            keepMounted\n            render={\n              <motion.div\n                key=\"collapsible-panel\"\n                data-slot=\"collapsible-panel\"\n                initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n                exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                transition={transition}\n                style={{\n                  maskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  WebkitMaskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  overflow: 'hidden',\n                }}\n                {...props}\n              />\n            }\n          />\n        )\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsiblePanel,\n  useCollapsible,\n  type CollapsibleProps,\n  type CollapsibleTriggerProps,\n  type CollapsiblePanelProps,\n  type CollapsibleContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/collapsible/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-collapsible';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-collapsible',
  },
  'primitives-base-files': {
    name: 'primitives-base-files',
    description:
      'A component that allows you to display a list of files and folders.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-base-accordion',
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/files.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionPanel,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionHeaderProps,\n  type AccordionTriggerProps,\n  type AccordionPanelProps,\n} from '@/components/animate-ui/primitives/base/accordion';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype FilesContextType = {\n  open: string[];\n};\n\ntype FolderContextType = {\n  isOpen: boolean;\n};\n\nconst [FilesProvider, useFiles] =\n  getStrictContext<FilesContextType>('FilesContext');\n\nconst [FolderProvider, useFolder] =\n  getStrictContext<FolderContextType>('FolderContext');\n\ntype FilesProps = {\n  children: React.ReactNode;\n  defaultOpen?: string[];\n  open?: string[];\n  onOpenChange?: (open: string[]) => void;\n} & Omit<AccordionProps, 'type' | 'defaultValue' | 'value' | 'onValueChange'>;\n\nfunction Files({\n  children,\n  defaultOpen,\n  open,\n  onOpenChange,\n  style,\n  ...props\n}: FilesProps) {\n  const [openValue, setOpenValue] = useControlledState({\n    value: open,\n    defaultValue: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <FilesProvider value={{ open: openValue ?? [] }}>\n      <Accordion\n        data-slot=\"files\"\n        openMultiple\n        defaultValue={defaultOpen}\n        value={open}\n        onValueChange={setOpenValue}\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          ...style,\n        }}\n        {...props}\n      >\n        {children}\n      </Accordion>\n    </FilesProvider>\n  );\n}\n\ntype FilesHighlightProps = Omit<HighlightProps, 'controlledItems' | 'mode'>;\n\nfunction FilesHighlight({ hover = true, ...props }: FilesHighlightProps) {\n  return (\n    <Highlight\n      data-slot=\"files-highlight\"\n      controlledItems\n      mode=\"parent\"\n      hover={hover}\n      {...props}\n    />\n  );\n}\n\ntype FolderItemProps = AccordionItemProps;\n\nfunction FolderItem({ value, ...props }: FolderItemProps) {\n  const { open } = useFiles();\n\n  return (\n    <FolderProvider value={{ isOpen: open.includes(value) }}>\n      <AccordionItem data-slot=\"folder-item\" value={value} {...props} />\n    </FolderProvider>\n  );\n}\n\ntype FolderHeaderProps = AccordionHeaderProps;\n\nfunction FolderHeader(props: FolderHeaderProps) {\n  return <AccordionHeader data-slot=\"folder-header\" {...props} />;\n}\n\ntype FolderTriggerProps = AccordionTriggerProps;\n\nfunction FolderTrigger(props: FolderTriggerProps) {\n  return <AccordionTrigger data-slot=\"folder-trigger\" {...props} />;\n}\n\ntype FolderPanelProps = AccordionPanelProps;\n\nfunction FolderPanel(props: FolderPanelProps) {\n  return <AccordionPanel data-slot=\"folder-panel\" {...props} />;\n}\n\ntype FileHighlightProps = HighlightItemProps;\n\nfunction FileHighlight(props: FileHighlightProps) {\n  return <HighlightItem data-slot=\"file-highlight\" {...props} />;\n}\n\ntype FileProps = React.ComponentProps<'div'>;\n\nfunction File(props: FileProps) {\n  return <div data-slot=\"file\" {...props} />;\n}\n\ntype FileIconProps = React.ComponentProps<'span'>;\n\nfunction FileIcon(props: FileIconProps) {\n  return <span data-slot=\"file-icon\" {...props} />;\n}\n\ntype FileLabelProps = React.ComponentProps<'span'>;\n\nfunction FileLabel(props: FileLabelProps) {\n  return <span data-slot=\"file-label\" {...props} />;\n}\n\ntype FolderHighlightProps = HighlightItemProps;\n\nfunction FolderHighlight(props: FolderHighlightProps) {\n  return <HighlightItem data-slot=\"folder-highlight\" {...props} />;\n}\n\ntype FolderProps = React.ComponentProps<'div'>;\n\nfunction Folder(props: FolderProps) {\n  return <div data-slot=\"folder\" {...props} />;\n}\n\ntype FolderIconProps = HTMLMotionProps<'span'> & {\n  closeIcon: React.ReactNode;\n  openIcon: React.ReactNode;\n};\n\nfunction FolderIcon({\n  closeIcon,\n  openIcon,\n  transition = { duration: 0.15 },\n  ...props\n}: FolderIconProps) {\n  const { isOpen } = useFolder();\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.span\n        key={isOpen ? 'open' : 'close'}\n        data-slot=\"folder-icon\"\n        initial={{ scale: 0.9 }}\n        animate={{ scale: 1 }}\n        exit={{ scale: 0.9 }}\n        transition={transition}\n        {...props}\n      >\n        {isOpen ? openIcon : closeIcon}\n      </motion.span>\n    </AnimatePresence>\n  );\n}\n\ntype FolderLabelProps = React.ComponentProps<'span'>;\n\nfunction FolderLabel(props: FolderLabelProps) {\n  return <span data-slot=\"folder-label\" {...props} />;\n}\n\nexport {\n  Files,\n  FilesHighlight,\n  FolderItem,\n  FolderHeader,\n  FolderTrigger,\n  FolderPanel,\n  FileHighlight,\n  File,\n  FileIcon,\n  FileLabel,\n  FolderHighlight,\n  Folder,\n  FolderIcon,\n  FolderLabel,\n  useFiles,\n  useFolder,\n  type FilesProps,\n  type FilesHighlightProps,\n  type FolderItemProps,\n  type FolderHeaderProps,\n  type FolderTriggerProps,\n  type FolderPanelProps,\n  type FileHighlightProps,\n  type FileProps,\n  type FileIconProps,\n  type FileLabelProps,\n  type FolderHighlightProps,\n  type FolderProps,\n  type FolderIconProps,\n  type FolderLabelProps,\n  type FilesContextType,\n  type FolderContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/base/files/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-files',
  },
  'primitives-base-popover': {
    name: 'primitives-base-popover',
    description: 'An accessible popup anchored to a button.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/popover.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { Popover as PopoverPrimitive } from \'@base-ui-components/react/popover\';\nimport { AnimatePresence, motion, type HTMLMotionProps } from \'motion/react\';\n\nimport { getStrictContext } from \'@/components/animate-ui/hooks/use-strict-context\';\nimport { useControlledState } from \'@/components/animate-ui/hooks/use-controlled-state\';\n\ntype PopoverContextType = {\n  isOpen: boolean;\n  setIsOpen: (\n    isOpen: boolean,\n    event: Event | undefined,\n    reason: PopoverPrimitive.Root.OpenChangeReason | undefined,\n  ) => void;\n};\n\nconst [PopoverProvider, usePopover] =\n  getStrictContext<PopoverContextType>(\'PopoverContext\');\n\ntype PopoverProps = React.ComponentProps<typeof PopoverPrimitive.Root>;\n\nfunction Popover(props: PopoverProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <PopoverProvider value={{ isOpen, setIsOpen }}>\n      <PopoverPrimitive.Root\n        data-slot="popover"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </PopoverProvider>\n  );\n}\n\ntype PopoverTriggerProps = React.ComponentProps<\n  typeof PopoverPrimitive.Trigger\n>;\n\nfunction PopoverTrigger(props: PopoverTriggerProps) {\n  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;\n}\n\ntype PopoverPortalProps = Omit<\n  React.ComponentProps<typeof PopoverPrimitive.Portal>,\n  \'keepMounted\'\n>;\n\nfunction PopoverPortal(props: PopoverPortalProps) {\n  const { isOpen } = usePopover();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <PopoverPrimitive.Portal\n          keepMounted\n          data-slot="popover-portal"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype PopoverPositionerProps = React.ComponentProps<\n  typeof PopoverPrimitive.Positioner\n>;\n\nfunction PopoverPositioner(props: PopoverPositionerProps) {\n  return (\n    <PopoverPrimitive.Positioner data-slot="popover-positioner" {...props} />\n  );\n}\n\ntype PopoverPopupProps = Omit<\n  React.ComponentProps<typeof PopoverPrimitive.Popup>,\n  \'render\'\n> &\n  HTMLMotionProps<\'div\'>;\n\nfunction PopoverPopup({\n  initialFocus,\n  finalFocus,\n  transition = { type: \'spring\', stiffness: 300, damping: 25 },\n  ...props\n}: PopoverPopupProps) {\n  return (\n    <PopoverPrimitive.Popup\n      initialFocus={initialFocus}\n      finalFocus={finalFocus}\n      render={\n        <motion.div\n          key="popover-popup"\n          data-slot="popover-popup"\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.5 }}\n          transition={transition}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\ntype PopoverBackdropProps = React.ComponentProps<\n  typeof PopoverPrimitive.Backdrop\n>;\n\nfunction PopoverBackdrop(props: PopoverBackdropProps) {\n  return <PopoverPrimitive.Backdrop data-slot="popover-backdrop" {...props} />;\n}\n\ntype PopoverArrowProps = React.ComponentProps<typeof PopoverPrimitive.Arrow>;\n\nfunction PopoverArrow(props: PopoverArrowProps) {\n  return <PopoverPrimitive.Arrow data-slot="popover-arrow" {...props} />;\n}\n\ntype PopoverTitleProps = React.ComponentProps<typeof PopoverPrimitive.Title>;\n\nfunction PopoverTitle(props: PopoverTitleProps) {\n  return <PopoverPrimitive.Title data-slot="popover-title" {...props} />;\n}\n\ntype PopoverDescriptionProps = React.ComponentProps<\n  typeof PopoverPrimitive.Description\n>;\n\nfunction PopoverDescription(props: PopoverDescriptionProps) {\n  return (\n    <PopoverPrimitive.Description data-slot="popover-description" {...props} />\n  );\n}\n\ntype PopoverCloseProps = React.ComponentProps<typeof PopoverPrimitive.Close>;\n\nfunction PopoverClose(props: PopoverCloseProps) {\n  return <PopoverPrimitive.Close data-slot="popover-close" {...props} />;\n}\n\nexport {\n  Popover,\n  PopoverTrigger,\n  PopoverPortal,\n  PopoverPositioner,\n  PopoverPopup,\n  PopoverBackdrop,\n  PopoverArrow,\n  PopoverTitle,\n  PopoverDescription,\n  PopoverClose,\n  usePopover,\n  type PopoverProps,\n  type PopoverTriggerProps,\n  type PopoverPortalProps,\n  type PopoverPositionerProps,\n  type PopoverPopupProps,\n  type PopoverBackdropProps,\n  type PopoverArrowProps,\n  type PopoverTitleProps,\n  type PopoverDescriptionProps,\n  type PopoverCloseProps,\n  type PopoverContextType,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-popover',
  },
  'primitives-base-preview-card': {
    name: 'primitives-base-preview-card',
    description:
      'A popup that appears when a link is hovered, showing a preview for sighted users.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/preview-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/preview-card.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { PreviewCard as PreviewCardPrimitive } from '@base-ui-components/react/preview-card';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype PreviewCardContextType = {\n  isOpen: boolean;\n  setIsOpen: (\n    isOpen: boolean,\n    event: Event | undefined,\n    reason: PreviewCardPrimitive.Root.OpenChangeReason | undefined,\n  ) => void;\n};\n\nconst [PreviewCardProvider, usePreviewCard] =\n  getStrictContext<PreviewCardContextType>('PreviewCardContext');\n\ntype PreviewCardProps = React.ComponentProps<typeof PreviewCardPrimitive.Root>;\n\nfunction PreviewCard(props: PreviewCardProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <PreviewCardProvider value={{ isOpen, setIsOpen }}>\n      <PreviewCardPrimitive.Root\n        data-slot=\"preview-card\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </PreviewCardProvider>\n  );\n}\n\ntype PreviewCardTriggerProps = React.ComponentProps<\n  typeof PreviewCardPrimitive.Trigger\n>;\n\nfunction PreviewCardTrigger(props: PreviewCardTriggerProps) {\n  return (\n    <PreviewCardPrimitive.Trigger data-slot=\"preview-card-trigger\" {...props} />\n  );\n}\n\ntype PreviewCardPortalProps = Omit<\n  React.ComponentProps<typeof PreviewCardPrimitive.Portal>,\n  'keepMounted'\n>;\n\nfunction PreviewCardPortal(props: PreviewCardPortalProps) {\n  const { isOpen } = usePreviewCard();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <PreviewCardPrimitive.Portal\n          keepMounted\n          data-slot=\"preview-card-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype PreviewCardPositionerProps = React.ComponentProps<\n  typeof PreviewCardPrimitive.Positioner\n>;\n\nfunction PreviewCardPositioner(props: PreviewCardPositionerProps) {\n  return (\n    <PreviewCardPrimitive.Positioner\n      data-slot=\"preview-card-positioner\"\n      {...props}\n    />\n  );\n}\n\ntype PreviewCardPopupProps = Omit<\n  React.ComponentProps<typeof PreviewCardPrimitive.Popup>,\n  'render'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction PreviewCardPopup({\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: PreviewCardPopupProps) {\n  return (\n    <PreviewCardPrimitive.Popup\n      render={\n        <motion.div\n          key=\"preview-card-popup\"\n          data-slot=\"preview-card-popup\"\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.5 }}\n          transition={transition}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\ntype PreviewCardBackdropProps = React.ComponentProps<\n  typeof PreviewCardPrimitive.Backdrop\n>;\n\nfunction PreviewCardBackdrop(props: PreviewCardBackdropProps) {\n  return (\n    <PreviewCardPrimitive.Backdrop\n      data-slot=\"preview-card-backdrop\"\n      {...props}\n    />\n  );\n}\n\ntype PreviewCardArrowProps = React.ComponentProps<\n  typeof PreviewCardPrimitive.Arrow\n>;\n\nfunction PreviewCardArrow(props: PreviewCardArrowProps) {\n  return (\n    <PreviewCardPrimitive.Arrow data-slot=\"preview-card-arrow\" {...props} />\n  );\n}\n\nexport {\n  PreviewCard,\n  PreviewCardTrigger,\n  PreviewCardPortal,\n  PreviewCardPositioner,\n  PreviewCardPopup,\n  PreviewCardBackdrop,\n  PreviewCardArrow,\n  usePreviewCard,\n  type PreviewCardProps,\n  type PreviewCardTriggerProps,\n  type PreviewCardPortalProps,\n  type PreviewCardPositionerProps,\n  type PreviewCardPopupProps,\n  type PreviewCardBackdropProps,\n  type PreviewCardArrowProps,\n  type PreviewCardContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/preview-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-preview-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-preview-card',
  },
  'primitives-base-progress': {
    name: 'primitives-base-progress',
    description: 'Displays the status of a task that takes a long time.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/primitives-texts-counting-number',
    ],
    files: [
      {
        path: 'registry/primitives/base/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Progress as ProgressPrimitives } from '@base-ui-components/react/progress';\nimport { motion } from 'motion/react';\n\nimport {\n  CountingNumber,\n  type CountingNumberProps,\n} from '@/components/animate-ui/primitives/texts/counting-number';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype ProgressContextType = {\n  value: number;\n};\n\nconst [ProgressProvider, useProgress] =\n  getStrictContext<ProgressContextType>('ProgressContext');\n\ntype ProgressProps = React.ComponentProps<typeof ProgressPrimitives.Root>;\n\nconst Progress = (props: ProgressProps) => {\n  return (\n    <ProgressProvider value={{ value: props.value ?? 0 }}>\n      <ProgressPrimitives.Root data-slot=\"progress\" {...props} />\n    </ProgressProvider>\n  );\n};\n\ntype ProgressIndicatorProps = React.ComponentProps<\n  typeof MotionProgressIndicator\n>;\n\nconst MotionProgressIndicator = motion.create(ProgressPrimitives.Indicator);\n\nfunction ProgressIndicator({\n  transition = { type: 'spring', stiffness: 100, damping: 30 },\n  ...props\n}: ProgressIndicatorProps) {\n  const { value } = useProgress();\n\n  return (\n    <MotionProgressIndicator\n      data-slot=\"progress-indicator\"\n      animate={{ width: `${value}%` }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype ProgressTrackProps = React.ComponentProps<typeof ProgressPrimitives.Track>;\n\nfunction ProgressTrack(props: ProgressTrackProps) {\n  return <ProgressPrimitives.Track data-slot=\"progress-track\" {...props} />;\n}\n\ntype ProgressLabelProps = React.ComponentProps<typeof ProgressPrimitives.Label>;\n\nfunction ProgressLabel(props: ProgressLabelProps) {\n  return <ProgressPrimitives.Label data-slot=\"progress-label\" {...props} />;\n}\n\ntype ProgressValueProps = Omit<\n  React.ComponentProps<typeof ProgressPrimitives.Value>,\n  'render'\n> &\n  Omit<CountingNumberProps, 'number'>;\n\nfunction ProgressValue({\n  transition = { stiffness: 80, damping: 20 },\n  ...props\n}: ProgressValueProps) {\n  const { value } = useProgress();\n\n  return (\n    <ProgressPrimitives.Value\n      data-slot=\"progress-value\"\n      render={\n        <CountingNumber\n          number={value ?? 0}\n          transition={transition}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\nexport {\n  Progress,\n  ProgressIndicator,\n  ProgressTrack,\n  ProgressLabel,\n  ProgressValue,\n  useProgress,\n  type ProgressProps,\n  type ProgressIndicatorProps,\n  type ProgressTrackProps,\n  type ProgressLabelProps,\n  type ProgressValueProps,\n  type ProgressContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-progress',
  },
  'primitives-base-switch': {
    name: 'primitives-base-switch',
    description: 'A control that indicates whether a setting is on or off.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/switch.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Switch as SwitchPrimitives } from '@base-ui-components/react/switch';\nimport {\n  motion,\n  type TargetAndTransition,\n  type VariantLabels,\n  type HTMLMotionProps,\n  type LegacyAnimationControls,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype SwitchContextType = {\n  isChecked: boolean;\n  setIsChecked: (isChecked: boolean, event: Event) => void;\n  isPressed: boolean;\n  setIsPressed: (isPressed: boolean) => void;\n};\n\nconst [SwitchProvider, useSwitch] =\n  getStrictContext<SwitchContextType>('SwitchContext');\n\ntype SwitchProps = Omit<\n  React.ComponentProps<typeof SwitchPrimitives.Root>,\n  'render'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction Switch({\n  name,\n  defaultChecked,\n  checked,\n  onCheckedChange,\n  nativeButton,\n  disabled,\n  readOnly,\n  required,\n  inputRef,\n  id,\n  ...props\n}: SwitchProps) {\n  const [isPressed, setIsPressed] = React.useState(false);\n  const [isChecked, setIsChecked] = useControlledState({\n    value: checked,\n    defaultValue: defaultChecked,\n    onChange: onCheckedChange,\n  });\n\n  return (\n    <SwitchProvider\n      value={{ isChecked, setIsChecked, isPressed, setIsPressed }}\n    >\n      <SwitchPrimitives.Root\n        name={name}\n        defaultChecked={defaultChecked}\n        checked={checked}\n        onCheckedChange={setIsChecked}\n        nativeButton={nativeButton}\n        disabled={disabled}\n        readOnly={readOnly}\n        required={required}\n        inputRef={inputRef}\n        id={id}\n        render={\n          <motion.button\n            data-slot=\"switch\"\n            whileTap=\"tap\"\n            initial={false}\n            onTapStart={() => setIsPressed(true)}\n            onTapCancel={() => setIsPressed(false)}\n            onTap={() => setIsPressed(false)}\n            {...props}\n          />\n        }\n      />\n    </SwitchProvider>\n  );\n}\n\ntype SwitchThumbProps = Omit<\n  React.ComponentProps<typeof SwitchPrimitives.Thumb>,\n  'render'\n> &\n  HTMLMotionProps<'div'> & {\n    pressedAnimation?:\n      | TargetAndTransition\n      | VariantLabels\n      | boolean\n      | LegacyAnimationControls;\n  };\n\nfunction SwitchThumb({\n  pressedAnimation,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: SwitchThumbProps) {\n  const { isPressed } = useSwitch();\n\n  return (\n    <SwitchPrimitives.Thumb\n      render={\n        <motion.div\n          data-slot=\"switch-thumb\"\n          whileTap=\"tab\"\n          layout\n          transition={transition}\n          animate={isPressed ? pressedAnimation : undefined}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\ntype SwitchIconPosition = 'left' | 'right' | 'thumb';\n\ntype SwitchIconProps = HTMLMotionProps<'div'> & {\n  position: SwitchIconPosition;\n};\n\nfunction SwitchIcon({\n  position,\n  transition = { type: 'spring', bounce: 0 },\n  ...props\n}: SwitchIconProps) {\n  const { isChecked } = useSwitch();\n\n  const isAnimated = React.useMemo(() => {\n    if (position === 'right') return !isChecked;\n    if (position === 'left') return isChecked;\n    if (position === 'thumb') return true;\n    return false;\n  }, [position, isChecked]);\n\n  return (\n    <motion.div\n      data-slot={`switch-${position}-icon`}\n      animate={isAnimated ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Switch,\n  SwitchThumb,\n  SwitchIcon,\n  useSwitch,\n  type SwitchProps,\n  type SwitchThumbProps,\n  type SwitchIconProps,\n  type SwitchIconPosition,\n  type SwitchContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/base/switch/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-switch',
  },
  'primitives-base-toggle': {
    name: 'primitives-base-toggle',
    description: 'A two-state button that can be on or off.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/toggle.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Toggle as TogglePrimitive } from '@base-ui-components/react/toggle';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype ToggleContextType = {\n  isPressed: boolean;\n  setIsPressed: (isPressed: boolean, event: Event) => void;\n  disabled?: boolean;\n};\n\nconst [ToggleProvider, useToggle] =\n  getStrictContext<ToggleContextType>('ToggleContext');\n\ntype ToggleProps = Omit<\n  React.ComponentProps<typeof TogglePrimitive>,\n  'render'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction Toggle({\n  value,\n  pressed,\n  defaultPressed,\n  onPressedChange,\n  nativeButton,\n  disabled,\n  ...props\n}: ToggleProps) {\n  const [isPressed, setIsPressed] = useControlledState({\n    value: pressed,\n    defaultValue: defaultPressed,\n    onChange: onPressedChange,\n  });\n\n  return (\n    <ToggleProvider value={{ isPressed, setIsPressed, disabled }}>\n      <TogglePrimitive\n        value={value}\n        pressed={pressed}\n        defaultPressed={defaultPressed}\n        onPressedChange={setIsPressed}\n        nativeButton={nativeButton}\n        disabled={disabled}\n        render={\n          <motion.button\n            data-slot=\"toggle\"\n            whileTap={{ scale: 0.95 }}\n            {...props}\n          />\n        }\n      />\n    </ToggleProvider>\n  );\n}\n\ntype ToggleHighlightProps = HTMLMotionProps<'div'>;\n\nfunction ToggleHighlight({ style, ...props }: ToggleHighlightProps) {\n  const { isPressed, disabled } = useToggle();\n\n  return (\n    <AnimatePresence>\n      {isPressed && (\n        <motion.div\n          data-slot=\"toggle-highlight\"\n          aria-pressed={isPressed}\n          {...(isPressed && { 'data-pressed': true })}\n          {...(disabled && { 'data-disabled': true })}\n          style={{ position: 'absolute', zIndex: 0, inset: 0, ...style }}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype ToggleItemProps = HTMLMotionProps<'div'>;\n\nfunction ToggleItem({ style, ...props }: ToggleItemProps) {\n  const { isPressed, disabled } = useToggle();\n\n  return (\n    <motion.div\n      data-slot=\"toggle-item\"\n      aria-pressed={isPressed}\n      {...(isPressed && { 'data-pressed': true })}\n      {...(disabled && { 'data-disabled': true })}\n      style={{ position: 'relative', zIndex: 1, ...style }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Toggle,\n  ToggleHighlight,\n  ToggleItem,\n  useToggle,\n  type ToggleProps,\n  type ToggleHighlightProps,\n  type ToggleItemProps,\n  type ToggleContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/base/toggle/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-toggle',
  },
  'primitives-base-toggle-group': {
    name: 'primitives-base-toggle-group',
    description: 'Provides a shared state to a series of toggle buttons.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/primitives-effects-highlight',
    ],
    files: [
      {
        path: 'registry/primitives/base/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/toggle-group.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Toggle as TogglePrimitive } from '@base-ui-components/react/toggle';\nimport { ToggleGroup as ToggleGroupPrimitive } from '@base-ui-components/react/toggle-group';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype ToggleGroupContextType = {\n  value: any[];\n  setValue: (groupValue: any[], event: Event) => void;\n  toggleMultiple: boolean | undefined;\n};\n\nconst [ToggleGroupProvider, useToggleGroup] =\n  getStrictContext<ToggleGroupContextType>('ToggleGroupContext');\n\ntype ToggleGroupProps = React.ComponentProps<typeof ToggleGroupPrimitive>;\n\nfunction ToggleGroup(props: ToggleGroupProps) {\n  const [value, setValue] = useControlledState({\n    value: props.value as any[],\n    defaultValue: props.defaultValue as any[],\n    onChange: props.onValueChange,\n  });\n\n  return (\n    <ToggleGroupProvider\n      value={{ value, setValue, toggleMultiple: props.toggleMultiple }}\n    >\n      <ToggleGroupPrimitive\n        data-slot=\"toggle-group\"\n        {...props}\n        onValueChange={setValue}\n      />\n    </ToggleGroupProvider>\n  );\n}\n\ntype ToggleProps = Omit<\n  React.ComponentProps<typeof TogglePrimitive>,\n  'render'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction Toggle({\n  value,\n  pressed,\n  defaultPressed,\n  onPressedChange,\n  nativeButton,\n  disabled,\n  ...props\n}: ToggleProps) {\n  return (\n    <TogglePrimitive\n      value={value}\n      disabled={disabled}\n      pressed={pressed}\n      defaultPressed={defaultPressed}\n      onPressedChange={onPressedChange}\n      nativeButton={nativeButton}\n      render={\n        <motion.button\n          data-slot=\"toggle\"\n          whileTap={{ scale: 0.95 }}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\ntype ToggleGroupHighlightProps = Omit<HighlightProps, 'controlledItems'>;\n\nfunction ToggleGroupHighlight({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: ToggleGroupHighlightProps) {\n  const { value } = useToggleGroup();\n\n  return (\n    <Highlight\n      data-slot=\"toggle-group-highlight\"\n      controlledItems\n      value={value?.[0] ?? null}\n      exitDelay={0}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype ToggleHighlightProps = HighlightItemProps &\n  HTMLMotionProps<'div'> & {\n    children: React.ReactElement;\n  };\n\nfunction ToggleHighlight({ children, style, ...props }: ToggleHighlightProps) {\n  const { toggleMultiple, value } = useToggleGroup();\n\n  if (!toggleMultiple) {\n    return (\n      <HighlightItem\n        data-slot=\"toggle-highlight\"\n        style={{ inset: 0, ...style }}\n        {...props}\n      >\n        {children}\n      </HighlightItem>\n    );\n  }\n\n  if (toggleMultiple && React.isValidElement(children)) {\n    const isActive = props.value && value && value.includes(props.value);\n\n    const element = children as React.ReactElement<React.ComponentProps<'div'>>;\n\n    return React.cloneElement(\n      children,\n      {\n        style: {\n          ...element.props.style,\n          position: 'relative',\n        },\n        ...element.props,\n      },\n      <>\n        <AnimatePresence>\n          {isActive && (\n            <motion.div\n              data-slot=\"toggle-highlight\"\n              style={{ position: 'absolute', inset: 0, zIndex: 0, ...style }}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              {...props}\n            />\n          )}\n        </AnimatePresence>\n\n        <div\n          style={{\n            position: 'relative',\n            zIndex: 1,\n          }}\n        >\n          {element.props.children}\n        </div>\n      </>,\n    );\n  }\n}\n\nexport {\n  ToggleGroup,\n  ToggleGroupHighlight,\n  Toggle,\n  ToggleHighlight,\n  useToggleGroup,\n  type ToggleGroupProps,\n  type ToggleGroupHighlightProps,\n  type ToggleProps,\n  type ToggleHighlightProps,\n  type ToggleGroupContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-toggle-group',
  },
  'primitives-base-tooltip': {
    name: 'primitives-base-tooltip',
    description:
      'A popup that appears when an element is hovered or focused, showing a hint for sighted users.',
    type: 'registry:ui',
    dependencies: ['motion', '@base-ui-components/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/base/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/base/tooltip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Tooltip as TooltipPrimitive } from '@base-ui-components/react/tooltip';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype TooltipContextType = {\n  isOpen: boolean;\n  setIsOpen: (\n    isOpen: boolean,\n    event: Event | undefined,\n    reason: TooltipPrimitive.Root.OpenChangeReason | undefined,\n  ) => void;\n};\n\nconst [LocalTooltipProvider, useTooltip] =\n  getStrictContext<TooltipContextType>('TooltipContext');\n\ntype TooltipProviderProps = React.ComponentProps<\n  typeof TooltipPrimitive.Provider\n>;\n\nfunction TooltipProvider(props: TooltipProviderProps) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" {...props} />;\n}\n\ntype TooltipProps = React.ComponentProps<typeof TooltipPrimitive.Root>;\n\nfunction Tooltip(props: TooltipProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <LocalTooltipProvider value={{ isOpen, setIsOpen }}>\n      <TooltipPrimitive.Root\n        data-slot=\"tooltip\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </LocalTooltipProvider>\n  );\n}\n\ntype TooltipTriggerProps = React.ComponentProps<\n  typeof TooltipPrimitive.Trigger\n>;\n\nfunction TooltipTrigger(props: TooltipTriggerProps) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\ntype TooltipPortalProps = Omit<\n  React.ComponentProps<typeof TooltipPrimitive.Portal>,\n  'keepMounted'\n>;\n\nfunction TooltipPortal(props: TooltipPortalProps) {\n  const { isOpen } = useTooltip();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <TooltipPrimitive.Portal\n          keepMounted\n          data-slot=\"tooltip-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype TooltipPositionerProps = React.ComponentProps<\n  typeof TooltipPrimitive.Positioner\n>;\n\nfunction TooltipPositioner(props: TooltipPositionerProps) {\n  return (\n    <TooltipPrimitive.Positioner data-slot=\"tooltip-positioner\" {...props} />\n  );\n}\n\ntype TooltipPopupProps = Omit<\n  React.ComponentProps<typeof TooltipPrimitive.Popup>,\n  'render'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction TooltipPopup({\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: TooltipPopupProps) {\n  return (\n    <TooltipPrimitive.Popup\n      render={\n        <motion.div\n          key=\"tooltip-popup\"\n          data-slot=\"tooltip-popup\"\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.5 }}\n          transition={transition}\n          {...props}\n        />\n      }\n    />\n  );\n}\n\ntype TooltipArrowProps = React.ComponentProps<typeof TooltipPrimitive.Arrow>;\n\nfunction TooltipArrow(props: TooltipArrowProps) {\n  return <TooltipPrimitive.Arrow data-slot=\"tooltip-arrow\" {...props} />;\n}\n\nexport {\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipPositioner,\n  TooltipPopup,\n  TooltipArrow,\n  useTooltip,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipPortalProps,\n  type TooltipPositionerProps,\n  type TooltipPopupProps,\n  type TooltipArrowProps,\n  type TooltipContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/base/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-base-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-base-tooltip',
  },
  'primitives-buttons-button': {
    name: 'primitives-buttons-button',
    description: 'A simple button that animates on hover and tap.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-animate-slot'],
    files: [
      {
        path: 'registry/primitives/buttons/button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/buttons/button.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype ButtonProps = WithAsChild<\n  HTMLMotionProps<'button'> & {\n    hoverScale?: number;\n    tapScale?: number;\n  }\n>;\n\nfunction Button({\n  hoverScale = 1.05,\n  tapScale = 0.95,\n  asChild = false,\n  ...props\n}: ButtonProps) {\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      whileTap={{ scale: tapScale }}\n      whileHover={{ scale: hoverScale }}\n      {...props}\n    />\n  );\n}\n\nexport { Button, type ButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/buttons/button/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-buttons-button';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-buttons-button',
  },
  'primitives-buttons-flip': {
    name: 'primitives-buttons-flip',
    description: 'A button that flips between two states on hover.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/primitives-animate-slot',
    ],
    files: [
      {
        path: 'registry/primitives/buttons/flip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/buttons/flip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Variant } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\nconst buildVariant = ({\n  opacity,\n  rotation,\n  offset,\n  isVertical,\n  rotateAxis,\n}: {\n  opacity: number;\n  rotation: number;\n  offset: string | null;\n  isVertical: boolean;\n  rotateAxis: string;\n}): Variant => ({\n  opacity,\n  [rotateAxis]: rotation,\n  ...(isVertical && offset !== null ? { y: offset } : {}),\n  ...(!isVertical && offset !== null ? { x: offset } : {}),\n});\n\ntype FlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ntype FlipButtonContextType = {\n  from: FlipDirection;\n  isVertical: boolean;\n  rotateAxis: string;\n};\n\nconst [FlipButtonProvider, useFlipButton] =\n  getStrictContext<FlipButtonContextType>('FlipButtonContext');\n\ntype FlipButtonProps = WithAsChild<\n  HTMLMotionProps<'button'> & {\n    from?: FlipDirection;\n    tapScale?: number;\n  }\n>;\n\nfunction FlipButton({\n  from = 'top',\n  tapScale = 0.95,\n  asChild = false,\n  style,\n  ...props\n}: FlipButtonProps) {\n  const isVertical = from === 'top' || from === 'bottom';\n  const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <FlipButtonProvider value={{ from, isVertical, rotateAxis }}>\n      <Component\n        data-slot=\"flip-button\"\n        initial=\"initial\"\n        whileHover=\"hover\"\n        whileTap={{ scale: tapScale }}\n        style={{\n          display: 'inline-grid',\n          placeItems: 'center',\n          perspective: '1000px',\n          ...style,\n        }}\n        {...props}\n      />\n    </FlipButtonProvider>\n  );\n}\n\ntype FlipButtonFaceProps = WithAsChild<HTMLMotionProps<'span'>>;\n\nfunction FlipButtonFront({\n  transition = { type: 'spring', stiffness: 280, damping: 20 },\n  asChild = false,\n  style,\n  ...props\n}: FlipButtonFaceProps) {\n  const { from, isVertical, rotateAxis } = useFlipButton();\n\n  const frontOffset = from === 'top' || from === 'left' ? '50%' : '-50%';\n\n  const frontVariants = {\n    initial: buildVariant({\n      opacity: 1,\n      rotation: 0,\n      offset: '0%',\n      isVertical,\n      rotateAxis,\n    }),\n    hover: buildVariant({\n      opacity: 0,\n      rotation: 90,\n      offset: frontOffset,\n      isVertical,\n      rotateAxis,\n    }),\n  };\n\n  const Component = asChild ? Slot : motion.span;\n\n  return (\n    <Component\n      data-slot=\"flip-button-front\"\n      variants={frontVariants}\n      transition={transition}\n      style={{\n        gridArea: '1 / 1',\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\nfunction FlipButtonBack({\n  transition = { type: 'spring', stiffness: 280, damping: 20 },\n  asChild = false,\n  style,\n  ...props\n}: FlipButtonFaceProps) {\n  const { from, isVertical, rotateAxis } = useFlipButton();\n\n  const backOffset = from === 'top' || from === 'left' ? '-50%' : '50%';\n\n  const backVariants = {\n    initial: buildVariant({\n      opacity: 0,\n      rotation: 90,\n      offset: backOffset,\n      isVertical,\n      rotateAxis,\n    }),\n    hover: buildVariant({\n      opacity: 1,\n      rotation: 0,\n      offset: '0%',\n      isVertical,\n      rotateAxis,\n    }),\n  };\n\n  const Component = asChild ? Slot : motion.span;\n\n  return (\n    <Component\n      data-slot=\"flip-button-back\"\n      variants={backVariants}\n      transition={transition}\n      style={{\n        gridArea: '1 / 1',\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  FlipButton,\n  FlipButtonFront,\n  FlipButtonBack,\n  useFlipButton,\n  type FlipButtonProps,\n  type FlipButtonFaceProps as FlipButtonFrontProps,\n  type FlipButtonFaceProps as FlipButtonBackProps,\n  type FlipDirection,\n  type FlipButtonContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/buttons/flip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-buttons-flip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-buttons-flip',
  },
  'primitives-buttons-liquid': {
    name: 'primitives-buttons-liquid',
    description: 'A button that fills on hover.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/primitives-animate-slot',
    ],
    files: [
      {
        path: 'registry/primitives/buttons/liquid/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/buttons/liquid.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype LiquidButtonProps = WithAsChild<\n  HTMLMotionProps<'button'> & {\n    delay?: string;\n    fillHeight?: string;\n    hoverScale?: number;\n    tapScale?: number;\n  }\n>;\n\nfunction LiquidButton({\n  delay = '0.3s',\n  fillHeight = '3px',\n  hoverScale = 1.05,\n  tapScale = 0.95,\n  asChild = false,\n  ...props\n}: LiquidButtonProps) {\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <Component\n      whileTap={{ scale: tapScale }}\n      whileHover={{\n        scale: hoverScale,\n        '--liquid-button-fill-width': '100%',\n        '--liquid-button-fill-height': '100%',\n        '--liquid-button-delay': delay,\n        transition: {\n          '--liquid-button-fill-width': { duration: 0 },\n          '--liquid-button-fill-height': { duration: 0 },\n          '--liquid-button-delay': { duration: 0 },\n        },\n      }}\n      style={\n        {\n          '--liquid-button-fill-width': '-1%',\n          '--liquid-button-fill-height': fillHeight,\n          '--liquid-button-delay': '0s',\n          background:\n            'linear-gradient(var(--liquid-button-color) 0 0) no-repeat calc(200% - var(--liquid-button-fill-width, -1%)) 100% / 200% var(--liquid-button-fill-height, 0.2em)',\n          backgroundColor: 'var(--liquid-button-background-color)',\n          transition: `background ${delay} var(--liquid-button-delay, 0s), color ${delay} ${delay}, background-position ${delay} calc(${delay} - var(--liquid-button-delay, 0s))`,\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  );\n}\n\nexport { LiquidButton, type LiquidButtonProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/buttons/liquid/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-buttons-liquid';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-buttons-liquid',
  },
  'primitives-buttons-ripple': {
    name: 'primitives-buttons-ripple',
    description: 'A button that animates on tap with a ripple effect.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/primitives-animate-slot',
    ],
    files: [
      {
        path: 'registry/primitives/buttons/ripple/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/buttons/ripple.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype Ripple = {\n  id: number;\n  x: number;\n  y: number;\n};\n\ntype RippleButtonContextType = {\n  ripples: Ripple[];\n  setRipples: (ripples: Ripple[]) => void;\n};\n\nconst [RippleButtonProvider, useRippleButton] =\n  getStrictContext<RippleButtonContextType>('RippleButtonContext');\n\ntype RippleButtonProps = WithAsChild<\n  HTMLMotionProps<'button'> & {\n    hoverScale?: number;\n    tapScale?: number;\n  }\n>;\n\nfunction RippleButton({\n  ref,\n  onClick,\n  hoverScale = 1.05,\n  tapScale = 0.95,\n  asChild = false,\n  style,\n  ...props\n}: RippleButtonProps) {\n  const [ripples, setRipples] = React.useState<Ripple[]>([]);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n  React.useImperativeHandle(ref, () => buttonRef.current as HTMLButtonElement);\n\n  const createRipple = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const button = buttonRef.current;\n      if (!button) return;\n\n      const rect = button.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n\n      const newRipple: Ripple = {\n        id: Date.now(),\n        x,\n        y,\n      };\n\n      setRipples((prev) => [...prev, newRipple]);\n\n      setTimeout(() => {\n        setRipples((prev) => prev.filter((r) => r.id !== newRipple.id));\n      }, 600);\n    },\n    [],\n  );\n\n  const handleClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      createRipple(event);\n      if (onClick) {\n        onClick(event);\n      }\n    },\n    [createRipple, onClick],\n  );\n\n  const Component = asChild ? Slot : motion.button;\n\n  return (\n    <RippleButtonProvider value={{ ripples, setRipples }}>\n      <Component\n        ref={buttonRef}\n        data-slot=\"ripple-button\"\n        onClick={handleClick}\n        whileTap={{ scale: tapScale }}\n        whileHover={{ scale: hoverScale }}\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n          ...style,\n        }}\n        {...props}\n      />\n    </RippleButtonProvider>\n  );\n}\n\ntype RippleButtonRipplesProps = WithAsChild<\n  HTMLMotionProps<'span'> & {\n    color?: string;\n    scale?: number;\n  }\n>;\n\nfunction RippleButtonRipples({\n  color = 'var(--ripple-button-ripple-color)',\n  scale = 10,\n  transition = { duration: 0.6, ease: 'easeOut' },\n  asChild = false,\n  style,\n  ...props\n}: RippleButtonRipplesProps) {\n  const { ripples } = useRippleButton();\n\n  const Component = asChild ? Slot : motion.span;\n\n  return ripples.map((ripple) => (\n    <Component\n      key={ripple.id}\n      initial={{ scale: 0, opacity: 0.5 }}\n      animate={{ scale, opacity: 0 }}\n      transition={transition}\n      style={{\n        position: 'absolute',\n        borderRadius: '50%',\n        pointerEvents: 'none',\n        width: '20px',\n        height: '20px',\n        backgroundColor: color,\n        top: ripple.y - 10,\n        left: ripple.x - 10,\n        ...style,\n      }}\n      {...props}\n    />\n  ));\n}\n\nexport {\n  RippleButton,\n  RippleButtonRipples,\n  type RippleButtonProps,\n  type RippleButtonRipplesProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/buttons/ripple/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-buttons-ripple';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-buttons-ripple',
  },
  'primitives-effects-blur': {
    name: 'primitives-effects-blur',
    description:
      'An effect that allows you to animate elements with a blur effect on first view or load.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/blur/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/blur.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype BlurProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    delay?: number;\n    initialBlur?: number;\n    blur?: number;\n    ref?: React.Ref<HTMLElement>;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nfunction Blur({\n  ref,\n  transition = { type: 'spring', stiffness: 200, damping: 20 },\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  initialBlur = 10,\n  blur = 0,\n  asChild = false,\n  ...props\n}: BlurProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef as React.Ref<HTMLDivElement>}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      exit=\"hidden\"\n      variants={{\n        hidden: { filter: `blur(${initialBlur}px)` },\n        visible: { filter: `blur(${blur}px)` },\n      }}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype BlurListProps = Omit<BlurProps, 'children'> & {\n  children: React.ReactElement | React.ReactElement[];\n  holdDelay?: number;\n};\n\nfunction Blurs({\n  children,\n  delay = 0,\n  holdDelay = 0,\n  ...props\n}: BlurListProps) {\n  const array = React.Children.toArray(children) as React.ReactElement[];\n\n  return (\n    <>\n      {array.map((child, index) => (\n        <Blur\n          key={child.key ?? index}\n          delay={delay + index * holdDelay}\n          {...props}\n        >\n          {child}\n        </Blur>\n      ))}\n    </>\n  );\n}\n\nexport { Blur, Blurs, type BlurProps, type BlurListProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/blur/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-blur';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-blur',
  },
  'primitives-effects-effect': {
    name: 'primitives-effects-effect',
    description:
      'An effect that allows you to animate elements on first view or load.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/effect/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/effect.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Variant } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype SlideDirection = 'up' | 'down' | 'left' | 'right';\n\ntype Slide = {\n  direction?: SlideDirection;\n  offset?: number;\n};\n\ntype Fade = { initialOpacity?: number; opacity?: number };\n\ntype Zoom = {\n  initialScale?: number;\n  scale?: number;\n};\n\ntype Blur = {\n  initialBlur?: number;\n  blur?: number;\n};\n\ntype EffectProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    delay?: number;\n    blur?: Blur | boolean;\n    slide?: Slide | boolean;\n    fade?: Fade | boolean;\n    zoom?: Zoom | boolean;\n    ref?: React.Ref<HTMLElement>;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nconst DEFAULT_SLIDE_DIRECTION: SlideDirection = 'up';\nconst DEFAULT_SLIDE_OFFSET: number = 100;\nconst DEFAULT_FADE_INITIAL_OPACITY: number = 0;\nconst DEFAULT_FADE_OPACITY: number = 1;\nconst DEFAULT_ZOOM_INITIAL_SCALE: number = 0.5;\nconst DEFAULT_ZOOM_SCALE: number = 1;\nconst DEFAULT_BLUR_INITIAL_BLUR: number = 10;\nconst DEFAULT_BLUR_BLUR: number = 0;\n\nfunction Effect({\n  ref,\n  transition = { type: 'spring', stiffness: 200, damping: 20 },\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  blur = false,\n  slide = false,\n  fade = false,\n  zoom = false,\n  asChild = false,\n  ...props\n}: EffectProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const hiddenVariant: Variant = {};\n  const visibleVariant: Variant = {};\n\n  if (slide) {\n    const offset =\n      typeof slide === 'boolean'\n        ? DEFAULT_SLIDE_OFFSET\n        : (slide.offset ?? DEFAULT_SLIDE_OFFSET);\n    const direction =\n      typeof slide === 'boolean'\n        ? DEFAULT_SLIDE_DIRECTION\n        : (slide.direction ?? DEFAULT_SLIDE_DIRECTION);\n    const axis = direction === 'up' || direction === 'down' ? 'y' : 'x';\n    hiddenVariant[axis] =\n      direction === 'right' || direction === 'down' ? -offset : offset;\n    visibleVariant[axis] = 0;\n  }\n\n  if (fade) {\n    hiddenVariant.opacity =\n      typeof fade === 'boolean'\n        ? DEFAULT_FADE_INITIAL_OPACITY\n        : (fade.initialOpacity ?? DEFAULT_FADE_INITIAL_OPACITY);\n    visibleVariant.opacity =\n      typeof fade === 'boolean'\n        ? DEFAULT_FADE_OPACITY\n        : (fade.opacity ?? DEFAULT_FADE_OPACITY);\n  }\n\n  if (zoom) {\n    hiddenVariant.scale =\n      typeof zoom === 'boolean'\n        ? DEFAULT_ZOOM_INITIAL_SCALE\n        : (zoom.initialScale ?? DEFAULT_ZOOM_INITIAL_SCALE);\n    visibleVariant.scale =\n      typeof zoom === 'boolean'\n        ? DEFAULT_ZOOM_SCALE\n        : (zoom.scale ?? DEFAULT_ZOOM_SCALE);\n  }\n\n  if (blur) {\n    hiddenVariant.filter =\n      typeof blur === 'boolean'\n        ? `blur(${DEFAULT_BLUR_INITIAL_BLUR}px)`\n        : `blur(${blur.initialBlur ?? DEFAULT_BLUR_INITIAL_BLUR}px)`;\n    visibleVariant.filter =\n      typeof blur === 'boolean'\n        ? `blur(${DEFAULT_BLUR_BLUR}px)`\n        : `blur(${blur.blur ?? DEFAULT_BLUR_BLUR}px)`;\n  }\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef as React.Ref<HTMLDivElement>}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      exit=\"hidden\"\n      variants={{\n        hidden: hiddenVariant,\n        visible: visibleVariant,\n      }}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype EffectsProps = Omit<EffectProps, 'children'> & {\n  children: React.ReactElement | React.ReactElement[];\n  holdDelay?: number;\n};\n\nfunction Effects({\n  children,\n  delay = 0,\n  holdDelay = 0,\n  ...props\n}: EffectsProps) {\n  const array = React.Children.toArray(children) as React.ReactElement[];\n\n  return (\n    <>\n      {array.map((child, index) => (\n        <Effect\n          key={child.key ?? index}\n          delay={delay + index * holdDelay}\n          {...props}\n        >\n          {child}\n        </Effect>\n      ))}\n    </>\n  );\n}\n\nexport {\n  Effect,\n  Effects,\n  type EffectProps,\n  type EffectsProps,\n  type SlideDirection,\n  type Slide,\n  type Fade,\n  type Zoom,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/effect/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-effect';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-effect',
  },
  'primitives-effects-fade': {
    name: 'primitives-effects-fade',
    description:
      'An effect that allows you to animate elements with a fade effect on first view or load.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/fade/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/fade.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Variant } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype FadeProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    delay?: number;\n    initialOpacity?: number;\n    opacity?: number;\n    ref?: React.Ref<HTMLElement>;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nfunction Fade({\n  ref,\n  transition = { type: 'spring', stiffness: 200, damping: 20 },\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  initialOpacity = 0,\n  opacity = 1,\n  asChild = false,\n  ...props\n}: FadeProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef as React.Ref<HTMLDivElement>}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      exit=\"hidden\"\n      variants={{\n        hidden: { opacity: initialOpacity },\n        visible: { opacity },\n      }}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype FadeListProps = Omit<FadeProps, 'children'> & {\n  children: React.ReactElement | React.ReactElement[];\n  holdDelay?: number;\n};\n\nfunction Fades({\n  children,\n  delay = 0,\n  holdDelay = 0,\n  ...props\n}: FadeListProps) {\n  const array = React.Children.toArray(children) as React.ReactElement[];\n\n  return (\n    <>\n      {array.map((child, index) => (\n        <Fade\n          key={child.key ?? index}\n          delay={delay + index * holdDelay}\n          {...props}\n        >\n          {child}\n        </Fade>\n      ))}\n    </>\n  );\n}\n\nexport { Fade, Fades, type FadeProps, type FadeListProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/fade/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-fade';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-fade',
  },
  'primitives-effects-highlight': {
    name: 'primitives-effects-highlight',
    description:
      'A highlight effect that allows you to highlight elements on hover, click or with a controlled value.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/primitives/effects/highlight/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/highlight.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, Transition, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype HighlightMode = 'children' | 'parent';\n\ntype Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\ntype HighlightContextType<T extends string> = {\n  as?: keyof HTMLElementTagNameMap;\n  mode: HighlightMode;\n  activeValue: T | null;\n  setActiveValue: (value: T | null) => void;\n  setBounds: (bounds: DOMRect) => void;\n  clearBounds: () => void;\n  id: string;\n  hover: boolean;\n  className?: string;\n  style?: React.CSSProperties;\n  activeClassName?: string;\n  setActiveClassName: (className: string) => void;\n  transition?: Transition;\n  disabled?: boolean;\n  enabled?: boolean;\n  exitDelay?: number;\n  forceUpdateBounds?: boolean;\n};\n\nconst HighlightContext = React.createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  HighlightContextType<any> | undefined\n>(undefined);\n\nfunction useHighlight<T extends string>(): HighlightContextType<T> {\n  const context = React.useContext(HighlightContext);\n  if (!context) {\n    throw new Error('useHighlight must be used within a HighlightProvider');\n  }\n  return context as unknown as HighlightContextType<T>;\n}\n\ntype BaseHighlightProps<T extends React.ElementType = 'div'> = {\n  as?: T;\n  ref?: React.Ref<HTMLDivElement>;\n  mode?: HighlightMode;\n  value?: string | null;\n  defaultValue?: string | null;\n  onValueChange?: (value: string | null) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  transition?: Transition;\n  hover?: boolean;\n  disabled?: boolean;\n  enabled?: boolean;\n  exitDelay?: number;\n};\n\ntype ParentModeHighlightProps = {\n  boundsOffset?: Partial<Bounds>;\n  containerClassName?: string;\n  forceUpdateBounds?: boolean;\n};\n\ntype ControlledParentModeHighlightProps<T extends React.ElementType = 'div'> =\n  BaseHighlightProps<T> &\n    ParentModeHighlightProps & {\n      mode: 'parent';\n      controlledItems: true;\n      children: React.ReactNode;\n    };\n\ntype ControlledChildrenModeHighlightProps<T extends React.ElementType = 'div'> =\n  BaseHighlightProps<T> & {\n    mode?: 'children' | undefined;\n    controlledItems: true;\n    children: React.ReactNode;\n  };\n\ntype UncontrolledParentModeHighlightProps<T extends React.ElementType = 'div'> =\n  BaseHighlightProps<T> &\n    ParentModeHighlightProps & {\n      mode: 'parent';\n      controlledItems?: false;\n      itemsClassName?: string;\n      children: React.ReactElement | React.ReactElement[];\n    };\n\ntype UncontrolledChildrenModeHighlightProps<\n  T extends React.ElementType = 'div',\n> = BaseHighlightProps<T> & {\n  mode?: 'children';\n  controlledItems?: false;\n  itemsClassName?: string;\n  children: React.ReactElement | React.ReactElement[];\n};\n\ntype HighlightProps<T extends React.ElementType = 'div'> =\n  | ControlledParentModeHighlightProps<T>\n  | ControlledChildrenModeHighlightProps<T>\n  | UncontrolledParentModeHighlightProps<T>\n  | UncontrolledChildrenModeHighlightProps<T>;\n\nfunction Highlight<T extends React.ElementType = 'div'>({\n  ref,\n  ...props\n}: HighlightProps<T>) {\n  const {\n    as: Component = 'div',\n    children,\n    value,\n    defaultValue,\n    onValueChange,\n    className,\n    style,\n    transition = { type: 'spring', stiffness: 350, damping: 35 },\n    hover = false,\n    enabled = true,\n    controlledItems,\n    disabled = false,\n    exitDelay = 200,\n    mode = 'children',\n  } = props;\n\n  const localRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n  const [activeValue, setActiveValue] = React.useState<string | null>(\n    value ?? defaultValue ?? null,\n  );\n  const [boundsState, setBoundsState] = React.useState<Bounds | null>(null);\n  const [activeClassNameState, setActiveClassNameState] =\n    React.useState<string>('');\n\n  const safeSetActiveValue = React.useCallback(\n    (id: string | null) => {\n      setActiveValue((prev) => (prev === id ? prev : id));\n      if (id !== activeValue) onValueChange?.(id);\n    },\n    [activeValue, onValueChange],\n  );\n\n  const safeSetBounds = React.useCallback(\n    (bounds: DOMRect) => {\n      if (!localRef.current) return;\n\n      const boundsOffset = (props as ParentModeHighlightProps)\n        ?.boundsOffset ?? {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0,\n      };\n\n      const containerRect = localRef.current.getBoundingClientRect();\n      const newBounds: Bounds = {\n        top: bounds.top - containerRect.top + (boundsOffset.top ?? 0),\n        left: bounds.left - containerRect.left + (boundsOffset.left ?? 0),\n        width: bounds.width + (boundsOffset.width ?? 0),\n        height: bounds.height + (boundsOffset.height ?? 0),\n      };\n\n      setBoundsState((prev) => {\n        if (\n          prev &&\n          prev.top === newBounds.top &&\n          prev.left === newBounds.left &&\n          prev.width === newBounds.width &&\n          prev.height === newBounds.height\n        ) {\n          return prev;\n        }\n        return newBounds;\n      });\n    },\n    [props],\n  );\n\n  const clearBounds = React.useCallback(() => {\n    setBoundsState((prev) => (prev === null ? prev : null));\n  }, []);\n\n  React.useEffect(() => {\n    if (value !== undefined) setActiveValue(value);\n    else if (defaultValue !== undefined) setActiveValue(defaultValue);\n  }, [value, defaultValue]);\n\n  const id = React.useId();\n\n  React.useEffect(() => {\n    if (mode !== 'parent') return;\n    const container = localRef.current;\n    if (!container) return;\n\n    const onScroll = () => {\n      if (!activeValue) return;\n      const activeEl = container.querySelector<HTMLElement>(\n        `[data-value=\"${activeValue}\"][data-highlight=\"true\"]`,\n      );\n      if (activeEl) safeSetBounds(activeEl.getBoundingClientRect());\n    };\n\n    container.addEventListener('scroll', onScroll, { passive: true });\n    return () => container.removeEventListener('scroll', onScroll);\n  }, [mode, activeValue, safeSetBounds]);\n\n  const render = React.useCallback(\n    (children: React.ReactNode) => {\n      if (mode === 'parent') {\n        return (\n          <Component\n            ref={localRef}\n            data-slot=\"motion-highlight-container\"\n            style={{ position: 'relative', zIndex: 1 }}\n            className={(props as ParentModeHighlightProps)?.containerClassName}\n          >\n            <AnimatePresence initial={false} mode=\"wait\">\n              {boundsState && (\n                <motion.div\n                  data-slot=\"motion-highlight\"\n                  animate={{\n                    top: boundsState.top,\n                    left: boundsState.left,\n                    width: boundsState.width,\n                    height: boundsState.height,\n                    opacity: 1,\n                  }}\n                  initial={{\n                    top: boundsState.top,\n                    left: boundsState.left,\n                    width: boundsState.width,\n                    height: boundsState.height,\n                    opacity: 0,\n                  }}\n                  exit={{\n                    opacity: 0,\n                    transition: {\n                      ...transition,\n                      delay: (transition?.delay ?? 0) + (exitDelay ?? 0) / 1000,\n                    },\n                  }}\n                  transition={transition}\n                  style={{ position: 'absolute', zIndex: 0, ...style }}\n                  className={cn(className, activeClassNameState)}\n                />\n              )}\n            </AnimatePresence>\n            {children}\n          </Component>\n        );\n      }\n\n      return children;\n    },\n    [\n      mode,\n      props,\n      boundsState,\n      transition,\n      exitDelay,\n      className,\n      activeClassNameState,\n    ],\n  );\n\n  return (\n    <HighlightContext.Provider\n      value={{\n        mode,\n        activeValue,\n        setActiveValue: safeSetActiveValue,\n        id,\n        hover,\n        className,\n        style,\n        transition,\n        disabled,\n        enabled,\n        exitDelay,\n        setBounds: safeSetBounds,\n        clearBounds,\n        activeClassName: activeClassNameState,\n        setActiveClassName: setActiveClassNameState,\n        forceUpdateBounds: (props as ParentModeHighlightProps)\n          ?.forceUpdateBounds,\n      }}\n    >\n      {enabled\n        ? controlledItems\n          ? render(children)\n          : render(\n              React.Children.map(children, (child, index) => (\n                <HighlightItem key={index} className={props?.itemsClassName}>\n                  {child}\n                </HighlightItem>\n              )),\n            )\n        : children}\n    </HighlightContext.Provider>\n  );\n}\n\nfunction getNonOverridingDataAttributes(\n  element: React.ReactElement,\n  dataAttributes: Record<string, unknown>,\n): Record<string, unknown> {\n  return Object.keys(dataAttributes).reduce<Record<string, unknown>>(\n    (acc, key) => {\n      if ((element.props as Record<string, unknown>)[key] === undefined) {\n        acc[key] = dataAttributes[key];\n      }\n      return acc;\n    },\n    {},\n  );\n}\n\ntype ExtendedChildProps = React.ComponentProps<'div'> & {\n  id?: string;\n  ref?: React.Ref<HTMLElement>;\n  'data-active'?: string;\n  'data-value'?: string;\n  'data-disabled'?: boolean;\n  'data-highlight'?: boolean;\n  'data-slot'?: string;\n};\n\ntype HighlightItemProps<T extends React.ElementType = 'div'> =\n  React.ComponentProps<T> & {\n    as?: T;\n    children: React.ReactElement;\n    id?: string;\n    value?: string;\n    className?: string;\n    style?: React.CSSProperties;\n    transition?: Transition;\n    activeClassName?: string;\n    disabled?: boolean;\n    exitDelay?: number;\n    asChild?: boolean;\n    forceUpdateBounds?: boolean;\n  };\n\nfunction HighlightItem<T extends React.ElementType>({\n  ref,\n  as,\n  children,\n  id,\n  value,\n  className,\n  style,\n  transition,\n  disabled = false,\n  activeClassName,\n  exitDelay,\n  asChild = false,\n  forceUpdateBounds,\n  ...props\n}: HighlightItemProps<T>) {\n  const itemId = React.useId();\n  const {\n    activeValue,\n    setActiveValue,\n    mode,\n    setBounds,\n    clearBounds,\n    hover,\n    enabled,\n    className: contextClassName,\n    style: contextStyle,\n    transition: contextTransition,\n    id: contextId,\n    disabled: contextDisabled,\n    exitDelay: contextExitDelay,\n    forceUpdateBounds: contextForceUpdateBounds,\n    setActiveClassName,\n  } = useHighlight();\n\n  const Component = as ?? 'div';\n  const element = children as React.ReactElement<ExtendedChildProps>;\n  const childValue =\n    id ?? value ?? element.props?.['data-value'] ?? element.props?.id ?? itemId;\n  const isActive = activeValue === childValue;\n  const isDisabled = disabled === undefined ? contextDisabled : disabled;\n  const itemTransition = transition ?? contextTransition;\n\n  const localRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n  React.useEffect(() => {\n    if (mode !== 'parent') return;\n    let rafId: number;\n    let previousBounds: Bounds | null = null;\n    const shouldUpdateBounds =\n      forceUpdateBounds === true ||\n      (contextForceUpdateBounds && forceUpdateBounds !== false);\n\n    const updateBounds = () => {\n      if (!localRef.current) return;\n\n      const bounds = localRef.current.getBoundingClientRect();\n\n      if (shouldUpdateBounds) {\n        if (\n          previousBounds &&\n          previousBounds.top === bounds.top &&\n          previousBounds.left === bounds.left &&\n          previousBounds.width === bounds.width &&\n          previousBounds.height === bounds.height\n        ) {\n          rafId = requestAnimationFrame(updateBounds);\n          return;\n        }\n        previousBounds = bounds;\n        rafId = requestAnimationFrame(updateBounds);\n      }\n\n      setBounds(bounds);\n    };\n\n    if (isActive) {\n      updateBounds();\n      setActiveClassName(activeClassName ?? '');\n    } else if (!activeValue) clearBounds();\n\n    if (shouldUpdateBounds) return () => cancelAnimationFrame(rafId);\n  }, [\n    mode,\n    isActive,\n    activeValue,\n    setBounds,\n    clearBounds,\n    activeClassName,\n    setActiveClassName,\n    forceUpdateBounds,\n    contextForceUpdateBounds,\n  ]);\n\n  if (!React.isValidElement(children)) return children;\n\n  const dataAttributes = {\n    'data-active': isActive ? 'true' : 'false',\n    'aria-selected': isActive,\n    'data-disabled': isDisabled,\n    'data-value': childValue,\n    'data-highlight': true,\n  };\n\n  const commonHandlers = hover\n    ? {\n        onMouseEnter: (e: React.MouseEvent<HTMLDivElement>) => {\n          setActiveValue(childValue);\n          element.props.onMouseEnter?.(e);\n        },\n        onMouseLeave: (e: React.MouseEvent<HTMLDivElement>) => {\n          setActiveValue(null);\n          element.props.onMouseLeave?.(e);\n        },\n      }\n    : {\n        onClick: (e: React.MouseEvent<HTMLDivElement>) => {\n          setActiveValue(childValue);\n          element.props.onClick?.(e);\n        },\n      };\n\n  if (asChild) {\n    if (mode === 'children') {\n      return React.cloneElement(\n        element,\n        {\n          key: childValue,\n          ref: localRef,\n          className: cn('relative', element.props.className),\n          ...getNonOverridingDataAttributes(element, {\n            ...dataAttributes,\n            'data-slot': 'motion-highlight-item-container',\n          }),\n          ...commonHandlers,\n          ...props,\n        },\n        <>\n          <AnimatePresence initial={false} mode=\"wait\">\n            {isActive && !isDisabled && (\n              <motion.div\n                layoutId={`transition-background-${contextId}`}\n                data-slot=\"motion-highlight\"\n                style={{\n                  position: 'absolute',\n                  zIndex: 0,\n                  ...contextStyle,\n                  ...style,\n                }}\n                className={cn(contextClassName, activeClassName)}\n                transition={itemTransition}\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{\n                  opacity: 0,\n                  transition: {\n                    ...itemTransition,\n                    delay:\n                      (itemTransition?.delay ?? 0) +\n                      (exitDelay ?? contextExitDelay ?? 0) / 1000,\n                  },\n                }}\n                {...dataAttributes}\n              />\n            )}\n          </AnimatePresence>\n\n          <Component\n            data-slot=\"motion-highlight-item\"\n            style={{ position: 'relative', zIndex: 1 }}\n            className={className}\n            {...dataAttributes}\n          >\n            {children}\n          </Component>\n        </>,\n      );\n    }\n\n    return React.cloneElement(element, {\n      ref: localRef,\n      ...getNonOverridingDataAttributes(element, {\n        ...dataAttributes,\n        'data-slot': 'motion-highlight-item',\n      }),\n      ...commonHandlers,\n    });\n  }\n\n  return enabled ? (\n    <Component\n      key={childValue}\n      ref={localRef}\n      data-slot=\"motion-highlight-item-container\"\n      className={cn(mode === 'children' && 'relative', className)}\n      {...dataAttributes}\n      {...props}\n      {...commonHandlers}\n    >\n      {mode === 'children' && (\n        <AnimatePresence initial={false} mode=\"wait\">\n          {isActive && !isDisabled && (\n            <motion.div\n              layoutId={`transition-background-${contextId}`}\n              data-slot=\"motion-highlight\"\n              style={{\n                position: 'absolute',\n                zIndex: 0,\n                ...contextStyle,\n                ...style,\n              }}\n              className={cn(contextClassName, activeClassName)}\n              transition={itemTransition}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{\n                opacity: 0,\n                transition: {\n                  ...itemTransition,\n                  delay:\n                    (itemTransition?.delay ?? 0) +\n                    (exitDelay ?? contextExitDelay ?? 0) / 1000,\n                },\n              }}\n              {...dataAttributes}\n            />\n          )}\n        </AnimatePresence>\n      )}\n\n      {React.cloneElement(element, {\n        style: { position: 'relative', zIndex: 1 },\n        className: element.props.className,\n        ...getNonOverridingDataAttributes(element, {\n          ...dataAttributes,\n          'data-slot': 'motion-highlight-item',\n        }),\n      })}\n    </Component>\n  ) : (\n    children\n  );\n}\n\nexport {\n  Highlight,\n  HighlightItem,\n  useHighlight,\n  type HighlightProps,\n  type HighlightItemProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/highlight/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-highlight';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-highlight',
  },
  'primitives-effects-magnetic': {
    name: 'primitives-effects-magnetic',
    description:
      'A magnetic effect that clings to the cursor, creating a magnetic attraction effect.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/primitives-animate-slot'],
    files: [
      {
        path: 'registry/primitives/effects/magnetic/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/magnetic.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  type SpringOptions,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype MagneticProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    strength?: number;\n    range?: number;\n    springOptions?: SpringOptions;\n    onlyOnHover?: boolean;\n    disableOnTouch?: boolean;\n    ref?: React.Ref<HTMLElement>;\n  } & HTMLMotionProps<'div'>\n>;\n\nfunction Magnetic({\n  ref,\n  strength = 0.5,\n  range = 120,\n  springOptions = { stiffness: 100, damping: 10, mass: 0.5 },\n  onlyOnHover = false,\n  disableOnTouch = true,\n  style,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseMove,\n  asChild = false,\n  ...props\n}: MagneticProps) {\n  const localRef = React.useRef<HTMLDivElement>(null);\n  React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n  const isTouchDevice = React.useMemo(() => {\n    if (typeof window === 'undefined') return false;\n    return window.matchMedia('(pointer:coarse)').matches;\n  }, []);\n\n  const [active, setActive] = React.useState(!onlyOnHover);\n\n  const rawX = useMotionValue(0);\n  const rawY = useMotionValue(0);\n  const x = useSpring(rawX, springOptions);\n  const y = useSpring(rawY, springOptions);\n\n  const compute = React.useCallback(\n    (e: MouseEvent | React.MouseEvent) => {\n      if (!localRef.current) return;\n      const { left, top, width, height } =\n        localRef.current.getBoundingClientRect();\n      const cx = left + width / 2;\n      const cy = top + height / 2;\n      const dx = e.clientX - cx;\n      const dy = e.clientY - cy;\n      const dist = Math.hypot(dx, dy);\n\n      if ((active || !onlyOnHover) && dist <= range) {\n        const factor = (1 - dist / range) * strength;\n        rawX.set(dx * factor);\n        rawY.set(dy * factor);\n      } else {\n        rawX.set(0);\n        rawY.set(0);\n      }\n    },\n    [active, onlyOnHover, range, strength, rawX, rawY],\n  );\n\n  React.useEffect(() => {\n    if (disableOnTouch && isTouchDevice) return;\n    const handle = (e: MouseEvent) => compute(e);\n    window.addEventListener('mousemove', handle);\n    return () => window.removeEventListener('mousemove', handle);\n  }, [compute, disableOnTouch, isTouchDevice]);\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef}\n      style={{ display: 'inline-block', ...style, x, y }}\n      onMouseEnter={(e: React.MouseEvent<HTMLDivElement>) => {\n        if (onlyOnHover) setActive(true);\n        onMouseEnter?.(e);\n      }}\n      onMouseLeave={(e: React.MouseEvent<HTMLDivElement>) => {\n        if (onlyOnHover) setActive(false);\n        rawX.set(0);\n        rawY.set(0);\n        onMouseLeave?.(e);\n      }}\n      onMouseMove={(e: React.MouseEvent<HTMLDivElement>) => {\n        if (onlyOnHover) compute(e);\n        onMouseMove?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n\nexport { Magnetic, type MagneticProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/magnetic/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-magnetic';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-magnetic',
  },
  'primitives-effects-particles': {
    name: 'primitives-effects-particles',
    description: 'A particles effect that creates a particle system.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/particles/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/particles.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\ntype Align = 'start' | 'center' | 'end';\n\ntype ParticlesContextType = {\n  animate: boolean;\n  isInView: boolean;\n};\n\nconst [ParticlesProvider, useParticles] =\n  getStrictContext<ParticlesContextType>('ParticlesContext');\n\ntype ParticlesProps = WithAsChild<\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    animate?: boolean;\n    children: React.ReactNode;\n  } & UseIsInViewOptions\n>;\n\nfunction Particles({\n  ref,\n  animate = true,\n  asChild = false,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  children,\n  style,\n  ...props\n}: ParticlesProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    { inView, inViewOnce, inViewMargin },\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <ParticlesProvider value={{ animate, isInView }}>\n      <Component\n        ref={localRef}\n        style={{ position: 'relative', ...style }}\n        {...props}\n      >\n        {children}\n      </Component>\n    </ParticlesProvider>\n  );\n}\n\ntype ParticlesEffectProps = Omit<HTMLMotionProps<'div'>, 'children'> & {\n  side?: Side;\n  align?: Align;\n  count?: number;\n  radius?: number;\n  spread?: number;\n  duration?: number;\n  holdDelay?: number;\n  sideOffset?: number;\n  alignOffset?: number;\n  delay?: number;\n};\n\nfunction ParticlesEffect({\n  side = 'top',\n  align = 'center',\n  count = 6,\n  radius = 30,\n  spread = 360,\n  duration = 0.8,\n  holdDelay = 0.05,\n  sideOffset = 0,\n  alignOffset = 0,\n  delay = 0,\n  transition,\n  style,\n  ...props\n}: ParticlesEffectProps) {\n  const { animate, isInView } = useParticles();\n\n  const isVertical = side === 'top' || side === 'bottom';\n  const alignPct = align === 'start' ? '0%' : align === 'end' ? '100%' : '50%';\n\n  const top = isVertical\n    ? side === 'top'\n      ? `calc(0% - ${sideOffset}px)`\n      : `calc(100% + ${sideOffset}px)`\n    : `calc(${alignPct} + ${alignOffset}px)`;\n\n  const left = isVertical\n    ? `calc(${alignPct} + ${alignOffset}px)`\n    : side === 'left'\n      ? `calc(0% - ${sideOffset}px)`\n      : `calc(100% + ${sideOffset}px)`;\n\n  const containerStyle: React.CSSProperties = {\n    position: 'absolute',\n    top,\n    left,\n    transform: 'translate(-50%, -50%)',\n  };\n\n  const angleStep = (spread * (Math.PI / 180)) / Math.max(1, count - 1);\n\n  return (\n    <AnimatePresence>\n      {animate &&\n        isInView &&\n        [...Array(count)].map((_, i) => {\n          const angle = i * angleStep;\n          const x = Math.cos(angle) * radius;\n          const y = Math.sin(angle) * radius;\n\n          return (\n            <motion.div\n              key={i}\n              style={{ ...containerStyle, ...style }}\n              initial={{ scale: 0, opacity: 0 }}\n              animate={{\n                x: `${x}px`,\n                y: `${y}px`,\n                scale: [0, 1, 0],\n                opacity: [0, 1, 0],\n              }}\n              transition={{\n                duration,\n                delay: delay + i * holdDelay,\n                ease: 'easeOut',\n                ...transition,\n              }}\n              {...props}\n            />\n          );\n        })}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Particles,\n  ParticlesEffect,\n  type ParticlesProps,\n  type ParticlesEffectProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/particles/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-particles';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-particles',
  },
  'primitives-effects-slide': {
    name: 'primitives-effects-slide',
    description:
      'An effect that allows you to animate elements with a slide effect on first view or load.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/slide/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/slide.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Variant } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype SlideDirection = 'up' | 'down' | 'left' | 'right';\n\ntype SlideProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    delay?: number;\n    direction?: SlideDirection;\n    offset?: number;\n    ref?: React.Ref<HTMLElement>;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nfunction Slide({\n  ref,\n  transition = { type: 'spring', stiffness: 200, damping: 20 },\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  direction = 'up',\n  offset = 100,\n  asChild = false,\n  ...props\n}: SlideProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const axis = direction === 'up' || direction === 'down' ? 'y' : 'x';\n  const hidden: Variant = {\n    [axis]: direction === 'right' || direction === 'down' ? -offset : offset,\n  };\n  const visible: Variant = { [axis]: 0 };\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef as React.Ref<HTMLDivElement>}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      exit=\"hidden\"\n      variants={{ hidden, visible }}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype SlideListProps = Omit<SlideProps, 'children'> & {\n  children: React.ReactElement | React.ReactElement[];\n  holdDelay?: number;\n};\n\nfunction Slides({\n  children,\n  delay = 0,\n  holdDelay = 0,\n  ...props\n}: SlideListProps) {\n  const array = React.Children.toArray(children) as React.ReactElement[];\n\n  return (\n    <>\n      {array.map((child, index) => (\n        <Slide\n          key={child.key ?? index}\n          delay={delay + index * holdDelay}\n          {...props}\n        >\n          {child}\n        </Slide>\n      ))}\n    </>\n  );\n}\n\nexport {\n  Slide,\n  Slides,\n  type SlideProps,\n  type SlideListProps,\n  type SlideDirection,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/slide/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-slide';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-slide',
  },
  'primitives-effects-zoom': {
    name: 'primitives-effects-zoom',
    description:
      'An effect that allows you to animate elements with a zoom effect on first view or load.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-animate-slot',
      'https://animate-ui.com/r/hooks-use-is-in-view',
    ],
    files: [
      {
        path: 'registry/primitives/effects/zoom/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/effects/zoom.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { Slot, type WithAsChild } from '@/components/animate-ui/primitives/animate/slot';\n\ntype ZoomProps = WithAsChild<\n  {\n    children?: React.ReactNode;\n    delay?: number;\n    initialScale?: number;\n    scale?: number;\n    ref?: React.Ref<HTMLElement>;\n  } & UseIsInViewOptions &\n    HTMLMotionProps<'div'>\n>;\n\nfunction Zoom({\n  ref,\n  transition = { type: 'spring', stiffness: 200, damping: 20 },\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  initialScale = 0.5,\n  scale = 1,\n  asChild = false,\n  ...props\n}: ZoomProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const Component = asChild ? Slot : motion.div;\n\n  return (\n    <Component\n      ref={localRef as React.Ref<HTMLDivElement>}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      exit=\"hidden\"\n      variants={{\n        hidden: { scale: initialScale },\n        visible: { scale },\n      }}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype ZoomListProps = Omit<ZoomProps, 'children'> & {\n  children: React.ReactElement | React.ReactElement[];\n  holdDelay?: number;\n};\n\nfunction Zooms({\n  children,\n  delay = 0,\n  holdDelay = 0,\n  ...props\n}: ZoomListProps) {\n  const array = React.Children.toArray(children) as React.ReactElement[];\n\n  return (\n    <>\n      {array.map((child, index) => (\n        <Zoom\n          key={child.key ?? index}\n          delay={delay + index * holdDelay}\n          {...props}\n        >\n          {child}\n        </Zoom>\n      ))}\n    </>\n  );\n}\n\nexport { Zoom, Zooms, type ZoomProps, type ZoomListProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/effects/zoom/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-effects-zoom';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-effects-zoom',
  },
  'primitives-headless-checkbox': {
    name: 'primitives-headless-checkbox',
    description:
      "Checkboxes provide the same functionality as native HTML checkboxes, without any of the styling, giving you a clean slate to design them however you'd like.",
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/primitives/headless/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/checkbox.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  Checkbox as CheckboxPrimitive,\n  type CheckboxProps as CheckboxPrimitiveProps,\n} from \'@headlessui/react\';\nimport {\n  motion,\n  type SVGMotionProps,\n  type HTMLMotionProps,\n} from \'motion/react\';\n\nimport { getStrictContext } from \'@/components/animate-ui/hooks/use-strict-context\';\n\ntype CheckboxContextType = {\n  isChecked: boolean;\n  isIndeterminate: boolean;\n};\n\nconst [CheckboxProvider, useCheckbox] =\n  getStrictContext<CheckboxContextType>(\'CheckboxContext\');\n\ntype CheckboxProps<TTag extends React.ElementType = typeof motion.button> =\n  CheckboxPrimitiveProps<TTag> &\n    Omit<\n      HTMLMotionProps<\'button\'>,\n      \'checked\' | \'onChange\' | \'defaultChecked\' | \'children\'\n    > & {\n      as?: TTag;\n    };\n\nfunction Checkbox<TTag extends React.ElementType = typeof motion.button>({\n  children,\n  ...props\n}: CheckboxProps<TTag>) {\n  const { as = motion.button, ...rest } = props;\n\n  return (\n    <CheckboxPrimitive\n      data-slot="checkbox"\n      whileTap={{ scale: 0.95 }}\n      whileHover={{ scale: 1.05 }}\n      {...rest}\n      as={as as React.ElementType}\n    >\n      {(bag) => (\n        <CheckboxProvider\n          value={{ isChecked: bag.checked, isIndeterminate: bag.indeterminate }}\n        >\n          {typeof children === \'function\' ? children(bag) : children}\n        </CheckboxProvider>\n      )}\n    </CheckboxPrimitive>\n  );\n}\n\ntype CheckboxIndicatorProps = SVGMotionProps<SVGSVGElement>;\n\nfunction CheckboxIndicator(props: CheckboxIndicatorProps) {\n  const { isChecked, isIndeterminate } = useCheckbox();\n\n  return (\n    <motion.svg\n      data-slot="checkbox-indicator"\n      xmlns="http://www.w3.org/2000/svg"\n      fill="none"\n      viewBox="0 0 24 24"\n      strokeWidth="3.5"\n      stroke="currentColor"\n      initial="unchecked"\n      animate={isChecked ? \'checked\' : \'unchecked\'}\n      {...props}\n    >\n      {isIndeterminate ? (\n        <motion.line\n          x1="5"\n          y1="12"\n          x2="19"\n          y2="12"\n          strokeLinecap="round"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{\n            pathLength: 1,\n            opacity: 1,\n            transition: { duration: 0.2 },\n          }}\n        />\n      ) : (\n        <motion.path\n          strokeLinecap="round"\n          strokeLinejoin="round"\n          d="M4.5 12.75l6 6 9-13.5"\n          variants={{\n            checked: {\n              pathLength: 1,\n              opacity: 1,\n              transition: {\n                duration: 0.2,\n                delay: 0.2,\n              },\n            },\n            unchecked: {\n              pathLength: 0,\n              opacity: 0,\n              transition: {\n                duration: 0.2,\n              },\n            },\n          }}\n        />\n      )}\n    </motion.svg>\n  );\n}\n\nexport {\n  Checkbox,\n  CheckboxIndicator,\n  useCheckbox,\n  type CheckboxProps,\n  type CheckboxIndicatorProps,\n  type CheckboxContextType,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-checkbox',
  },
  'primitives-headless-dialog': {
    name: 'primitives-headless-dialog',
    description:
      'A fully-managed, renderless dialog component jam-packed with accessibility and keyboard features, perfect for building completely custom dialogs and alerts.',
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/primitives/headless/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/dialog.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Dialog as DialogPrimitive,\n  DialogBackdrop as DialogBackdropPrimitive,\n  DialogPanel as DialogPanelPrimitive,\n  DialogTitle as DialogTitlePrimitive,\n  Description as DialogDescriptionPrimitive,\n  type DialogProps as DialogPrimitiveProps,\n  type DialogBackdropProps as DialogBackdropPrimitiveProps,\n  type DialogPanelProps as DialogPanelPrimitiveProps,\n  type DialogTitleProps as DialogTitlePrimitiveProps,\n  CloseButton,\n  CloseButtonProps,\n} from '@headlessui/react';\nimport {\n  motion,\n  AnimatePresence,\n  type Transition,\n  type HTMLMotionProps,\n} from 'motion/react';\n\ntype DialogProps<TTag extends React.ElementType = 'div'> = Omit<\n  DialogPrimitiveProps<TTag>,\n  'static'\n> & {\n  className?: string;\n  as?: TTag;\n};\n\nfunction Dialog<TTag extends React.ElementType = 'div'>({\n  className,\n  ...props\n}: DialogProps<TTag>) {\n  return (\n    <AnimatePresence>\n      {props?.open && (\n        <DialogPrimitive\n          data-slot=\"dialog\"\n          className={className}\n          {...props}\n          static\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype DialogBackdropProps<TTag extends React.ElementType = typeof motion.div> =\n  Omit<DialogBackdropPrimitiveProps<TTag>, 'transition'> &\n    HTMLMotionProps<'div'> & {\n      as?: TTag;\n    };\n\nfunction DialogBackdrop<TTag extends React.ElementType = typeof motion.div>(\n  props: DialogBackdropProps<TTag>,\n) {\n  const {\n    as = motion.div,\n    transition = { duration: 0.2, ease: 'easeInOut' },\n    ...rest\n  } = props;\n\n  return (\n    <DialogBackdropPrimitive\n      key=\"dialog-backdrop\"\n      data-slot=\"dialog-backdrop\"\n      as={as as React.ElementType}\n      initial={{ opacity: 0, filter: 'blur(4px)', transition }}\n      animate={{ opacity: 1, filter: 'blur(0px)', transition }}\n      exit={{ opacity: 0, filter: 'blur(4px)', transition }}\n      {...rest}\n    />\n  );\n}\n\ntype DialogFlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ntype DialogPanelProps<TTag extends React.ElementType = typeof motion.div> =\n  Omit<DialogPanelPrimitiveProps<TTag>, 'transition'> &\n    Omit<HTMLMotionProps<'div'>, 'children'> & {\n      from?: DialogFlipDirection;\n      transition?: Transition;\n      as?: TTag;\n    };\n\nfunction DialogPanel<TTag extends React.ElementType = typeof motion.div>(\n  props: DialogPanelProps<TTag>,\n) {\n  const {\n    children,\n    as = motion.div,\n    from = 'top',\n    transition = { type: 'spring', stiffness: 150, damping: 25 },\n    ...rest\n  } = props;\n\n  const initialRotation =\n    from === 'bottom' || from === 'left' ? '20deg' : '-20deg';\n  const isVertical = from === 'top' || from === 'bottom';\n  const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n  return (\n    <DialogPanelPrimitive\n      key=\"dialog-panel\"\n      data-slot=\"dialog-panel\"\n      as={as as React.ElementType}\n      initial={{\n        opacity: 0,\n        filter: 'blur(4px)',\n        transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n        transition,\n      }}\n      animate={{\n        opacity: 1,\n        filter: 'blur(0px)',\n        transform: `perspective(500px) ${rotateAxis}(0deg) scale(1)`,\n        transition,\n      }}\n      exit={{\n        opacity: 0,\n        filter: 'blur(4px)',\n        transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n        transition,\n      }}\n      {...rest}\n    >\n      {(bag) => (\n        <>{typeof children === 'function' ? children(bag) : children}</>\n      )}\n    </DialogPanelPrimitive>\n  );\n}\n\ntype DialogCloseProps<TTag extends React.ElementType = 'div'> =\n  CloseButtonProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction DialogClose<TTag extends React.ElementType = 'button'>(\n  props: DialogCloseProps<TTag>,\n) {\n  const { as = 'button', ...rest } = props;\n\n  return (\n    <CloseButton\n      data-slot=\"dialog-close\"\n      as={as as React.ElementType}\n      {...rest}\n    />\n  );\n}\n\ntype DialogHeaderProps<TTag extends React.ElementType = 'div'> =\n  React.ComponentProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction DialogHeader<TTag extends React.ElementType = 'div'>({\n  as: Component = 'div',\n  ...props\n}: DialogHeaderProps<TTag>) {\n  return <Component data-slot=\"dialog-header\" {...props} />;\n}\n\ntype DialogFooterProps<TTag extends React.ElementType = 'div'> =\n  React.ComponentProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction DialogFooter({ as: Component = 'div', ...props }: DialogFooterProps) {\n  return <Component data-slot=\"dialog-footer\" {...props} />;\n}\n\ntype DialogTitleProps<TTag extends React.ElementType = 'h2'> =\n  DialogTitlePrimitiveProps<TTag> & {\n    as?: TTag;\n    className?: string;\n  };\n\nfunction DialogTitle<TTag extends React.ElementType = 'h2'>(\n  props: DialogTitleProps<TTag>,\n) {\n  return <DialogTitlePrimitive data-slot=\"dialog-title\" {...props} />;\n}\n\ntype DialogDescriptionProps<TTag extends React.ElementType = 'div'> =\n  React.ComponentProps<typeof DialogDescriptionPrimitive<TTag>> & {\n    as?: TTag;\n    className?: string;\n  };\n\nfunction DialogDescription<TTag extends React.ElementType = 'div'>(\n  props: DialogDescriptionProps<TTag>,\n) {\n  return (\n    <DialogDescriptionPrimitive data-slot=\"dialog-description\" {...props} />\n  );\n}\n\nexport {\n  Dialog,\n  DialogBackdrop,\n  DialogPanel,\n  DialogClose,\n  DialogTitle,\n  DialogDescription,\n  DialogHeader,\n  DialogFooter,\n  type DialogProps,\n  type DialogBackdropProps,\n  type DialogPanelProps,\n  type DialogCloseProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n  type DialogFlipDirection,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-dialog',
  },
  'primitives-headless-disclosure': {
    name: 'primitives-headless-disclosure',
    description:
      'A simple, accessible foundation for building custom UIs that show and hide content, like togglable accordion panels.',
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-strict-context'],
    files: [
      {
        path: 'registry/primitives/headless/disclosure/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/disclosure.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Disclosure as DisclosurePrimitive,\n  DisclosureButton as DisclosureButtonPrimitive,\n  DisclosurePanel as DisclosurePanelPrimitive,\n  type DisclosureProps as DisclosurePrimitiveProps,\n  type DisclosureButtonProps as DisclosureButtonPrimitiveProps,\n  type DisclosurePanelProps as DisclosurePanelPrimitiveProps,\n} from '@headlessui/react';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype DisclosureContextType = {\n  isOpen: boolean;\n};\n\nconst [DisclosureProvider, useDisclosure] =\n  getStrictContext<DisclosureContextType>('DisclosureContext');\n\ntype DisclosureProps<TTag extends React.ElementType = 'div'> =\n  DisclosurePrimitiveProps<TTag> & {\n    as?: TTag;\n    className?: string;\n  };\n\nfunction Disclosure<TTag extends React.ElementType = 'div'>({\n  children,\n  ...props\n}: DisclosureProps<TTag>) {\n  return (\n    <DisclosurePrimitive data-slot=\"disclosure\" {...props}>\n      {(bag) => (\n        <DisclosureProvider value={{ isOpen: bag.open }}>\n          {typeof children === 'function' ? children(bag) : children}\n        </DisclosureProvider>\n      )}\n    </DisclosurePrimitive>\n  );\n}\n\ntype DisclosureButtonProps<TTag extends React.ElementType = 'button'> =\n  DisclosureButtonPrimitiveProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction DisclosureButton<TTag extends React.ElementType = 'button'>(\n  props: DisclosureButtonProps<TTag>,\n) {\n  return <DisclosureButtonPrimitive data-slot=\"disclosure-button\" {...props} />;\n}\n\ntype DisclosurePanelProps<TTag extends React.ElementType = typeof motion.div> =\n  Pick<DisclosurePanelPrimitiveProps<TTag>, 'static' | 'unmount' | 'children'> &\n    Omit<HTMLMotionProps<'div'>, 'children'> & {\n      as?: TTag;\n      keepRendered?: boolean;\n    };\n\nfunction DisclosurePanel<TTag extends React.ElementType = typeof motion.div>(\n  props: DisclosurePanelProps<TTag>,\n) {\n  const {\n    children,\n    transition = { type: 'spring', stiffness: 150, damping: 22 },\n    as = motion.div,\n    unmount,\n    keepRendered = false,\n    ...rest\n  } = props;\n  const { isOpen } = useDisclosure();\n\n  return (\n    <AnimatePresence>\n      {keepRendered ? (\n        <DisclosurePanelPrimitive\n          static\n          as={as as React.ElementType}\n          unmount={unmount}\n        >\n          {(bag) => (\n            <motion.div\n              key=\"disclosure-panel\"\n              data-slot=\"disclosure-panel\"\n              initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              animate={\n                isOpen\n                  ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n                  : { height: 0, opacity: 0, '--mask-stop': '0%' }\n              }\n              transition={transition}\n              style={{\n                maskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                WebkitMaskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                overflow: 'hidden',\n              }}\n              {...rest}\n            >\n              {typeof children === 'function' ? children(bag) : children}\n            </motion.div>\n          )}\n        </DisclosurePanelPrimitive>\n      ) : (\n        isOpen && (\n          <DisclosurePanelPrimitive\n            static\n            as={as as React.ElementType}\n            unmount={unmount}\n          >\n            {(bag) => (\n              <motion.div\n                key=\"disclosure-panel\"\n                data-slot=\"disclosure-panel\"\n                initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n                exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n                transition={transition}\n                style={{\n                  maskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  WebkitMaskImage:\n                    'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                  overflow: 'hidden',\n                }}\n                {...rest}\n              >\n                {typeof children === 'function' ? children(bag) : children}\n              </motion.div>\n            )}\n          </DisclosurePanelPrimitive>\n        )\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n  useDisclosure,\n  type DisclosureProps,\n  type DisclosureButtonProps,\n  type DisclosurePanelProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/disclosure/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-disclosure';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-disclosure',
  },
  'primitives-headless-popover': {
    name: 'primitives-headless-popover',
    description:
      'Popovers are perfect for floating panels with arbitrary content like navigation menus, mobile menus and flyout menus.',
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-strict-context'],
    files: [
      {
        path: 'registry/primitives/headless/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/popover.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Popover as PopoverPrimitive,\n  PopoverButton as PopoverButtonPrimitive,\n  PopoverPanel as PopoverPanelPrimitive,\n  PopoverBackdrop as PopoverBackdropPrimitive,\n  PopoverGroup as PopoverGroupPrimitive,\n  type PopoverProps as PopoverPrimitiveProps,\n  type PopoverButtonProps as PopoverButtonPrimitiveProps,\n  type PopoverPanelProps as PopoverPanelPrimitiveProps,\n  type PopoverBackdropProps as PopoverBackdropPrimitiveProps,\n  type PopoverGroupProps as PopoverGroupPrimitiveProps,\n} from '@headlessui/react';\nimport {\n  AnimatePresence,\n  motion,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype PopoverContextType = {\n  isOpen: boolean;\n};\n\nconst [PopoverProvider, usePopover] =\n  getStrictContext<PopoverContextType>('PopoverContext');\n\ntype PopoverProps<TTag extends React.ElementType = 'div'> =\n  PopoverPrimitiveProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction Popover<TTag extends React.ElementType = 'div'>({\n  children,\n  ...props\n}: PopoverProps<TTag>) {\n  return (\n    <PopoverPrimitive data-slot=\"popover\" {...props}>\n      {(bag) => (\n        <PopoverProvider value={{ isOpen: bag.open }}>\n          {typeof children === 'function' ? children(bag) : children}\n        </PopoverProvider>\n      )}\n    </PopoverPrimitive>\n  );\n}\n\ntype PopoverButtonProps<TTag extends React.ElementType = 'button'> =\n  PopoverButtonPrimitiveProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction PopoverButton<TTag extends React.ElementType = 'button'>(\n  props: PopoverButtonProps<TTag>,\n) {\n  return <PopoverButtonPrimitive data-slot=\"popover-button\" {...props} />;\n}\n\ntype PopoverBackdropProps<TTag extends React.ElementType = 'div'> =\n  PopoverBackdropPrimitiveProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction PopoverBackdrop<TTag extends React.ElementType = 'div'>(\n  props: PopoverBackdropProps<TTag>,\n) {\n  return <PopoverBackdropPrimitive data-slot=\"popover-backdrop\" {...props} />;\n}\n\ntype PopoverGroupProps<TTag extends React.ElementType = 'div'> =\n  PopoverGroupPrimitiveProps<TTag> & {\n    as?: TTag;\n  };\n\nfunction PopoverGroup<TTag extends React.ElementType = 'div'>(\n  props: PopoverGroupProps<TTag>,\n) {\n  return <PopoverGroupPrimitive data-slot=\"popover-group\" {...props} />;\n}\n\ntype PopoverPanelProps<TTag extends React.ElementType = 'div'> = Omit<\n  PopoverPanelPrimitiveProps<TTag>,\n  'transition'\n> &\n  Omit<HTMLMotionProps<'div'>, 'children'> & {\n    transition?: Transition;\n    as?: TTag;\n  };\n\nfunction PopoverPanel<TTag extends React.ElementType = 'div'>(\n  props: PopoverPanelProps<TTag>,\n) {\n  const {\n    transition = { type: 'spring', stiffness: 300, damping: 25 },\n    as = motion.div,\n    ...rest\n  } = props;\n\n  const { isOpen } = usePopover();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <PopoverPanelPrimitive\n          key=\"popover-panel\"\n          data-slot=\"popover-panel\"\n          static\n          as={as}\n          initial={{ opacity: 0, scale: 0.5, transition }}\n          animate={{ opacity: 1, scale: 1, transition }}\n          exit={{ opacity: 0, scale: 0.5, transition }}\n          {...rest}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Popover,\n  PopoverButton,\n  PopoverPanel,\n  PopoverBackdrop,\n  PopoverGroup,\n  type PopoverProps,\n  type PopoverButtonProps,\n  type PopoverPanelProps,\n  type PopoverBackdropProps,\n  type PopoverGroupProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-popover',
  },
  'primitives-headless-switch': {
    name: 'primitives-headless-switch',
    description:
      'Switches are a pleasant interface for toggling a value between two states, and offer the same semantics and keyboard navigation as native checkbox elements.',
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-strict-context'],
    files: [
      {
        path: 'registry/primitives/headless/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/switch.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Switch as SwitchPrimitive,\n  type SwitchProps as SwitchPrimitiveProps,\n} from '@headlessui/react';\nimport {\n  motion,\n  type TargetAndTransition,\n  type VariantLabels,\n  type HTMLMotionProps,\n  type LegacyAnimationControls,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype SwitchContextType = {\n  isChecked: boolean;\n  isPressed: boolean;\n};\n\nconst [SwitchProvider, useSwitch] =\n  getStrictContext<SwitchContextType>('SwitchContext');\n\ntype SwitchProps<TTag extends React.ElementType = typeof motion.button> =\n  SwitchPrimitiveProps<TTag> &\n    HTMLMotionProps<'button'> & {\n      as?: TTag;\n    };\n\nfunction Switch<TTag extends React.ElementType = typeof motion.button>(\n  props: SwitchProps<TTag>,\n) {\n  const { as = motion.button, children, ...rest } = props;\n\n  const [isPressed, setIsPressed] = React.useState(false);\n\n  return (\n    <SwitchPrimitive\n      data-slot=\"switch\"\n      whileTap=\"tap\"\n      initial={false}\n      onTapStart={() => setIsPressed(true)}\n      onTapCancel={() => setIsPressed(false)}\n      onTap={() => setIsPressed(false)}\n      {...rest}\n      as={as}\n    >\n      {(bag) => (\n        <SwitchProvider value={{ isPressed, isChecked: bag.checked }}>\n          {typeof children === 'function' ? children(bag) : children}\n        </SwitchProvider>\n      )}\n    </SwitchPrimitive>\n  );\n}\n\ntype SwitchThumbProps<TTag extends React.ElementType = typeof motion.div> =\n  HTMLMotionProps<'div'> & {\n    as?: TTag;\n    pressedAnimation?:\n      | TargetAndTransition\n      | VariantLabels\n      | boolean\n      | LegacyAnimationControls;\n  };\n\nfunction SwitchThumb<TTag extends React.ElementType = typeof motion.div>(\n  props: SwitchThumbProps<TTag>,\n) {\n  const { isPressed, isChecked } = useSwitch();\n\n  const {\n    transition = { type: 'spring', stiffness: 300, damping: 25 },\n    pressedAnimation,\n    as: Component = motion.div,\n    ...rest\n  } = props;\n\n  return (\n    <Component\n      data-slot=\"switch-thumb\"\n      whileTap=\"tab\"\n      layout\n      transition={transition}\n      animate={isPressed ? pressedAnimation : undefined}\n      {...(isChecked && { 'data-checked': true })}\n      {...rest}\n    />\n  );\n}\n\ntype SwitchIconPosition = 'left' | 'right' | 'thumb';\n\ntype SwitchIconProps<TTag extends React.ElementType = typeof motion.div> =\n  HTMLMotionProps<'div'> & {\n    position: SwitchIconPosition;\n    as?: TTag;\n  };\n\nfunction SwitchIcon<TTag extends React.ElementType = typeof motion.div>(\n  props: SwitchIconProps<TTag>,\n) {\n  const {\n    position,\n    transition = { type: 'spring', bounce: 0 },\n    as: Component = motion.div,\n    ...rest\n  } = props;\n  const { isChecked } = useSwitch();\n\n  const isAnimated = React.useMemo(() => {\n    if (position === 'right') return !isChecked;\n    if (position === 'left') return isChecked;\n    if (position === 'thumb') return true;\n    return false;\n  }, [position, isChecked]);\n\n  return (\n    <Component\n      data-slot={`switch-${position}-icon`}\n      animate={isAnimated ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }}\n      transition={transition}\n      {...rest}\n    />\n  );\n}\n\nexport {\n  Switch,\n  SwitchThumb,\n  SwitchIcon,\n  type SwitchProps,\n  type SwitchThumbProps,\n  type SwitchIconProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-switch',
  },
  'primitives-headless-tabs': {
    name: 'primitives-headless-tabs',
    description:
      'Easily create accessible, fully customizable tab interfaces, with robust focus management and keyboard navigation support.',
    type: 'registry:ui',
    dependencies: ['motion', '@headlessui/react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/primitives-effects-highlight',
    ],
    files: [
      {
        path: 'registry/primitives/headless/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/headless/switch.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  Switch as SwitchPrimitive,\n  type SwitchProps as SwitchPrimitiveProps,\n} from '@headlessui/react';\nimport {\n  motion,\n  type TargetAndTransition,\n  type VariantLabels,\n  type HTMLMotionProps,\n  type LegacyAnimationControls,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype SwitchContextType = {\n  isChecked: boolean;\n  isPressed: boolean;\n};\n\nconst [SwitchProvider, useSwitch] =\n  getStrictContext<SwitchContextType>('SwitchContext');\n\ntype SwitchProps<TTag extends React.ElementType = typeof motion.button> =\n  SwitchPrimitiveProps<TTag> &\n    HTMLMotionProps<'button'> & {\n      as?: TTag;\n    };\n\nfunction Switch<TTag extends React.ElementType = typeof motion.button>(\n  props: SwitchProps<TTag>,\n) {\n  const { as = motion.button, children, ...rest } = props;\n\n  const [isPressed, setIsPressed] = React.useState(false);\n\n  return (\n    <SwitchPrimitive\n      data-slot=\"switch\"\n      whileTap=\"tap\"\n      initial={false}\n      onTapStart={() => setIsPressed(true)}\n      onTapCancel={() => setIsPressed(false)}\n      onTap={() => setIsPressed(false)}\n      {...rest}\n      as={as}\n    >\n      {(bag) => (\n        <SwitchProvider value={{ isPressed, isChecked: bag.checked }}>\n          {typeof children === 'function' ? children(bag) : children}\n        </SwitchProvider>\n      )}\n    </SwitchPrimitive>\n  );\n}\n\ntype SwitchThumbProps<TTag extends React.ElementType = typeof motion.div> =\n  HTMLMotionProps<'div'> & {\n    as?: TTag;\n    pressedAnimation?:\n      | TargetAndTransition\n      | VariantLabels\n      | boolean\n      | LegacyAnimationControls;\n  };\n\nfunction SwitchThumb<TTag extends React.ElementType = typeof motion.div>(\n  props: SwitchThumbProps<TTag>,\n) {\n  const { isPressed, isChecked } = useSwitch();\n\n  const {\n    transition = { type: 'spring', stiffness: 300, damping: 25 },\n    pressedAnimation,\n    as: Component = motion.div,\n    ...rest\n  } = props;\n\n  return (\n    <Component\n      data-slot=\"switch-thumb\"\n      whileTap=\"tab\"\n      layout\n      transition={transition}\n      animate={isPressed ? pressedAnimation : undefined}\n      {...(isChecked && { 'data-checked': true })}\n      {...rest}\n    />\n  );\n}\n\ntype SwitchIconPosition = 'left' | 'right' | 'thumb';\n\ntype SwitchIconProps<TTag extends React.ElementType = typeof motion.div> =\n  HTMLMotionProps<'div'> & {\n    position: SwitchIconPosition;\n    as?: TTag;\n  };\n\nfunction SwitchIcon<TTag extends React.ElementType = typeof motion.div>(\n  props: SwitchIconProps<TTag>,\n) {\n  const {\n    position,\n    transition = { type: 'spring', bounce: 0 },\n    as: Component = motion.div,\n    ...rest\n  } = props;\n  const { isChecked } = useSwitch();\n\n  const isAnimated = React.useMemo(() => {\n    if (position === 'right') return !isChecked;\n    if (position === 'left') return isChecked;\n    if (position === 'thumb') return true;\n    return false;\n  }, [position, isChecked]);\n\n  return (\n    <Component\n      data-slot={`switch-${position}-icon`}\n      animate={isAnimated ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }}\n      transition={transition}\n      {...rest}\n    />\n  );\n}\n\nexport {\n  Switch,\n  SwitchThumb,\n  SwitchIcon,\n  type SwitchProps,\n  type SwitchThumbProps,\n  type SwitchIconProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/headless/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-headless-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-headless-tabs',
  },
  'primitives-radix-accordion': {
    name: 'primitives-radix-accordion',
    description:
      'A vertically stacked set of interactive headings that each reveal an associated section of content.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/accordion.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Accordion as AccordionPrimitive } from 'radix-ui';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype AccordionContextType = {\n  value: string | string[] | undefined;\n  setValue: (value: string | string[] | undefined) => void;\n};\n\ntype AccordionItemContextType = {\n  value: string;\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n};\n\nconst [AccordionProvider, useAccordion] =\n  getStrictContext<AccordionContextType>('AccordionContext');\n\nconst [AccordionItemProvider, useAccordionItem] =\n  getStrictContext<AccordionItemContextType>('AccordionItemContext');\n\ntype AccordionProps = React.ComponentProps<typeof AccordionPrimitive.Root>;\n\nfunction Accordion(props: AccordionProps) {\n  const [value, setValue] = useControlledState<string | string[] | undefined>({\n    value: props?.value,\n    defaultValue: props?.defaultValue,\n    onChange: props?.onValueChange as (\n      value: string | string[] | undefined,\n    ) => void,\n  });\n\n  return (\n    <AccordionProvider value={{ value, setValue }}>\n      <AccordionPrimitive.Root\n        data-slot=\"accordion\"\n        {...props}\n        onValueChange={setValue}\n      />\n    </AccordionProvider>\n  );\n}\n\ntype AccordionItemProps = React.ComponentProps<typeof AccordionPrimitive.Item>;\n\nfunction AccordionItem(props: AccordionItemProps) {\n  const { value } = useAccordion();\n  const [isOpen, setIsOpen] = React.useState(\n    value?.includes(props?.value) ?? false,\n  );\n\n  React.useEffect(() => {\n    setIsOpen(value?.includes(props?.value) ?? false);\n  }, [value, props?.value]);\n\n  return (\n    <AccordionItemProvider value={{ isOpen, setIsOpen, value: props.value }}>\n      <AccordionPrimitive.Item data-slot=\"accordion-item\" {...props} />\n    </AccordionItemProvider>\n  );\n}\n\ntype AccordionHeaderProps = React.ComponentProps<\n  typeof AccordionPrimitive.Header\n>;\n\nfunction AccordionHeader(props: AccordionHeaderProps) {\n  return <AccordionPrimitive.Header data-slot=\"accordion-header\" {...props} />;\n}\n\ntype AccordionTriggerProps = React.ComponentProps<\n  typeof AccordionPrimitive.Trigger\n>;\n\nfunction AccordionTrigger(props: AccordionTriggerProps) {\n  return (\n    <AccordionPrimitive.Trigger data-slot=\"accordion-trigger\" {...props} />\n  );\n}\n\ntype AccordionContentProps = Omit<\n  React.ComponentProps<typeof AccordionPrimitive.Content>,\n  'asChild' | 'forceMount'\n> &\n  HTMLMotionProps<'div'> & {\n    keepRendered?: boolean;\n  };\n\nfunction AccordionContent({\n  keepRendered = false,\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  ...props\n}: AccordionContentProps) {\n  const { isOpen } = useAccordionItem();\n\n  return (\n    <AnimatePresence>\n      {keepRendered ? (\n        <AccordionPrimitive.Content asChild forceMount>\n          <motion.div\n            key=\"accordion-content\"\n            data-slot=\"accordion-content\"\n            initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n            animate={\n              isOpen\n                ? { height: 'auto', opacity: 1, '--mask-stop': '100%' }\n                : { height: 0, opacity: 0, '--mask-stop': '0%' }\n            }\n            transition={transition}\n            style={{\n              maskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n              WebkitMaskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n              overflow: 'hidden',\n            }}\n            {...props}\n          />\n        </AccordionPrimitive.Content>\n      ) : (\n        isOpen && (\n          <AccordionPrimitive.Content asChild forceMount>\n            <motion.div\n              key=\"accordion-content\"\n              data-slot=\"accordion-content\"\n              initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n              exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              transition={transition}\n              style={{\n                maskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                WebkitMaskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                overflow: 'hidden',\n              }}\n              {...props}\n            />\n          </AccordionPrimitive.Content>\n        )\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  useAccordion,\n  useAccordionItem,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionHeaderProps,\n  type AccordionTriggerProps,\n  type AccordionContentProps,\n  type AccordionContextType,\n  type AccordionItemContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/accordion/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-accordion';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-accordion',
  },
  'primitives-radix-checkbox': {
    name: 'primitives-radix-checkbox',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/checkbox.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { Checkbox as CheckboxPrimitive } from \'radix-ui\';\nimport { motion, SVGMotionProps, type HTMLMotionProps } from \'motion/react\';\n\nimport { getStrictContext } from \'@/components/animate-ui/hooks/use-strict-context\';\nimport { useControlledState } from \'@/components/animate-ui/hooks/use-controlled-state\';\n\ntype CheckboxContextType = {\n  isChecked: boolean | \'indeterminate\';\n  setIsChecked: (checked: boolean | \'indeterminate\') => void;\n};\n\nconst [CheckboxProvider, useCheckbox] =\n  getStrictContext<CheckboxContextType>(\'CheckboxContext\');\n\ntype CheckboxProps = HTMLMotionProps<\'button\'> &\n  Omit<React.ComponentProps<typeof CheckboxPrimitive.Root>, \'asChild\'>;\n\nfunction Checkbox({\n  defaultChecked,\n  checked,\n  onCheckedChange,\n  disabled,\n  required,\n  name,\n  value,\n  ...props\n}: CheckboxProps) {\n  const [isChecked, setIsChecked] = useControlledState({\n    value: checked,\n    defaultValue: defaultChecked,\n    onChange: onCheckedChange,\n  });\n\n  return (\n    <CheckboxProvider value={{ isChecked, setIsChecked }}>\n      <CheckboxPrimitive.Root\n        defaultChecked={defaultChecked}\n        checked={checked}\n        onCheckedChange={setIsChecked}\n        disabled={disabled}\n        required={required}\n        name={name}\n        value={value}\n        asChild\n      >\n        <motion.button\n          data-slot="checkbox"\n          whileTap={{ scale: 0.95 }}\n          whileHover={{ scale: 1.05 }}\n          {...props}\n        />\n      </CheckboxPrimitive.Root>\n    </CheckboxProvider>\n  );\n}\n\ntype CheckboxIndicatorProps = SVGMotionProps<SVGSVGElement>;\n\nfunction CheckboxIndicator(props: CheckboxIndicatorProps) {\n  const { isChecked } = useCheckbox();\n\n  return (\n    <CheckboxPrimitive.Indicator forceMount asChild>\n      <motion.svg\n        data-slot="checkbox-indicator"\n        xmlns="http://www.w3.org/2000/svg"\n        fill="none"\n        viewBox="0 0 24 24"\n        strokeWidth="3.5"\n        stroke="currentColor"\n        initial="unchecked"\n        animate={isChecked ? \'checked\' : \'unchecked\'}\n        {...props}\n      >\n        {isChecked === \'indeterminate\' ? (\n          <motion.line\n            x1="5"\n            y1="12"\n            x2="19"\n            y2="12"\n            strokeLinecap="round"\n            initial={{ pathLength: 0, opacity: 0 }}\n            animate={{\n              pathLength: 1,\n              opacity: 1,\n              transition: { duration: 0.2 },\n            }}\n          />\n        ) : (\n          <motion.path\n            strokeLinecap="round"\n            strokeLinejoin="round"\n            d="M4.5 12.75l6 6 9-13.5"\n            variants={{\n              checked: {\n                pathLength: 1,\n                opacity: 1,\n                transition: {\n                  duration: 0.2,\n                  delay: 0.2,\n                },\n              },\n              unchecked: {\n                pathLength: 0,\n                opacity: 0,\n                transition: {\n                  duration: 0.2,\n                },\n              },\n            }}\n          />\n        )}\n      </motion.svg>\n    </CheckboxPrimitive.Indicator>\n  );\n}\n\nexport {\n  Checkbox,\n  CheckboxIndicator,\n  useCheckbox,\n  type CheckboxProps,\n  type CheckboxIndicatorProps,\n  type CheckboxContextType,\n};',
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/checkbox/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-checkbox';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-checkbox',
  },
  'primitives-radix-collapsible': {
    name: 'primitives-radix-collapsible',
    description: 'An interactive component which expands/collapses a panel.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/collapsible/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/collapsible.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Collapsible as CollapsiblePrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype CollapsibleContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [CollapsibleProvider, useCollapsible] =\n  getStrictContext<CollapsibleContextType>('CollapsibleContext');\n\ntype CollapsibleProps = React.ComponentProps<typeof CollapsiblePrimitive.Root>;\n\nfunction Collapsible(props: CollapsibleProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <CollapsibleProvider value={{ isOpen, setIsOpen }}>\n      <CollapsiblePrimitive.Root\n        data-slot=\"collapsible\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </CollapsibleProvider>\n  );\n}\n\ntype CollapsibleTriggerProps = React.ComponentProps<\n  typeof CollapsiblePrimitive.Trigger\n>;\n\nfunction CollapsibleTrigger(props: CollapsibleTriggerProps) {\n  return (\n    <CollapsiblePrimitive.Trigger data-slot=\"collapsible-trigger\" {...props} />\n  );\n}\n\ntype CollapsibleContentProps = Omit<\n  React.ComponentProps<typeof CollapsiblePrimitive.Content>,\n  'asChild' | 'forceMount'\n> &\n  HTMLMotionProps<'div'> & {\n    keepRendered?: boolean;\n  };\n\nfunction CollapsibleContent({\n  keepRendered = false,\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  ...props\n}: CollapsibleContentProps) {\n  const { isOpen } = useCollapsible();\n\n  return (\n    <AnimatePresence>\n      {keepRendered ? (\n        <CollapsiblePrimitive.Content asChild forceMount>\n          <motion.div\n            key=\"collapsible-content\"\n            data-slot=\"collapsible-content\"\n            layout\n            initial={{ opacity: 0, height: 0, overflow: 'hidden' }}\n            animate={\n              isOpen\n                ? { opacity: 1, height: 'auto', overflow: 'hidden' }\n                : { opacity: 0, height: 0, overflow: 'hidden' }\n            }\n            transition={transition}\n            {...props}\n          />\n        </CollapsiblePrimitive.Content>\n      ) : (\n        isOpen && (\n          <CollapsiblePrimitive.Content asChild forceMount>\n            <motion.div\n              key=\"collapsible-content\"\n              data-slot=\"collapsible-content\"\n              layout\n              initial={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              animate={{ opacity: 1, height: 'auto', overflow: 'hidden' }}\n              exit={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              transition={transition}\n              {...props}\n            />\n          </CollapsiblePrimitive.Content>\n        )\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  useCollapsible,\n  type CollapsibleProps,\n  type CollapsibleTriggerProps,\n  type CollapsibleContentProps,\n  type CollapsibleContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/collapsible/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-collapsible';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-collapsible',
  },
  'primitives-radix-dialog': {
    name: 'primitives-radix-dialog',
    description:
      'A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/dialog.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Dialog as DialogPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype DialogContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [DialogProvider, useDialog] =\n  getStrictContext<DialogContextType>('DialogContext');\n\ntype DialogProps = React.ComponentProps<typeof DialogPrimitive.Root>;\n\nfunction Dialog(props: DialogProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <DialogProvider value={{ isOpen, setIsOpen }}>\n      <DialogPrimitive.Root\n        data-slot=\"dialog\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </DialogProvider>\n  );\n}\n\ntype DialogTriggerProps = React.ComponentProps<typeof DialogPrimitive.Trigger>;\n\nfunction DialogTrigger(props: DialogTriggerProps) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n}\n\ntype DialogPortalProps = Omit<\n  React.ComponentProps<typeof DialogPrimitive.Portal>,\n  'forceMount'\n>;\n\nfunction DialogPortal(props: DialogPortalProps) {\n  const { isOpen } = useDialog();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <DialogPrimitive.Portal\n          data-slot=\"dialog-portal\"\n          forceMount\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype DialogOverlayProps = Omit<\n  React.ComponentProps<typeof DialogPrimitive.Overlay>,\n  'forceMount' | 'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DialogOverlay({\n  transition = { duration: 0.2, ease: 'easeInOut' },\n  ...props\n}: DialogOverlayProps) {\n  return (\n    <DialogPrimitive.Overlay data-slot=\"dialog-overlay\" asChild forceMount>\n      <motion.div\n        key=\"dialog-overlay\"\n        initial={{ opacity: 0, filter: 'blur(4px)' }}\n        animate={{ opacity: 1, filter: 'blur(0px)' }}\n        exit={{ opacity: 0, filter: 'blur(4px)' }}\n        transition={transition}\n        {...props}\n      />\n    </DialogPrimitive.Overlay>\n  );\n}\n\ntype DialogFlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ntype DialogContentProps = Omit<\n  React.ComponentProps<typeof DialogPrimitive.Content>,\n  'forceMount' | 'asChild'\n> &\n  HTMLMotionProps<'div'> & {\n    from?: DialogFlipDirection;\n  };\n\nfunction DialogContent({\n  from = 'top',\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onEscapeKeyDown,\n  onPointerDownOutside,\n  onInteractOutside,\n  transition = { type: 'spring', stiffness: 150, damping: 25 },\n  ...props\n}: DialogContentProps) {\n  const initialRotation =\n    from === 'bottom' || from === 'left' ? '20deg' : '-20deg';\n  const isVertical = from === 'top' || from === 'bottom';\n  const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n  return (\n    <DialogPrimitive.Content\n      asChild\n      forceMount\n      onOpenAutoFocus={onOpenAutoFocus}\n      onCloseAutoFocus={onCloseAutoFocus}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onInteractOutside={onInteractOutside}\n    >\n      <motion.div\n        key=\"dialog-content\"\n        data-slot=\"dialog-content\"\n        initial={{\n          opacity: 0,\n          filter: 'blur(4px)',\n          transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n        }}\n        animate={{\n          opacity: 1,\n          filter: 'blur(0px)',\n          transform: `perspective(500px) ${rotateAxis}(0deg) scale(1)`,\n        }}\n        exit={{\n          opacity: 0,\n          filter: 'blur(4px)',\n          transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n        }}\n        transition={transition}\n        {...props}\n      />\n    </DialogPrimitive.Content>\n  );\n}\n\ntype DialogCloseProps = React.ComponentProps<typeof DialogPrimitive.Close>;\n\nfunction DialogClose(props: DialogCloseProps) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />;\n}\n\ntype DialogHeaderProps = React.ComponentProps<'div'>;\n\nfunction DialogHeader(props: DialogHeaderProps) {\n  return <div data-slot=\"dialog-header\" {...props} />;\n}\n\ntype DialogFooterProps = React.ComponentProps<'div'>;\n\nfunction DialogFooter(props: DialogFooterProps) {\n  return <div data-slot=\"dialog-footer\" {...props} />;\n}\n\ntype DialogTitleProps = React.ComponentProps<typeof DialogPrimitive.Title>;\n\nfunction DialogTitle(props: DialogTitleProps) {\n  return <DialogPrimitive.Title data-slot=\"dialog-title\" {...props} />;\n}\n\ntype DialogDescriptionProps = React.ComponentProps<\n  typeof DialogPrimitive.Description\n>;\n\nfunction DialogDescription(props: DialogDescriptionProps) {\n  return (\n    <DialogPrimitive.Description data-slot=\"dialog-description\" {...props} />\n  );\n}\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  useDialog,\n  type DialogProps,\n  type DialogTriggerProps,\n  type DialogPortalProps,\n  type DialogCloseProps,\n  type DialogOverlayProps,\n  type DialogContentProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n  type DialogContextType,\n  type DialogFlipDirection,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/dialog/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-dialog';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-dialog',
  },
  'primitives-radix-dropdown-menu': {
    name: 'primitives-radix-dropdown-menu',
    description:
      'Displays a menu to the user — such as a set of actions or functions — triggered by a button.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/dropdown-menu/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/dropdown-menu.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { DropdownMenu as DropdownMenuPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype DropdownMenuContextType = {\n  isOpen: boolean;\n  setIsOpen: (o: boolean) => void;\n};\n\nconst [DropdownMenuProvider, useDropdownMenu] =\n  getStrictContext<DropdownMenuContextType>('DropdownMenuContext');\n\nconst [DropdownMenuSubProvider, useDropdownMenuSub] =\n  getStrictContext<DropdownMenuContextType>('DropdownMenuSubContext');\n\ntype DropdownMenuProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Root\n>;\n\nfunction DropdownMenu(props: DropdownMenuProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <DropdownMenuProvider value={{ isOpen, setIsOpen }}>\n      <DropdownMenuPrimitive.Root\n        data-slot=\"dropdown-menu\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </DropdownMenuProvider>\n  );\n}\n\ntype DropdownMenuTriggerProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Trigger\n>;\n\nfunction DropdownMenuTrigger(props: DropdownMenuTriggerProps) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuPortalProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Portal\n>;\n\nfunction DropdownMenuPortal(props: DropdownMenuPortalProps) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  );\n}\n\ntype DropdownMenuGroupProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Group\n>;\n\nfunction DropdownMenuGroup(props: DropdownMenuGroupProps) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  );\n}\n\ntype DropdownMenuSubProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Sub\n>;\n\nfunction DropdownMenuSub(props: DropdownMenuSubProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <DropdownMenuSubProvider value={{ isOpen, setIsOpen }}>\n      <DropdownMenuPrimitive.Sub\n        data-slot=\"dropdown-menu-sub\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </DropdownMenuSubProvider>\n  );\n}\n\ntype DropdownMenuRadioGroupProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.RadioGroup\n>;\n\nfunction DropdownMenuRadioGroup(props: DropdownMenuRadioGroupProps) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuSubTriggerProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger>,\n  'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuSubTrigger({\n  disabled,\n  textValue,\n  ...props\n}: DropdownMenuSubTriggerProps) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      disabled={disabled}\n      textValue={textValue}\n      asChild\n    >\n      <motion.div\n        data-slot=\"dropdown-menu-sub-trigger\"\n        data-disabled={disabled}\n        {...props}\n      />\n    </DropdownMenuPrimitive.SubTrigger>\n  );\n}\n\ntype DropdownMenuSubContentProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>,\n  'forceMount' | 'asChild'\n> &\n  Omit<\n    React.ComponentProps<typeof DropdownMenuPrimitive.Portal>,\n    'forceMount'\n  > &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuSubContent({\n  loop,\n  onEscapeKeyDown,\n  onPointerDownOutside,\n  onFocusOutside,\n  onInteractOutside,\n  sideOffset,\n  alignOffset,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { duration: 0.2 },\n  style,\n  container,\n  ...props\n}: DropdownMenuSubContentProps) {\n  const { isOpen } = useDropdownMenuSub();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <DropdownMenuPortal forceMount container={container}>\n          <DropdownMenuPrimitive.SubContent\n            asChild\n            forceMount\n            loop={loop}\n            onEscapeKeyDown={onEscapeKeyDown}\n            onPointerDownOutside={onPointerDownOutside}\n            onFocusOutside={onFocusOutside}\n            onInteractOutside={onInteractOutside}\n            sideOffset={sideOffset}\n            alignOffset={alignOffset}\n            avoidCollisions={avoidCollisions}\n            collisionBoundary={collisionBoundary}\n            collisionPadding={collisionPadding}\n            arrowPadding={arrowPadding}\n            sticky={sticky}\n            hideWhenDetached={hideWhenDetached}\n          >\n            <motion.div\n              key=\"dropdown-menu-sub-content\"\n              data-slot=\"dropdown-menu-sub-content\"\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.95 }}\n              transition={transition}\n              style={{ willChange: 'opacity, transform', ...style }}\n              {...props}\n            />\n          </DropdownMenuPrimitive.SubContent>\n        </DropdownMenuPortal>\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype DropdownMenuHighlightProps = Omit<\n  HighlightProps,\n  'controlledItems' | 'enabled' | 'hover'\n> & {\n  animateOnHover?: boolean;\n};\n\nfunction DropdownMenuHighlight({\n  transition = { type: 'spring', stiffness: 350, damping: 35 },\n  animateOnHover = true,\n  ...props\n}: DropdownMenuHighlightProps) {\n  return (\n    <Highlight\n      hover\n      controlledItems\n      enabled={animateOnHover}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuContentProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.Content>,\n  'forceMount' | 'asChild'\n> &\n  Omit<\n    React.ComponentProps<typeof DropdownMenuPrimitive.Portal>,\n    'forceMount'\n  > &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuContent({\n  loop,\n  onCloseAutoFocus,\n  onEscapeKeyDown,\n  onPointerDownOutside,\n  onFocusOutside,\n  onInteractOutside,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { duration: 0.2 },\n  style,\n  container,\n  ...props\n}: DropdownMenuContentProps) {\n  const { isOpen } = useDropdownMenu();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <DropdownMenuPortal forceMount container={container}>\n          <DropdownMenuPrimitive.Content\n            asChild\n            loop={loop}\n            onCloseAutoFocus={onCloseAutoFocus}\n            onEscapeKeyDown={onEscapeKeyDown}\n            onPointerDownOutside={onPointerDownOutside}\n            onFocusOutside={onFocusOutside}\n            onInteractOutside={onInteractOutside}\n            side={side}\n            sideOffset={sideOffset}\n            align={align}\n            alignOffset={alignOffset}\n            avoidCollisions={avoidCollisions}\n            collisionBoundary={collisionBoundary}\n            collisionPadding={collisionPadding}\n            arrowPadding={arrowPadding}\n            sticky={sticky}\n            hideWhenDetached={hideWhenDetached}\n          >\n            <motion.div\n              key=\"dropdown-menu-content\"\n              data-slot=\"dropdown-menu-content\"\n              initial={{ opacity: 0, scale: 0.95 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{\n                opacity: 0,\n                scale: 0.95,\n                transition: { ...transition, delay: 0.3 },\n              }}\n              transition={transition}\n              style={{ willChange: 'opacity, transform', ...style }}\n              {...props}\n            />\n          </DropdownMenuPrimitive.Content>\n        </DropdownMenuPortal>\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype DropdownMenuHighlightItemProps = HighlightItemProps;\n\nfunction DropdownMenuHighlightItem(props: DropdownMenuHighlightItemProps) {\n  return <HighlightItem data-slot=\"dropdown-menu-highlight-item\" {...props} />;\n}\n\ntype DropdownMenuItemProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.Item>,\n  'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuItem({\n  disabled,\n  onSelect,\n  textValue,\n  ...props\n}: DropdownMenuItemProps) {\n  return (\n    <DropdownMenuPrimitive.Item\n      disabled={disabled}\n      onSelect={onSelect}\n      textValue={textValue}\n      asChild\n    >\n      <motion.div\n        data-slot=\"dropdown-menu-item\"\n        data-disabled={disabled}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Item>\n  );\n}\n\ntype DropdownMenuCheckboxItemProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.CheckboxItem\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuCheckboxItem({\n  checked,\n  onCheckedChange,\n  disabled,\n  onSelect,\n  textValue,\n  ...props\n}: DropdownMenuCheckboxItemProps) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      checked={checked}\n      onCheckedChange={onCheckedChange}\n      disabled={disabled}\n      onSelect={onSelect}\n      textValue={textValue}\n      asChild\n    >\n      <motion.div\n        data-slot=\"dropdown-menu-checkbox-item\"\n        data-disabled={disabled}\n        {...props}\n      />\n    </DropdownMenuPrimitive.CheckboxItem>\n  );\n}\n\ntype DropdownMenuRadioItemProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>,\n  'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuRadioItem({\n  value,\n  disabled,\n  onSelect,\n  textValue,\n  ...props\n}: DropdownMenuRadioItemProps) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      value={value}\n      disabled={disabled}\n      onSelect={onSelect}\n      textValue={textValue}\n      asChild\n    >\n      <motion.div\n        data-slot=\"dropdown-menu-radio-item\"\n        data-disabled={disabled}\n        {...props}\n      />\n    </DropdownMenuPrimitive.RadioItem>\n  );\n}\n\ntype DropdownMenuLabelProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Label\n>;\n\nfunction DropdownMenuLabel(props: DropdownMenuLabelProps) {\n  return (\n    <DropdownMenuPrimitive.Label data-slot=\"dropdown-menu-label\" {...props} />\n  );\n}\n\ntype DropdownMenuSeparatorProps = React.ComponentProps<\n  typeof DropdownMenuPrimitive.Separator\n>;\n\nfunction DropdownMenuSeparator(props: DropdownMenuSeparatorProps) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      {...props}\n    />\n  );\n}\n\ntype DropdownMenuShortcutProps = React.ComponentProps<'span'>;\n\nfunction DropdownMenuShortcut(props: DropdownMenuShortcutProps) {\n  return <span data-slot=\"dropdown-menu-shortcut\" {...props} />;\n}\n\ntype DropdownMenuItemIndicatorProps = Omit<\n  React.ComponentProps<typeof DropdownMenuPrimitive.ItemIndicator>,\n  'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction DropdownMenuItemIndicator(props: DropdownMenuItemIndicatorProps) {\n  return (\n    <DropdownMenuPrimitive.ItemIndicator\n      data-slot=\"dropdown-menu-item-indicator\"\n      asChild\n    >\n      <motion.div {...props} />\n    </DropdownMenuPrimitive.ItemIndicator>\n  );\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuHighlight,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuHighlightItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n  useDropdownMenu,\n  useDropdownMenuSub,\n  type DropdownMenuProps,\n  type DropdownMenuTriggerProps,\n  type DropdownMenuHighlightProps,\n  type DropdownMenuContentProps,\n  type DropdownMenuItemProps,\n  type DropdownMenuItemIndicatorProps,\n  type DropdownMenuHighlightItemProps,\n  type DropdownMenuCheckboxItemProps,\n  type DropdownMenuRadioItemProps,\n  type DropdownMenuLabelProps,\n  type DropdownMenuSeparatorProps,\n  type DropdownMenuShortcutProps,\n  type DropdownMenuGroupProps,\n  type DropdownMenuPortalProps,\n  type DropdownMenuSubProps,\n  type DropdownMenuSubContentProps,\n  type DropdownMenuSubTriggerProps,\n  type DropdownMenuRadioGroupProps,\n  type DropdownMenuContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/dropdown-menu/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-dropdown-menu';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-dropdown-menu',
  },
  'primitives-radix-files': {
    name: 'primitives-radix-files',
    description:
      'A component that allows you to display a list of files and folders.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-radix-accordion',
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/files/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/files.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionTrigger,\n  AccordionContent,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionHeaderProps,\n  type AccordionTriggerProps,\n  type AccordionContentProps,\n} from '@/components/animate-ui/primitives/radix/accordion';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype FilesContextType = {\n  open: string[];\n};\n\ntype FolderContextType = {\n  isOpen: boolean;\n};\n\nconst [FilesProvider, useFiles] =\n  getStrictContext<FilesContextType>('FilesContext');\n\nconst [FolderProvider, useFolder] =\n  getStrictContext<FolderContextType>('FolderContext');\n\ntype BaseFilesProps = {\n  children: React.ReactNode;\n} & Omit<AccordionProps, 'type' | 'defaultValue' | 'value' | 'onValueChange'>;\n\ntype ControlledFilesProps = {\n  defaultOpen?: never;\n  open?: string[];\n  onOpenChange?: (open: string[]) => void;\n};\n\ntype UncontrolledFilesProps = {\n  defaultOpen: string[];\n  open?: never;\n  onOpenChange?: never;\n};\n\ntype FilesProps = BaseFilesProps &\n  (ControlledFilesProps | UncontrolledFilesProps);\n\nfunction Files({\n  children,\n  defaultOpen = [],\n  open,\n  onOpenChange,\n  style,\n  ...props\n}: FilesProps) {\n  const [openValue, setOpenValue] = useControlledState({\n    value: open,\n    defaultValue: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <FilesProvider value={{ open: openValue ?? [] }}>\n      <Accordion\n        data-slot=\"files\"\n        type=\"multiple\"\n        defaultValue={defaultOpen}\n        value={open}\n        onValueChange={setOpenValue}\n        style={{\n          position: 'relative',\n          overflow: 'auto',\n          ...style,\n        }}\n        {...props}\n      >\n        {children}\n      </Accordion>\n    </FilesProvider>\n  );\n}\n\ntype FilesHighlightProps = Omit<HighlightProps, 'controlledItems' | 'mode'>;\n\nfunction FilesHighlight({ hover = true, ...props }: FilesHighlightProps) {\n  return (\n    <Highlight\n      data-slot=\"files-highlight\"\n      controlledItems\n      mode=\"parent\"\n      hover={hover}\n      {...props}\n    />\n  );\n}\n\ntype FolderItemProps = AccordionItemProps;\n\nfunction FolderItem({ value, ...props }: FolderItemProps) {\n  const { open } = useFiles();\n\n  return (\n    <FolderProvider value={{ isOpen: open.includes(value) }}>\n      <AccordionItem data-slot=\"folder-item\" value={value} {...props} />\n    </FolderProvider>\n  );\n}\n\ntype FolderHeaderProps = AccordionHeaderProps;\n\nfunction FolderHeader(props: FolderHeaderProps) {\n  return <AccordionHeader data-slot=\"folder-header\" {...props} />;\n}\n\ntype FolderTriggerProps = AccordionTriggerProps;\n\nfunction FolderTrigger(props: FolderTriggerProps) {\n  return <AccordionTrigger data-slot=\"folder-trigger\" {...props} />;\n}\n\ntype FolderContentProps = AccordionContentProps;\n\nfunction FolderContent(props: FolderContentProps) {\n  return <AccordionContent data-slot=\"folder-content\" {...props} />;\n}\n\ntype FolderHighlightProps = HighlightItemProps;\n\nfunction FolderHighlight(props: FolderHighlightProps) {\n  return <HighlightItem data-slot=\"folder-highlight\" {...props} />;\n}\n\ntype FolderProps = React.ComponentProps<'div'>;\n\nfunction Folder(props: FolderProps) {\n  return <div data-slot=\"folder\" {...props} />;\n}\n\ntype FolderIconProps = HTMLMotionProps<'span'> & {\n  closeIcon: React.ReactNode;\n  openIcon: React.ReactNode;\n};\n\nfunction FolderIcon({\n  closeIcon,\n  openIcon,\n  transition = { duration: 0.15 },\n  ...props\n}: FolderIconProps) {\n  const { isOpen } = useFolder();\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <motion.span\n        key={isOpen ? 'open' : 'close'}\n        data-slot=\"folder-icon\"\n        initial={{ scale: 0.9 }}\n        animate={{ scale: 1 }}\n        exit={{ scale: 0.9 }}\n        transition={transition}\n        {...props}\n      >\n        {isOpen ? openIcon : closeIcon}\n      </motion.span>\n    </AnimatePresence>\n  );\n}\n\ntype FolderLabelProps = React.ComponentProps<'span'>;\n\nfunction FolderLabel(props: FolderLabelProps) {\n  return <span data-slot=\"folder-label\" {...props} />;\n}\n\ntype FileHighlightProps = HighlightItemProps;\n\nfunction FileHighlight(props: FileHighlightProps) {\n  return <HighlightItem data-slot=\"file-highlight\" {...props} />;\n}\n\ntype FileProps = React.ComponentProps<'div'>;\n\nfunction File(props: FileProps) {\n  return <div data-slot=\"file\" {...props} />;\n}\n\ntype FileIconProps = React.ComponentProps<'span'>;\n\nfunction FileIcon(props: FileIconProps) {\n  return <span data-slot=\"file-icon\" {...props} />;\n}\n\ntype FileLabelProps = React.ComponentProps<'span'>;\n\nfunction FileLabel(props: FileLabelProps) {\n  return <span data-slot=\"file-label\" {...props} />;\n}\n\nexport {\n  Files,\n  FilesHighlight,\n  FolderItem,\n  FolderHeader,\n  FolderTrigger,\n  FolderContent,\n  FileHighlight,\n  File,\n  FileIcon,\n  FileLabel,\n  FolderHighlight,\n  Folder,\n  FolderIcon,\n  FolderLabel,\n  useFiles,\n  useFolder,\n  type FilesProps,\n  type FilesHighlightProps,\n  type FolderItemProps,\n  type FolderHeaderProps,\n  type FolderTriggerProps,\n  type FolderContentProps,\n  type FileHighlightProps,\n  type FileProps,\n  type FileIconProps,\n  type FileLabelProps,\n  type FolderHighlightProps,\n  type FolderProps,\n  type FolderIconProps,\n  type FolderLabelProps,\n  type FilesContextType,\n  type FolderContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/radix/files/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-files';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-files',
  },
  'primitives-radix-hover-card': {
    name: 'primitives-radix-hover-card',
    description:
      'For sighted users to preview content available behind a link.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/hover-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/hover-card.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HoverCard as HoverCardPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype HoverCardContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [HoverCardProvider, useHoverCard] =\n  getStrictContext<HoverCardContextType>('HoverCardContext');\n\ntype HoverCardProps = React.ComponentProps<typeof HoverCardPrimitive.Root>;\n\nfunction HoverCard(props: HoverCardProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <HoverCardProvider value={{ isOpen, setIsOpen }}>\n      <HoverCardPrimitive.Root\n        data-slot=\"hover-card\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </HoverCardProvider>\n  );\n}\n\ntype HoverCardTriggerProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Trigger\n>;\n\nfunction HoverCardTrigger(props: HoverCardTriggerProps) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  );\n}\n\ntype HoverCardPortalProps = Omit<\n  React.ComponentProps<typeof HoverCardPrimitive.Portal>,\n  'forceMount'\n>;\n\nfunction HoverCardPortal(props: HoverCardPortalProps) {\n  const { isOpen } = useHoverCard();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <HoverCardPrimitive.Portal\n          forceMount\n          data-slot=\"hover-card-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype HoverCardContentProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Content\n> &\n  HTMLMotionProps<'div'>;\n\nfunction HoverCardContent({\n  align,\n  alignOffset,\n  side,\n  sideOffset,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: HoverCardContentProps) {\n  return (\n    <HoverCardPrimitive.Content\n      asChild\n      forceMount\n      align={align}\n      alignOffset={alignOffset}\n      side={side}\n      sideOffset={sideOffset}\n      avoidCollisions={avoidCollisions}\n      collisionBoundary={collisionBoundary}\n      collisionPadding={collisionPadding}\n      arrowPadding={arrowPadding}\n      sticky={sticky}\n      hideWhenDetached={hideWhenDetached}\n    >\n      <motion.div\n        key=\"hover-card-content\"\n        data-slot=\"hover-card-content\"\n        initial={{ opacity: 0, scale: 0.5 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.5 }}\n        transition={transition}\n        {...props}\n      />\n    </HoverCardPrimitive.Content>\n  );\n}\n\ntype HoverCardArrowProps = React.ComponentProps<\n  typeof HoverCardPrimitive.Arrow\n>;\n\nfunction HoverCardArrow(props: HoverCardArrowProps) {\n  return <HoverCardPrimitive.Arrow data-slot=\"hover-card-arrow\" {...props} />;\n}\n\nexport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardPortal,\n  HoverCardContent,\n  HoverCardArrow,\n  useHoverCard,\n  type HoverCardProps,\n  type HoverCardTriggerProps,\n  type HoverCardPortalProps,\n  type HoverCardContentProps,\n  type HoverCardArrowProps,\n  type HoverCardContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/hover-card/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-hover-card';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-hover-card',
  },
  'primitives-radix-popover': {
    name: 'primitives-radix-popover',
    description: 'Displays rich content in a portal, triggered by a button.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/popover.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Popover as PopoverPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype PopoverContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [PopoverProvider, usePopover] =\n  getStrictContext<PopoverContextType>('PopoverContext');\n\ntype PopoverProps = React.ComponentProps<typeof PopoverPrimitive.Root>;\n\nfunction Popover(props: PopoverProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <PopoverProvider value={{ isOpen, setIsOpen }}>\n      <PopoverPrimitive.Root\n        data-slot=\"popover\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </PopoverProvider>\n  );\n}\n\ntype PopoverTriggerProps = React.ComponentProps<\n  typeof PopoverPrimitive.Trigger\n>;\n\nfunction PopoverTrigger(props: PopoverTriggerProps) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />;\n}\n\ntype PopoverPortalProps = Omit<\n  React.ComponentProps<typeof PopoverPrimitive.Portal>,\n  'forceMount'\n>;\n\nfunction PopoverPortal(props: PopoverPortalProps) {\n  const { isOpen } = usePopover();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <PopoverPrimitive.Portal\n          forceMount\n          data-slot=\"popover-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype PopoverContentProps = Omit<\n  React.ComponentProps<typeof PopoverPrimitive.Content>,\n  'forceMount' | 'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction PopoverContent({\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onEscapeKeyDown,\n  onPointerDownOutside,\n  onFocusOutside,\n  onInteractOutside,\n  align,\n  alignOffset,\n  side,\n  sideOffset,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: PopoverContentProps) {\n  return (\n    <PopoverPrimitive.Content\n      asChild\n      forceMount\n      align={align}\n      alignOffset={alignOffset}\n      side={side}\n      sideOffset={sideOffset}\n      avoidCollisions={avoidCollisions}\n      collisionBoundary={collisionBoundary}\n      collisionPadding={collisionPadding}\n      arrowPadding={arrowPadding}\n      sticky={sticky}\n      hideWhenDetached={hideWhenDetached}\n      onOpenAutoFocus={onOpenAutoFocus}\n      onCloseAutoFocus={onCloseAutoFocus}\n      onEscapeKeyDown={onEscapeKeyDown}\n      onPointerDownOutside={onPointerDownOutside}\n      onInteractOutside={onInteractOutside}\n      onFocusOutside={onFocusOutside}\n    >\n      <motion.div\n        key=\"popover-content\"\n        data-slot=\"popover-content\"\n        initial={{ opacity: 0, scale: 0.5 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.5 }}\n        transition={transition}\n        {...props}\n      />\n    </PopoverPrimitive.Content>\n  );\n}\n\ntype PopoverAnchorProps = React.ComponentProps<typeof PopoverPrimitive.Anchor>;\n\nfunction PopoverAnchor({ ...props }: PopoverAnchorProps) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />;\n}\n\ntype PopoverArrowProps = React.ComponentProps<typeof PopoverPrimitive.Arrow>;\n\nfunction PopoverArrow(props: PopoverArrowProps) {\n  return <PopoverPrimitive.Arrow data-slot=\"popover-arrow\" {...props} />;\n}\n\ntype PopoverCloseProps = React.ComponentProps<typeof PopoverPrimitive.Close>;\n\nfunction PopoverClose(props: PopoverCloseProps) {\n  return <PopoverPrimitive.Close data-slot=\"popover-close\" {...props} />;\n}\n\nexport {\n  Popover,\n  PopoverTrigger,\n  PopoverPortal,\n  PopoverContent,\n  PopoverAnchor,\n  PopoverClose,\n  PopoverArrow,\n  usePopover,\n  type PopoverProps,\n  type PopoverTriggerProps,\n  type PopoverPortalProps,\n  type PopoverContentProps,\n  type PopoverAnchorProps,\n  type PopoverCloseProps,\n  type PopoverArrowProps,\n  type PopoverContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/popover/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-popover';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-popover',
  },
  'primitives-radix-progress': {
    name: 'primitives-radix-progress',
    description:
      'Displays an indicator showing the completion progress of a task, typically displayed as a progress bar.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-strict-context'],
    files: [
      {
        path: 'registry/primitives/radix/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Progress as ProgressPrimitive } from 'radix-ui';\nimport { motion } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype ProgressContextType = {\n  value: number;\n};\n\nconst [ProgressProvider, useProgress] =\n  getStrictContext<ProgressContextType>('ProgressContext');\n\ntype ProgressProps = React.ComponentProps<typeof ProgressPrimitive.Root>;\n\nfunction Progress(props: ProgressProps) {\n  return (\n    <ProgressProvider value={{ value: props.value ?? 0 }}>\n      <ProgressPrimitive.Root data-slot=\"progress\" {...props} />\n    </ProgressProvider>\n  );\n}\n\nconst MotionProgressIndicator = motion.create(ProgressPrimitive.Indicator);\n\ntype ProgressIndicatorProps = React.ComponentProps<\n  typeof MotionProgressIndicator\n>;\n\nfunction ProgressIndicator({\n  transition = { type: 'spring', stiffness: 100, damping: 30 },\n  ...props\n}: ProgressIndicatorProps) {\n  const { value } = useProgress();\n\n  return (\n    <MotionProgressIndicator\n      data-slot=\"progress-indicator\"\n      animate={{ x: `-${100 - (value || 0)}%` }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Progress,\n  ProgressIndicator,\n  useProgress,\n  type ProgressProps,\n  type ProgressIndicatorProps,\n  type ProgressContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-progress';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-progress',
  },
  'primitives-radix-radio-group': {
    name: 'primitives-radix-radio-group',
    description:
      'A set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Progress as ProgressPrimitive } from 'radix-ui';\nimport { motion } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype ProgressContextType = {\n  value: number;\n};\n\nconst [ProgressProvider, useProgress] =\n  getStrictContext<ProgressContextType>('ProgressContext');\n\ntype ProgressProps = React.ComponentProps<typeof ProgressPrimitive.Root>;\n\nfunction Progress(props: ProgressProps) {\n  return (\n    <ProgressProvider value={{ value: props.value ?? 0 }}>\n      <ProgressPrimitive.Root data-slot=\"progress\" {...props} />\n    </ProgressProvider>\n  );\n}\n\nconst MotionProgressIndicator = motion.create(ProgressPrimitive.Indicator);\n\ntype ProgressIndicatorProps = React.ComponentProps<\n  typeof MotionProgressIndicator\n>;\n\nfunction ProgressIndicator({\n  transition = { type: 'spring', stiffness: 100, damping: 30 },\n  ...props\n}: ProgressIndicatorProps) {\n  const { value } = useProgress();\n\n  return (\n    <MotionProgressIndicator\n      data-slot=\"progress-indicator\"\n      animate={{ x: `-${100 - (value || 0)}%` }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Progress,\n  ProgressIndicator,\n  useProgress,\n  type ProgressProps,\n  type ProgressIndicatorProps,\n  type ProgressContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/progress/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-radio-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-radio-group',
  },
  'primitives-radix-sheet': {
    name: 'primitives-radix-sheet',
    description:
      'Extends the Dialog component to display content that complements the main content of the screen.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/sheet/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/sheet.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Dialog as SheetPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype SheetContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [SheetProvider, useSheet] =\n  getStrictContext<SheetContextType>('SheetContext');\n\ntype SheetProps = React.ComponentProps<typeof SheetPrimitive.Root>;\n\nfunction Sheet(props: SheetProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props.open,\n    defaultValue: props.defaultOpen,\n    onChange: props.onOpenChange,\n  });\n\n  return (\n    <SheetProvider value={{ isOpen, setIsOpen }}>\n      <SheetPrimitive.Root\n        data-slot=\"sheet\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </SheetProvider>\n  );\n}\n\ntype SheetTriggerProps = React.ComponentProps<typeof SheetPrimitive.Trigger>;\n\nfunction SheetTrigger(props: SheetTriggerProps) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />;\n}\n\ntype SheetCloseProps = React.ComponentProps<typeof SheetPrimitive.Close>;\n\nfunction SheetClose(props: SheetCloseProps) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />;\n}\n\ntype SheetPortalProps = React.ComponentProps<typeof SheetPrimitive.Portal>;\n\nfunction SheetPortal(props: SheetPortalProps) {\n  const { isOpen } = useSheet();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <SheetPrimitive.Portal forceMount data-slot=\"sheet-portal\" {...props} />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype SheetOverlayProps = Omit<\n  React.ComponentProps<typeof SheetPrimitive.Overlay>,\n  'asChild' | 'forceMount'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction SheetOverlay({\n  transition = { duration: 0.2, ease: 'easeInOut' },\n  ...props\n}: SheetOverlayProps) {\n  return (\n    <SheetPrimitive.Overlay asChild forceMount>\n      <motion.div\n        key=\"sheet-overlay\"\n        data-slot=\"sheet-overlay\"\n        initial={{ opacity: 0, filter: 'blur(4px)' }}\n        animate={{ opacity: 1, filter: 'blur(0px)' }}\n        exit={{ opacity: 0, filter: 'blur(4px)' }}\n        transition={transition}\n        {...props}\n      />\n    </SheetPrimitive.Overlay>\n  );\n}\n\ntype Side = 'top' | 'bottom' | 'left' | 'right';\n\ntype SheetContentProps = React.ComponentProps<typeof SheetPrimitive.Content> &\n  HTMLMotionProps<'div'> & {\n    side?: Side;\n  };\n\nfunction SheetContent({\n  side = 'right',\n  transition = { type: 'spring', stiffness: 150, damping: 22 },\n  style,\n  ...props\n}: SheetContentProps) {\n  const axis = side === 'left' || side === 'right' ? 'x' : 'y';\n\n  const offscreen: Record<Side, { x?: string; y?: string; opacity: number }> = {\n    right: { x: '100%', opacity: 0 },\n    left: { x: '-100%', opacity: 0 },\n    top: { y: '-100%', opacity: 0 },\n    bottom: { y: '100%', opacity: 0 },\n  };\n\n  const positionStyle: Record<Side, React.CSSProperties> = {\n    right: { insetBlock: 0, right: 0 },\n    left: { insetBlock: 0, left: 0 },\n    top: { insetInline: 0, top: 0 },\n    bottom: { insetInline: 0, bottom: 0 },\n  };\n\n  return (\n    <SheetPrimitive.Content asChild forceMount {...props}>\n      <motion.div\n        key=\"sheet-content\"\n        data-slot=\"sheet-content\"\n        data-side={side}\n        initial={offscreen[side]}\n        animate={{ [axis]: 0, opacity: 1 }}\n        exit={offscreen[side]}\n        style={{\n          position: 'fixed',\n          ...positionStyle[side],\n          ...style,\n        }}\n        transition={transition}\n        {...props}\n      />\n    </SheetPrimitive.Content>\n  );\n}\n\ntype SheetHeaderProps = React.ComponentProps<'div'>;\n\nfunction SheetHeader(props: SheetHeaderProps) {\n  return <div data-slot=\"sheet-header\" {...props} />;\n}\n\ntype SheetFooterProps = React.ComponentProps<'div'>;\n\nfunction SheetFooter(props: SheetFooterProps) {\n  return <div data-slot=\"sheet-footer\" {...props} />;\n}\n\ntype SheetTitleProps = React.ComponentProps<typeof SheetPrimitive.Title>;\n\nfunction SheetTitle(props: SheetTitleProps) {\n  return <SheetPrimitive.Title data-slot=\"sheet-title\" {...props} />;\n}\n\ntype SheetDescriptionProps = React.ComponentProps<\n  typeof SheetPrimitive.Description\n>;\n\nfunction SheetDescription(props: SheetDescriptionProps) {\n  return (\n    <SheetPrimitive.Description data-slot=\"sheet-description\" {...props} />\n  );\n}\n\nexport {\n  useSheet,\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n  type SheetProps,\n  type SheetPortalProps,\n  type SheetOverlayProps,\n  type SheetTriggerProps,\n  type SheetCloseProps,\n  type SheetContentProps,\n  type SheetHeaderProps,\n  type SheetFooterProps,\n  type SheetTitleProps,\n  type SheetDescriptionProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/radix/sheet/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-sheet';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-sheet',
  },
  'primitives-radix-switch': {
    name: 'primitives-radix-switch',
    description:
      'A control that allows the user to toggle between checked and not checked.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/switch.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Switch as SwitchPrimitives } from 'radix-ui';\nimport {\n  motion,\n  type TargetAndTransition,\n  type VariantLabels,\n  type HTMLMotionProps,\n  type LegacyAnimationControls,\n} from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype SwitchContextType = {\n  isChecked: boolean;\n  setIsChecked: (isChecked: boolean) => void;\n  isPressed: boolean;\n  setIsPressed: (isPressed: boolean) => void;\n};\n\nconst [SwitchProvider, useSwitch] =\n  getStrictContext<SwitchContextType>('SwitchContext');\n\ntype SwitchProps = Omit<\n  React.ComponentProps<typeof SwitchPrimitives.Root>,\n  'asChild'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction Switch(props: SwitchProps) {\n  const [isPressed, setIsPressed] = React.useState(false);\n  const [isChecked, setIsChecked] = useControlledState({\n    value: props.checked,\n    defaultValue: props.defaultChecked,\n    onChange: props.onCheckedChange,\n  });\n\n  return (\n    <SwitchProvider\n      value={{ isChecked, setIsChecked, isPressed, setIsPressed }}\n    >\n      <SwitchPrimitives.Root {...props} onCheckedChange={setIsChecked} asChild>\n        <motion.button\n          data-slot=\"switch\"\n          whileTap=\"tap\"\n          initial={false}\n          onTapStart={() => setIsPressed(true)}\n          onTapCancel={() => setIsPressed(false)}\n          onTap={() => setIsPressed(false)}\n          {...props}\n        />\n      </SwitchPrimitives.Root>\n    </SwitchProvider>\n  );\n}\n\ntype SwitchThumbProps = Omit<\n  React.ComponentProps<typeof SwitchPrimitives.Thumb>,\n  'asChild'\n> &\n  HTMLMotionProps<'div'> & {\n    pressedAnimation?:\n      | TargetAndTransition\n      | VariantLabels\n      | boolean\n      | LegacyAnimationControls;\n  };\n\nfunction SwitchThumb({\n  pressedAnimation,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: SwitchThumbProps) {\n  const { isPressed } = useSwitch();\n\n  return (\n    <SwitchPrimitives.Thumb asChild>\n      <motion.div\n        data-slot=\"switch-thumb\"\n        whileTap=\"tab\"\n        layout\n        transition={transition}\n        animate={isPressed ? pressedAnimation : undefined}\n        {...props}\n      />\n    </SwitchPrimitives.Thumb>\n  );\n}\n\ntype SwitchIconPosition = 'left' | 'right' | 'thumb';\n\ntype SwitchIconProps = HTMLMotionProps<'div'> & {\n  position: SwitchIconPosition;\n};\n\nfunction SwitchIcon({\n  position,\n  transition = { type: 'spring', bounce: 0 },\n  ...props\n}: SwitchIconProps) {\n  const { isChecked } = useSwitch();\n\n  const isAnimated = React.useMemo(() => {\n    if (position === 'right') return !isChecked;\n    if (position === 'left') return isChecked;\n    if (position === 'thumb') return true;\n    return false;\n  }, [position, isChecked]);\n\n  return (\n    <motion.div\n      data-slot={`switch-${position}-icon`}\n      animate={isAnimated ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Switch,\n  SwitchThumb,\n  SwitchIcon,\n  useSwitch,\n  type SwitchProps,\n  type SwitchThumbProps,\n  type SwitchIconProps,\n  type SwitchIconPosition,\n  type SwitchContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/switch/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-switch';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-switch',
  },
  'primitives-radix-tabs': {
    name: 'primitives-radix-tabs',
    description:
      'A set of layered sections of content—known as tab panels—that are displayed one at a time.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/tabs.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Tabs as TabsPrimitive } from 'radix-ui';\nimport {\n  motion,\n  AnimatePresence,\n  LayoutGroup,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightProps,\n  type HighlightItemProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype TabsContextType = {\n  value: string | undefined;\n  setValue: (value: string) => void;\n};\n\nconst [TabsProvider, useTabs] =\n  getStrictContext<TabsContextType>('TabsContext');\n\ntype TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;\n\nfunction Tabs(props: TabsProps) {\n  const [value, setValue] = useControlledState({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: props.onValueChange,\n  });\n\n  return (\n    <TabsProvider value={{ value, setValue }}>\n      <TabsPrimitive.Root data-slot=\"tabs\" {...props} />\n    </TabsProvider>\n  );\n}\n\ntype TabsHighlightProps = Omit<HighlightProps, 'controlledItems' | 'value'>;\n\nfunction TabsHighlight({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: TabsHighlightProps) {\n  const { value } = useTabs();\n\n  return (\n    <Highlight\n      data-slot=\"tabs-highlight\"\n      controlledItems\n      value={value}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype TabsListProps = React.ComponentProps<typeof TabsPrimitive.List>;\n\nfunction TabsList(props: TabsListProps) {\n  return <TabsPrimitive.List data-slot=\"tabs-list\" {...props} />;\n}\n\ntype TabsHighlightItemProps = HighlightItemProps & {\n  value: string;\n};\n\nfunction TabsHighlightItem(props: TabsHighlightItemProps) {\n  return <HighlightItem data-slot=\"tabs-highlight-item\" {...props} />;\n}\n\ntype TabsTriggerProps = React.ComponentProps<typeof TabsPrimitive.Trigger>;\n\nfunction TabsTrigger(props: TabsTriggerProps) {\n  return <TabsPrimitive.Trigger data-slot=\"tabs-trigger\" {...props} />;\n}\n\ntype TabsContentProps = React.ComponentProps<typeof TabsPrimitive.Content> &\n  HTMLMotionProps<'div'>;\n\nfunction TabsContent({\n  value,\n  forceMount,\n  transition = { duration: 0.5, ease: 'easeInOut' },\n  ...props\n}: TabsContentProps) {\n  return (\n    <AnimatePresence mode=\"wait\">\n      <TabsPrimitive.Content asChild forceMount={forceMount} value={value}>\n        <motion.div\n          data-slot=\"tabs-content\"\n          layout\n          initial={{ opacity: 0, filter: 'blur(4px)' }}\n          animate={{ opacity: 1, filter: 'blur(0px)' }}\n          exit={{ opacity: 0, filter: 'blur(4px)' }}\n          transition={transition}\n          {...props}\n        />\n      </TabsPrimitive.Content>\n    </AnimatePresence>\n  );\n}\n\ntype TabsContentsProps = HTMLMotionProps<'div'> & {\n  children: React.ReactNode;\n};\n\nfunction TabsContents({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: TabsContentsProps) {\n  return (\n    <LayoutGroup id=\"tabs-contents-group\">\n      <motion.div\n        data-slot=\"tabs-contents\"\n        layout=\"size\"\n        style={{ overflow: 'hidden' }}\n        transition={{ layout: transition }}\n        {...props}\n      />\n    </LayoutGroup>\n  );\n}\n\nexport {\n  Tabs,\n  TabsHighlight,\n  TabsHighlightItem,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n  type TabsProps,\n  type TabsHighlightProps,\n  type TabsHighlightItemProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentProps,\n  type TabsContentsProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import('@/registry/primitives/radix/tabs/index.tsx');
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-tabs';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-tabs',
  },
  'primitives-radix-toggle': {
    name: 'primitives-radix-toggle',
    description: 'A two-state button that can be either on or off.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/toggle/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/toggle.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Toggle as TogglePrimitive } from 'radix-ui';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype ToggleContextType = {\n  isPressed: boolean;\n  setIsPressed: (isPressed: boolean) => void;\n  disabled?: boolean;\n};\n\nconst [ToggleProvider, useToggle] =\n  getStrictContext<ToggleContextType>('ToggleContext');\n\ntype ToggleProps = Omit<\n  React.ComponentProps<typeof TogglePrimitive.Root>,\n  'asChild'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction Toggle({\n  pressed,\n  defaultPressed,\n  onPressedChange,\n  disabled,\n  ...props\n}: ToggleProps) {\n  const [isPressed, setIsPressed] = useControlledState({\n    value: pressed,\n    defaultValue: defaultPressed,\n    onChange: onPressedChange,\n  });\n\n  return (\n    <ToggleProvider value={{ isPressed, setIsPressed, disabled }}>\n      <TogglePrimitive.Root\n        pressed={pressed}\n        defaultPressed={defaultPressed}\n        onPressedChange={setIsPressed}\n        disabled={disabled}\n        asChild\n      >\n        <motion.button\n          data-slot=\"toggle\"\n          whileTap={{ scale: 0.95 }}\n          {...props}\n        />\n      </TogglePrimitive.Root>\n    </ToggleProvider>\n  );\n}\n\ntype ToggleHighlightProps = HTMLMotionProps<'div'>;\n\nfunction ToggleHighlight({ style, ...props }: ToggleHighlightProps) {\n  const { isPressed, disabled } = useToggle();\n\n  return (\n    <AnimatePresence>\n      {isPressed && (\n        <motion.div\n          data-slot=\"toggle-highlight\"\n          aria-pressed={isPressed}\n          data-state={isPressed ? 'on' : 'off'}\n          data-disabled={disabled}\n          style={{ position: 'absolute', zIndex: 0, inset: 0, ...style }}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype ToggleItemProps = HTMLMotionProps<'div'>;\n\nfunction ToggleItem({ style, ...props }: ToggleItemProps) {\n  const { isPressed, disabled } = useToggle();\n\n  return (\n    <motion.div\n      data-slot=\"toggle-item\"\n      aria-pressed={isPressed}\n      data-state={isPressed ? 'on' : 'off'}\n      data-disabled={disabled}\n      style={{ position: 'relative', zIndex: 1, ...style }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Toggle,\n  ToggleHighlight,\n  ToggleItem,\n  useToggle,\n  type ToggleProps,\n  type ToggleHighlightProps,\n  type ToggleItemProps,\n  type ToggleContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/toggle/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-toggle';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-toggle',
  },
  'primitives-radix-toggle-group': {
    name: 'primitives-radix-toggle-group',
    description: 'A set of two-state buttons that can be toggled on or off.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/primitives-effects-highlight',
      'https://animate-ui.com/r/hooks-use-strict-context',
      'https://animate-ui.com/r/hooks-use-controlled-state',
    ],
    files: [
      {
        path: 'registry/primitives/radix/toggle-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/toggle-group.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { ToggleGroup as ToggleGroupPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  Highlight,\n  HighlightItem,\n  type HighlightItemProps,\n  type HighlightProps,\n} from '@/components/animate-ui/primitives/effects/highlight';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype ToggleGroupContextType = {\n  value: string | string[] | undefined;\n  setValue: (value: string | string[] | undefined) => void;\n  type: 'single' | 'multiple';\n};\n\nconst [ToggleGroupProvider, useToggleGroup] =\n  getStrictContext<ToggleGroupContextType>('ToggleGroupContext');\n\ntype ToggleGroupProps = React.ComponentProps<typeof ToggleGroupPrimitive.Root>;\n\nfunction ToggleGroup(props: ToggleGroupProps) {\n  const [value, setValue] = useControlledState<string | string[] | undefined>({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: props.onValueChange as (\n      value: string | string[] | undefined,\n    ) => void,\n  });\n\n  return (\n    <ToggleGroupProvider value={{ value, setValue, type: props.type }}>\n      <ToggleGroupPrimitive.Root\n        data-slot=\"toggle-group\"\n        {...props}\n        onValueChange={setValue}\n      />\n    </ToggleGroupProvider>\n  );\n}\n\ntype ToggleGroupItemProps = Omit<\n  React.ComponentProps<typeof ToggleGroupPrimitive.Item>,\n  'asChild'\n> &\n  HTMLMotionProps<'button'>;\n\nfunction ToggleGroupItem({ value, disabled, ...props }: ToggleGroupItemProps) {\n  return (\n    <ToggleGroupPrimitive.Item value={value} disabled={disabled} asChild>\n      <motion.button\n        data-slot=\"toggle-group-item\"\n        whileTap={{ scale: 0.95 }}\n        {...props}\n      />\n    </ToggleGroupPrimitive.Item>\n  );\n}\n\ntype ToggleGroupHighlightProps = Omit<HighlightProps, 'controlledItems'>;\n\nfunction ToggleGroupHighlight({\n  transition = { type: 'spring', stiffness: 200, damping: 25 },\n  ...props\n}: ToggleGroupHighlightProps) {\n  const { value } = useToggleGroup();\n\n  return (\n    <Highlight\n      data-slot=\"toggle-group-highlight\"\n      controlledItems\n      value={typeof value === 'string' ? value : null}\n      exitDelay={0}\n      transition={transition}\n      {...props}\n    />\n  );\n}\n\ntype ToggleGroupHighlightItemProps = HighlightItemProps &\n  HTMLMotionProps<'div'> & {\n    children: React.ReactElement;\n  };\n\nfunction ToggleGroupHighlightItem({\n  children,\n  style,\n  ...props\n}: ToggleGroupHighlightItemProps) {\n  const { type, value } = useToggleGroup();\n\n  if (type === 'single') {\n    return (\n      <HighlightItem\n        data-slot=\"toggle-group-highlight-item\"\n        style={{ inset: 0, ...style }}\n        {...props}\n      >\n        {children}\n      </HighlightItem>\n    );\n  }\n\n  if (type === 'multiple' && React.isValidElement(children)) {\n    const isActive = props.value && value && value.includes(props.value);\n\n    const element = children as React.ReactElement<React.ComponentProps<'div'>>;\n\n    return React.cloneElement(\n      children,\n      {\n        style: {\n          ...element.props.style,\n          position: 'relative',\n        },\n        ...element.props,\n      },\n      <>\n        <AnimatePresence>\n          {isActive && (\n            <motion.div\n              data-slot=\"toggle-group-highlight-item\"\n              style={{ position: 'absolute', inset: 0, zIndex: 0, ...style }}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              {...props}\n            />\n          )}\n        </AnimatePresence>\n\n        <div\n          style={{\n            position: 'relative',\n            zIndex: 1,\n          }}\n        >\n          {element.props.children}\n        </div>\n      </>,\n    );\n  }\n}\n\nexport {\n  ToggleGroup,\n  ToggleGroupItem,\n  ToggleGroupHighlight,\n  ToggleGroupHighlightItem,\n  useToggleGroup,\n  type ToggleGroupProps,\n  type ToggleGroupItemProps,\n  type ToggleGroupHighlightProps,\n  type ToggleGroupHighlightItemProps,\n  type ToggleGroupContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/toggle-group/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-toggle-group';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-toggle-group',
  },
  'primitives-radix-tooltip': {
    name: 'primitives-radix-tooltip',
    description:
      'A popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.',
    type: 'registry:ui',
    dependencies: ['motion', 'radix-ui'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-controlled-state',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/radix/tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/radix/tooltip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Tooltip as TooltipPrimitive } from 'radix-ui';\nimport { AnimatePresence, motion, type HTMLMotionProps } from 'motion/react';\n\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\nimport { useControlledState } from '@/components/animate-ui/hooks/use-controlled-state';\n\ntype TooltipContextType = {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n};\n\nconst [LocalTooltipProvider, useTooltip] =\n  getStrictContext<TooltipContextType>('TooltipContext');\n\ntype TooltipProviderProps = React.ComponentProps<\n  typeof TooltipPrimitive.Provider\n>;\n\nfunction TooltipProvider(props: TooltipProviderProps) {\n  return <TooltipPrimitive.Provider data-slot=\"tooltip-provider\" {...props} />;\n}\n\ntype TooltipProps = React.ComponentProps<typeof TooltipPrimitive.Root>;\n\nfunction Tooltip(props: TooltipProps) {\n  const [isOpen, setIsOpen] = useControlledState({\n    value: props?.open,\n    defaultValue: props?.defaultOpen,\n    onChange: props?.onOpenChange,\n  });\n\n  return (\n    <LocalTooltipProvider value={{ isOpen, setIsOpen }}>\n      <TooltipPrimitive.Root\n        data-slot=\"tooltip\"\n        {...props}\n        onOpenChange={setIsOpen}\n      />\n    </LocalTooltipProvider>\n  );\n}\n\ntype TooltipTriggerProps = React.ComponentProps<\n  typeof TooltipPrimitive.Trigger\n>;\n\nfunction TooltipTrigger(props: TooltipTriggerProps) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />;\n}\n\ntype TooltipPortalProps = Omit<\n  React.ComponentProps<typeof TooltipPrimitive.Portal>,\n  'forceMount'\n>;\n\nfunction TooltipPortal(props: TooltipPortalProps) {\n  const { isOpen } = useTooltip();\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <TooltipPrimitive.Portal\n          forceMount\n          data-slot=\"tooltip-portal\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  );\n}\n\ntype TooltipContentProps = Omit<\n  React.ComponentProps<typeof TooltipPrimitive.Content>,\n  'forceMount' | 'asChild'\n> &\n  HTMLMotionProps<'div'>;\n\nfunction TooltipContent({\n  onEscapeKeyDown,\n  onPointerDownOutside,\n  side,\n  sideOffset,\n  align,\n  alignOffset,\n  avoidCollisions,\n  collisionBoundary,\n  collisionPadding,\n  arrowPadding,\n  sticky,\n  hideWhenDetached,\n  transition = { type: 'spring', stiffness: 300, damping: 25 },\n  ...props\n}: TooltipContentProps) {\n  return (\n    <TooltipPrimitive.Content\n      asChild\n      forceMount\n      align={align}\n      alignOffset={alignOffset}\n      side={side}\n      sideOffset={sideOffset}\n      avoidCollisions={avoidCollisions}\n      collisionBoundary={collisionBoundary}\n      collisionPadding={collisionPadding}\n      arrowPadding={arrowPadding}\n      sticky={sticky}\n      hideWhenDetached={hideWhenDetached}\n    >\n      <motion.div\n        key=\"popover-content\"\n        data-slot=\"popover-content\"\n        initial={{ opacity: 0, scale: 0.5 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.5 }}\n        transition={transition}\n        {...props}\n      />\n    </TooltipPrimitive.Content>\n  );\n}\n\ntype TooltipArrowProps = React.ComponentProps<typeof TooltipPrimitive.Arrow>;\n\nfunction TooltipArrow(props: TooltipArrowProps) {\n  return <TooltipPrimitive.Arrow data-slot=\"tooltip-arrow\" {...props} />;\n}\n\nexport {\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipPortal,\n  TooltipContent,\n  TooltipArrow,\n  useTooltip,\n  type TooltipProviderProps,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipPortalProps,\n  type TooltipContentProps,\n  type TooltipArrowProps,\n  type TooltipContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/radix/tooltip/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-radix-tooltip';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-radix-tooltip',
  },
  'primitives-texts-counting-number': {
    name: 'primitives-texts-counting-number',
    description: 'A counting number animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/counting-number/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/counting-number.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { useMotionValue, useSpring, type SpringOptions } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\ntype CountingNumberProps = Omit<React.ComponentProps<'span'>, 'children'> & {\n  number: number;\n  fromNumber?: number;\n  padStart?: boolean;\n  decimalSeparator?: string;\n  decimalPlaces?: number;\n  transition?: SpringOptions;\n  delay?: number;\n} & UseIsInViewOptions;\n\nfunction CountingNumber({\n  ref,\n  number,\n  fromNumber = 0,\n  padStart = false,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  decimalSeparator = '.',\n  transition = { stiffness: 90, damping: 50 },\n  decimalPlaces = 0,\n  delay = 0,\n  ...props\n}: CountingNumberProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const numberStr = number.toString();\n  const decimals =\n    typeof decimalPlaces === 'number'\n      ? decimalPlaces\n      : numberStr.includes('.')\n        ? (numberStr.split('.')[1]?.length ?? 0)\n        : 0;\n\n  const motionVal = useMotionValue(fromNumber);\n  const springVal = useSpring(motionVal, transition);\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (isInView) motionVal.set(number);\n    }, delay);\n\n    return () => clearTimeout(timeoutId);\n  }, [isInView, number, motionVal, delay]);\n\n  React.useEffect(() => {\n    const unsubscribe = springVal.on('change', (latest) => {\n      if (localRef.current) {\n        let formatted =\n          decimals > 0\n            ? latest.toFixed(decimals)\n            : Math.round(latest).toString();\n\n        if (decimals > 0) {\n          formatted = formatted.replace('.', decimalSeparator);\n        }\n\n        if (padStart) {\n          const finalIntLength = Math.floor(Math.abs(number)).toString().length;\n          const [intPart, fracPart] = formatted.split(decimalSeparator);\n          const paddedInt = intPart?.padStart(finalIntLength, '0') ?? '';\n          formatted = fracPart\n            ? `${paddedInt}${decimalSeparator}${fracPart}`\n            : paddedInt;\n        }\n\n        localRef.current.textContent = formatted;\n      }\n    });\n    return () => unsubscribe();\n  }, [springVal, decimals, padStart, number, decimalSeparator]);\n\n  const finalIntLength = Math.floor(Math.abs(number)).toString().length;\n  const initialText = padStart\n    ? '0'.padStart(finalIntLength, '0') +\n      (decimals > 0 ? decimalSeparator + '0'.repeat(decimals) : '')\n    : '0' + (decimals > 0 ? decimalSeparator + '0'.repeat(decimals) : '');\n\n  return (\n    <span ref={localRef} data-slot=\"counting-number\" {...props}>\n      {initialText}\n    </span>\n  );\n}\n\nexport { CountingNumber, type CountingNumberProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/counting-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-counting-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-counting-number',
  },
  'primitives-texts-gradient': {
    name: 'primitives-texts-gradient',
    description: 'A gradient text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/primitives/texts/gradient/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/gradient.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\ntype GradientTextProps = Omit<React.ComponentProps<'span'>, 'children'> & {\n  text: string;\n  gradient?: string;\n  neon?: boolean;\n  transition?: Transition;\n};\n\nfunction GradientText({\n  text,\n  style,\n  gradient = 'linear-gradient(90deg, #3b82f6 0%, #a855f7 20%, #ec4899 50%, #a855f7 80%, #3b82f6 100%)',\n  neon = false,\n  transition = { duration: 50, repeat: Infinity, ease: 'linear' },\n  ...props\n}: GradientTextProps) {\n  const baseStyle: React.CSSProperties = {\n    backgroundImage: gradient,\n    margin: 0,\n    color: 'transparent',\n    backgroundClip: 'text',\n    backgroundSize: '700% 100%',\n    backgroundPosition: '0% 0%',\n  };\n\n  return (\n    <span\n      data-slot=\"gradient-text\"\n      style={{ position: 'relative', display: 'inline-block', ...style }}\n      {...props}\n    >\n      <motion.span\n        style={baseStyle}\n        initial={{ backgroundPosition: '0% 0%' }}\n        animate={{ backgroundPosition: '500% 100%' }}\n        transition={transition}\n      >\n        {text}\n      </motion.span>\n\n      {neon && (\n        <motion.span\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            mixBlendMode: 'plus-lighter',\n            filter: 'blur(8px)',\n            ...baseStyle,\n          }}\n          initial={{ backgroundPosition: '0% 0%' }}\n          animate={{ backgroundPosition: '500% 100%' }}\n          transition={transition}\n        >\n          {text}\n        </motion.span>\n      )}\n    </span>\n  );\n}\n\nexport { GradientText, type GradientTextProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/gradient/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-gradient';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-gradient',
  },
  'primitives-texts-highlight': {
    name: 'primitives-texts-highlight',
    description: 'A highlight text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/highlight/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/highlight.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps, type Transition } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\ntype HighlightTextProps = Omit<HTMLMotionProps<'span'>, 'children'> & {\n  text: string;\n  delay?: number;\n} & UseIsInViewOptions;\n\nfunction HighlightText({\n  ref,\n  text,\n  style,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  transition = { duration: 2, ease: 'easeInOut' },\n  delay = 0,\n  ...props\n}: HighlightTextProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  return (\n    <motion.span\n      ref={localRef}\n      data-slot=\"highlight-text\"\n      initial={{ backgroundSize: '0% 100%' }}\n      animate={isInView ? { backgroundSize: '100% 100%' } : undefined}\n      transition={{\n        ...transition,\n        delay: (transition?.delay ?? 0) + delay / 1000,\n      }}\n      style={{\n        position: 'relative',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'left center',\n        display: 'inline-block',\n        ...style,\n      }}\n      {...props}\n    >\n      {text}\n    </motion.span>\n  );\n}\n\nexport { HighlightText, type HighlightTextProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/highlight/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-highlight';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-highlight',
  },
  'primitives-texts-rolling': {
    name: 'primitives-texts-rolling',
    description: 'A rolling text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/rolling/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/rolling.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\nconst formatCharacter = (char: string) => (char === ' ' ? '\\u00A0' : char);\n\nconst CHAR_STYLE: React.CSSProperties = {\n  position: 'absolute',\n  display: 'inline-block',\n  backfaceVisibility: 'hidden',\n};\n\ntype RollingTextProps = Omit<React.ComponentProps<'span'>, 'children'> & {\n  text: string;\n  transition?: Transition;\n  delay?: number;\n} & UseIsInViewOptions;\n\nfunction RollingText({\n  ref,\n  text,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  transition = { duration: 0.5, delay: 0.1, ease: 'easeOut' },\n  delay = 0,\n  ...props\n}: RollingTextProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const parts = React.useMemo(() => text.split(/(\\s+)/), [text]);\n  const stepDelay = transition?.delay ?? 0;\n\n  let charIdx = 0;\n\n  return (\n    <span ref={localRef} data-slot=\"rolling-text\" {...props}>\n      {parts.map((part, wi) => {\n        if (/^\\s+$/.test(part)) {\n          return <span key={`space-${wi}`}>{part}</span>;\n        }\n\n        const chars = Array.from(part);\n        return (\n          <span\n            key={`word-${wi}`}\n            style={{ display: 'inline-block', whiteSpace: 'nowrap' }}\n          >\n            {chars.map((char, ci) => {\n              const thisIdx = charIdx++;\n              const charDelay = delay / 1000 + thisIdx * stepDelay;\n              return (\n                <span\n                  key={`c-${wi}-${ci}`}\n                  style={{\n                    position: 'relative',\n                    display: 'inline-block',\n                    perspective: '9999999px',\n                    transformStyle: 'preserve-3d',\n                    width: 'auto',\n                  }}\n                  aria-hidden=\"true\"\n                >\n                  <motion.span\n                    style={{\n                      ...CHAR_STYLE,\n                      transformOrigin: '50% 25%',\n                    }}\n                    initial={{ rotateX: 0 }}\n                    animate={isInView ? { rotateX: 90 } : undefined}\n                    transition={{\n                      ...transition,\n                      delay: charDelay,\n                    }}\n                  >\n                    {formatCharacter(char)}\n                  </motion.span>\n                  <motion.span\n                    style={{\n                      ...CHAR_STYLE,\n                      transformOrigin: '50% 100%',\n                    }}\n                    initial={{ rotateX: 90 }}\n                    animate={isInView ? { rotateX: 0 } : undefined}\n                    transition={{\n                      ...transition,\n                      delay: charDelay + 0.3,\n                    }}\n                  >\n                    {formatCharacter(char)}\n                  </motion.span>\n                  <span style={{ visibility: 'hidden' }}>\n                    {formatCharacter(char)}\n                  </span>\n                </span>\n              );\n            })}\n          </span>\n        );\n      })}\n\n      <span className=\"sr-only\">{text}</span>\n    </span>\n  );\n}\n\nexport { RollingText, type RollingTextProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/rolling/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-rolling';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-rolling',
  },
  'primitives-texts-rotating': {
    name: 'primitives-texts-rotating',
    description: 'A rotating text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-is-in-view',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/texts/rotating/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/rotating.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, AnimatePresence, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype RotatingTextContextType = {\n  currentText: string;\n  y: number;\n  isInView: boolean;\n};\n\nconst [RotatingTextProvider, useRotatingText] =\n  getStrictContext<RotatingTextContextType>('RotatingTextContext');\n\ntype RotatingTextContainerProps = React.ComponentProps<'div'> & {\n  text: string | string[];\n  duration?: number;\n  y?: number;\n  delay?: number;\n} & UseIsInViewOptions;\n\nfunction RotatingTextContainer({\n  ref,\n  text,\n  y = -50,\n  duration = 2000,\n  delay = 0,\n  style,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  ...props\n}: RotatingTextContainerProps) {\n  const [index, setIndex] = React.useState(0);\n\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  React.useEffect(() => {\n    if (!Array.isArray(text)) return;\n    if (inView && !isInView) return;\n\n    let intervalId: ReturnType<typeof setInterval> | undefined;\n\n    const timeoutId = setTimeout(() => {\n      setIndex((prev) => (prev + 1) % text.length);\n      intervalId = setInterval(\n        () => setIndex((prev) => (prev + 1) % text.length),\n        duration,\n      );\n    }, delay);\n\n    return () => {\n      clearTimeout(timeoutId);\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [text, duration, delay, inView, isInView]);\n\n  const currentText = Array.isArray(text) ? text[index] : text;\n\n  return (\n    <RotatingTextProvider value={{ currentText, y, isInView }}>\n      <div\n        ref={localRef}\n        style={{\n          overflow: 'hidden',\n          paddingBlock: '0.25rem',\n          ...style,\n        }}\n        {...props}\n      />\n    </RotatingTextProvider>\n  );\n}\n\ntype RotatingTextProps = Omit<HTMLMotionProps<'div'>, 'children'>;\n\nfunction RotatingText({\n  transition = { duration: 0.3, ease: 'easeOut' },\n  ...props\n}: RotatingTextProps) {\n  const { currentText, y, isInView } = useRotatingText();\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      {isInView && (\n        <motion.div\n          key={currentText}\n          transition={{ duration: 0.3, ease: 'easeOut' }}\n          initial={{ opacity: 0, y: -y }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y }}\n          {...props}\n        >\n          {currentText}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n\nexport {\n  RotatingTextContainer,\n  RotatingText,\n  useRotatingText,\n  type RotatingTextContainerProps,\n  type RotatingTextProps,\n  type RotatingTextContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/rotating/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-rotating';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-rotating',
  },
  'primitives-texts-scrolling-number': {
    name: 'primitives-texts-scrolling-number',
    description: 'A scrolling number animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-is-in-view',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/texts/scrolling-number/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/scrolling-number.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  type MotionValue,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\nconst formatter = new Intl.NumberFormat('en-US');\n\nfunction generateRange(\n  max: number,\n  step: number,\n  sideItemsCount: number,\n): number[] {\n  const result: number[] = [];\n  const end = max + sideItemsCount * step;\n  for (let value = end; value >= 0; value -= step) {\n    result.push(value);\n  }\n  return result;\n}\n\ntype ScrollingNumberDirection = 'ltr' | 'rtl' | 'ttb' | 'btt';\n\ntype ScrollingNumberContextType = {\n  number: number;\n  step: number;\n  itemsSize: number;\n  sideItemsCount: number;\n  displayedItemsCount: number;\n  isInView: boolean;\n  direction: ScrollingNumberDirection;\n  isVertical: boolean;\n  range: number[];\n  onNumberChange?: (value: number) => void;\n};\n\nconst [ScrollingNumberProvider, useScrollingNumber] =\n  getStrictContext<ScrollingNumberContextType>('ScrollingNumberContext');\n\ntype ScrollingNumberContainerProps = React.ComponentProps<'div'> & {\n  number: number;\n  step: number;\n  itemsSize?: number;\n  sideItemsCount?: number;\n  direction?: ScrollingNumberDirection;\n  onNumberChange?: (value: number) => void;\n} & UseIsInViewOptions;\n\nfunction ScrollingNumberContainer({\n  ref,\n  number,\n  step,\n  itemsSize = 30,\n  sideItemsCount = 2,\n  direction = 'btt',\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  onNumberChange,\n  style,\n  ...props\n}: ScrollingNumberContainerProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLDivElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const displayedItemsCount = React.useMemo(\n    () => 1 + sideItemsCount * 2,\n    [sideItemsCount],\n  );\n  const isVertical = React.useMemo(\n    () => direction === 'btt' || direction === 'ttb',\n    [direction],\n  );\n  const range = React.useMemo(\n    () => generateRange(number, step, sideItemsCount),\n    [number, step, sideItemsCount],\n  );\n\n  return (\n    <ScrollingNumberProvider\n      value={{\n        number,\n        step,\n        itemsSize,\n        sideItemsCount,\n        displayedItemsCount,\n        isInView,\n        direction,\n        isVertical,\n        range,\n        onNumberChange,\n      }}\n    >\n      <div\n        ref={localRef}\n        data-slot=\"scrolling-number-container\"\n        data-direction={direction}\n        style={{\n          position: 'relative',\n          overflow: 'hidden',\n          height: isVertical ? itemsSize * displayedItemsCount : undefined,\n          width: !isVertical ? itemsSize * displayedItemsCount : undefined,\n          ...style,\n        }}\n        {...props}\n      />\n    </ScrollingNumberProvider>\n  );\n}\n\ntype ScrollingNumberHighlightProps = React.ComponentProps<'div'>;\n\nfunction ScrollingNumberHighlight({\n  style,\n  ...props\n}: ScrollingNumberHighlightProps) {\n  const { itemsSize, isVertical, direction } = useScrollingNumber();\n  return (\n    <div\n      data-slot=\"scrolling-number-highlight\"\n      data-direction={direction}\n      style={{\n        position: 'absolute',\n        height: isVertical ? itemsSize : undefined,\n        width: !isVertical ? itemsSize : undefined,\n        left: !isVertical ? '50%' : undefined,\n        top: isVertical ? '50%' : undefined,\n        transform: !isVertical ? 'translateX(-50%)' : 'translateY(-50%)',\n        zIndex: 0,\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype ScrollingNumberProps = HTMLMotionProps<'div'> & {\n  delay?: number;\n  onCompleted?: () => void;\n};\n\nfunction ScrollingNumber({\n  transition = { stiffness: 90, damping: 30 },\n  delay = 0,\n  onCompleted,\n  style,\n  ...props\n}: ScrollingNumberProps) {\n  const {\n    itemsSize,\n    sideItemsCount,\n    displayedItemsCount,\n    isInView,\n    direction,\n    isVertical,\n    range,\n    step,\n    number,\n    onNumberChange,\n  } = useScrollingNumber();\n\n  const motionKey: 'x' | 'y' = isVertical ? 'y' : 'x';\n  const initialOffset = itemsSize * sideItemsCount;\n  const travel = itemsSize * (range.length - displayedItemsCount);\n\n  let initialPosition: number;\n  let finalPosition: number;\n\n  switch (direction) {\n    case 'btt':\n      initialPosition = -initialOffset;\n      finalPosition = travel;\n      break;\n    case 'ttb':\n      initialPosition = initialOffset;\n      finalPosition = -travel;\n      break;\n    case 'rtl':\n      initialPosition = -initialOffset;\n      finalPosition = travel;\n      break;\n    case 'ltr':\n      initialPosition = initialOffset;\n      finalPosition = -travel;\n      break;\n    default:\n      initialPosition = -initialOffset;\n      finalPosition = travel;\n  }\n\n  const posMotion: MotionValue<number> = useMotionValue(initialPosition);\n  const posSpring = useSpring(posMotion, transition);\n\n  React.useEffect(() => {\n    if (!isInView) return;\n    const timer = setTimeout(() => {\n      posMotion.set(finalPosition);\n    }, delay);\n    return () => clearTimeout(timer);\n  }, [isInView, finalPosition, posMotion, delay]);\n\n  const currentIndex = useTransform(\n    posSpring,\n    (p) => Math.abs(p) / itemsSize + sideItemsCount,\n  );\n  const currentValue = useTransform(currentIndex, (idx) => idx * step);\n  const snappedValue = useTransform(\n    currentIndex,\n    (idx) => Math.round(idx) * step,\n  );\n\n  const completedTransform = useTransform(\n    currentValue,\n    (val) => val >= number * 0.99,\n  );\n\n  React.useEffect(() => {\n    const unsubscribe = completedTransform.on('change', (latest) => {\n      if (latest) onCompleted?.();\n    });\n    return unsubscribe;\n  }, [completedTransform, onCompleted]);\n\n  React.useEffect(() => {\n    const unsub = snappedValue.on('change', (val) => {\n      const bounded = val < 0 ? 0 : val > number ? number : val;\n      onNumberChange?.(bounded);\n    });\n    return unsub;\n  }, [snappedValue, onNumberChange, number]);\n\n  const directionMap: Record<\n    ScrollingNumberDirection,\n    React.CSSProperties['flexDirection']\n  > = {\n    btt: 'column',\n    ttb: 'column-reverse',\n    rtl: 'row',\n    ltr: 'row-reverse',\n  };\n\n  return (\n    <motion.div\n      data-slot=\"scrolling-number\"\n      style={{\n        position: 'absolute',\n        top: direction === 'ttb' ? 0 : undefined,\n        bottom: direction === 'btt' ? 0 : undefined,\n        left: direction === 'ltr' ? 0 : undefined,\n        right: direction === 'rtl' ? 0 : undefined,\n        width: isVertical ? '100%' : undefined,\n        height: !isVertical ? '100%' : undefined,\n        display: 'flex',\n        zIndex: 1,\n        flexDirection: directionMap[direction],\n        [motionKey]: posSpring,\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\ntype ScrollingNumberItemsProps = Omit<React.ComponentProps<'div'>, 'children'>;\n\nfunction ScrollingNumberItems({ style, ...props }: ScrollingNumberItemsProps) {\n  const { range, direction, itemsSize, isVertical } = useScrollingNumber();\n  return range.map((value) => (\n    <div\n      key={value}\n      data-slot=\"scrolling-number-item\"\n      data-value={value}\n      data-direction={direction}\n      style={{\n        height: isVertical ? itemsSize : undefined,\n        width: !isVertical ? itemsSize : undefined,\n        ...style,\n      }}\n      {...props}\n    >\n      {formatter.format(value)}\n    </div>\n  ));\n}\n\nexport {\n  ScrollingNumberContainer,\n  ScrollingNumber,\n  ScrollingNumberHighlight,\n  ScrollingNumberItems,\n  useScrollingNumber,\n  type ScrollingNumberContainerProps,\n  type ScrollingNumberProps,\n  type ScrollingNumberHighlightProps,\n  type ScrollingNumberItemsProps,\n  type ScrollingNumberDirection,\n  type ScrollingNumberContextType,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/scrolling-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-scrolling-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-scrolling-number',
  },
  'primitives-texts-shimmering': {
    name: 'primitives-texts-shimmering',
    description: 'A shimmering text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/shimmering/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/shimmering.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\ntype ShimmeringTextProps = Omit<HTMLMotionProps<'span'>, 'children'> & {\n  text: string;\n  duration?: number;\n  wave?: boolean;\n  color?: string;\n  shimmeringColor?: string;\n};\n\nfunction ShimmeringText({\n  text,\n  duration = 1,\n  transition,\n  wave = false,\n  color = 'var(--color-neutral-500)',\n  shimmeringColor = 'var(--color-neutral-300)',\n  ...props\n}: ShimmeringTextProps) {\n  return (\n    <motion.span\n      style={\n        {\n          '--shimmering-color': shimmeringColor,\n          '--color': color,\n          color: 'var(--color)',\n          position: 'relative',\n          display: 'inline-block',\n          perspective: '500px',\n        } as React.CSSProperties\n      }\n      {...props}\n    >\n      {text?.split('')?.map((char, i) => (\n        <motion.span\n          key={i}\n          style={{\n            display: 'inline-block',\n            whiteSpace: 'pre',\n            transformStyle: 'preserve-3d',\n          }}\n          initial={{\n            ...(wave\n              ? {\n                  scale: 1,\n                  rotateY: 0,\n                }\n              : {}),\n            color: 'var(--color)',\n          }}\n          animate={{\n            ...(wave\n              ? {\n                  x: [0, 5, 0],\n                  y: [0, -5, 0],\n                  scale: [1, 1.1, 1],\n                  rotateY: [0, 15, 0],\n                }\n              : {}),\n            color: ['var(--color)', 'var(--shimmering-color)', 'var(--color)'],\n          }}\n          transition={{\n            duration,\n            repeat: Infinity,\n            repeatType: 'loop',\n            repeatDelay: text.length * 0.05,\n            delay: (i * duration) / text.length,\n            ease: 'easeInOut',\n            ...transition,\n          }}\n        >\n          {char}\n        </motion.span>\n      ))}\n    </motion.span>\n  );\n}\n\nexport { ShimmeringText, type ShimmeringTextProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/shimmering/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-shimmering';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-shimmering',
  },
  'primitives-texts-sliding-number': {
    name: 'primitives-texts-sliding-number',
    description: 'A sliding number animation.',
    type: 'registry:ui',
    dependencies: ['motion', 'react-use-measure'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/sliding-number/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/sliding-number.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  useSpring,\n  useTransform,\n  motion,\n  useMotionValue,\n  type MotionValue,\n  type SpringOptions,\n} from 'motion/react';\nimport useMeasure from 'react-use-measure';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\ntype SlidingNumberRollerProps = {\n  prevValue: number;\n  value: number;\n  place: number;\n  transition: SpringOptions;\n  delay?: number;\n};\n\nfunction SlidingNumberRoller({\n  prevValue,\n  value,\n  place,\n  transition,\n  delay = 0,\n}: SlidingNumberRollerProps) {\n  const startNumber = Math.floor(prevValue / place) % 10;\n  const targetNumber = Math.floor(value / place) % 10;\n  const animatedValue = useSpring(startNumber, transition);\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      animatedValue.set(targetNumber);\n    }, delay);\n    return () => clearTimeout(timeoutId);\n  }, [targetNumber, animatedValue, delay]);\n\n  const [measureRef, { height }] = useMeasure();\n\n  return (\n    <span\n      ref={measureRef}\n      data-slot=\"sliding-number-roller\"\n      style={{\n        position: 'relative',\n        display: 'inline-block',\n        width: '1ch',\n        overflowX: 'visible',\n        overflowY: 'clip',\n        lineHeight: 1,\n        fontVariantNumeric: 'tabular-nums',\n      }}\n    >\n      <span style={{ visibility: 'hidden' }}>0</span>\n      {Array.from({ length: 10 }, (_, i) => (\n        <SlidingNumberDisplay\n          key={i}\n          motionValue={animatedValue}\n          number={i}\n          height={height}\n          transition={transition}\n        />\n      ))}\n    </span>\n  );\n}\n\ntype SlidingNumberDisplayProps = {\n  motionValue: MotionValue<number>;\n  number: number;\n  height: number;\n  transition: SpringOptions;\n};\n\nfunction SlidingNumberDisplay({\n  motionValue,\n  number,\n  height,\n  transition,\n}: SlidingNumberDisplayProps) {\n  const y = useTransform(motionValue, (latest) => {\n    if (!height) return 0;\n    const currentNumber = latest % 10;\n    const offset = (10 + number - currentNumber) % 10;\n    let translateY = offset * height;\n    if (offset > 5) translateY -= 10 * height;\n    return translateY;\n  });\n\n  if (!height) {\n    return (\n      <span style={{ visibility: 'hidden', position: 'absolute' }}>\n        {number}\n      </span>\n    );\n  }\n\n  return (\n    <motion.span\n      data-slot=\"sliding-number-display\"\n      style={{\n        y,\n        position: 'absolute',\n        inset: 0,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}\n      transition={{ ...transition, type: 'spring' }}\n    >\n      {number}\n    </motion.span>\n  );\n}\n\ntype SlidingNumberProps = Omit<React.ComponentProps<'span'>, 'children'> & {\n  number: number;\n  fromNumber?: number;\n  onNumberChange?: (number: number) => void;\n  padStart?: boolean;\n  decimalSeparator?: string;\n  decimalPlaces?: number;\n  transition?: SpringOptions;\n  delay?: number;\n} & UseIsInViewOptions;\n\nfunction SlidingNumber({\n  ref,\n  number,\n  fromNumber,\n  onNumberChange,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  padStart = false,\n  decimalSeparator = '.',\n  decimalPlaces = 0,\n  transition = { stiffness: 200, damping: 20, mass: 0.4 },\n  delay = 0,\n  ...props\n}: SlidingNumberProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const prevNumberRef = React.useRef<number>(0);\n\n  const motionVal = fromNumber != null ? useMotionValue(fromNumber) : null;\n  const springVal = motionVal\n    ? useSpring(motionVal, { stiffness: 90, damping: 50 })\n    : null;\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (isInView && motionVal) motionVal.set(number);\n    }, delay);\n\n    return () => clearTimeout(timeoutId);\n  }, [isInView, number, motionVal, delay]);\n\n  const [effectiveNumber, setEffectiveNumber] = React.useState(0);\n\n  React.useEffect(() => {\n    if (fromNumber !== undefined && springVal) {\n      const inferredDecimals =\n        typeof decimalPlaces === 'number' && decimalPlaces >= 0\n          ? decimalPlaces\n          : (() => {\n              const s = String(number);\n              const idx = s.indexOf('.');\n              return idx >= 0 ? s.length - idx - 1 : 0;\n            })();\n\n      const factor = Math.pow(10, inferredDecimals);\n\n      const unsubscribe = springVal.on('change', (latest: number) => {\n        const newValue =\n          inferredDecimals > 0\n            ? Math.round(latest * factor) / factor\n            : Math.round(latest);\n\n        if (effectiveNumber !== newValue) {\n          setEffectiveNumber(newValue);\n          onNumberChange?.(newValue);\n        }\n      });\n      return () => unsubscribe();\n    } else {\n      setEffectiveNumber(!isInView ? 0 : Math.abs(Number(number)));\n    }\n  }, [\n    springVal,\n    isInView,\n    number,\n    fromNumber,\n    decimalPlaces,\n    onNumberChange,\n    effectiveNumber,\n  ]);\n\n  const formatNumber = React.useCallback(\n    (num: number) =>\n      decimalPlaces != null ? num.toFixed(decimalPlaces) : num.toString(),\n    [decimalPlaces],\n  );\n\n  const numberStr = formatNumber(effectiveNumber);\n  const [newIntStrRaw, newDecStrRaw = ''] = numberStr.split('.');\n\n  const finalIntLength = padStart\n    ? Math.max(\n        Math.floor(Math.abs(number)).toString().length,\n        newIntStrRaw.length,\n      )\n    : newIntStrRaw.length;\n\n  const newIntStr = padStart\n    ? newIntStrRaw.padStart(finalIntLength, '0')\n    : newIntStrRaw;\n\n  const prevFormatted = formatNumber(prevNumberRef.current);\n  const [prevIntStrRaw = '', prevDecStrRaw = ''] = prevFormatted.split('.');\n  const prevIntStr = padStart\n    ? prevIntStrRaw.padStart(finalIntLength, '0')\n    : prevIntStrRaw;\n\n  const adjustedPrevInt = React.useMemo(() => {\n    return prevIntStr.length > finalIntLength\n      ? prevIntStr.slice(-finalIntLength)\n      : prevIntStr.padStart(finalIntLength, '0');\n  }, [prevIntStr, finalIntLength]);\n\n  const adjustedPrevDec = React.useMemo(() => {\n    if (!newDecStrRaw) return '';\n    return prevDecStrRaw.length > newDecStrRaw.length\n      ? prevDecStrRaw.slice(0, newDecStrRaw.length)\n      : prevDecStrRaw.padEnd(newDecStrRaw.length, '0');\n  }, [prevDecStrRaw, newDecStrRaw]);\n\n  React.useEffect(() => {\n    if (isInView) prevNumberRef.current = effectiveNumber;\n  }, [effectiveNumber, isInView]);\n\n  const intPlaces = React.useMemo(\n    () =>\n      Array.from({ length: finalIntLength }, (_, i) =>\n        Math.pow(10, finalIntLength - i - 1),\n      ),\n    [finalIntLength],\n  );\n  const decPlaces = React.useMemo(\n    () =>\n      newDecStrRaw\n        ? Array.from({ length: newDecStrRaw.length }, (_, i) =>\n            Math.pow(10, newDecStrRaw.length - i - 1),\n          )\n        : [],\n    [newDecStrRaw],\n  );\n\n  const newDecValue = newDecStrRaw ? parseInt(newDecStrRaw, 10) : 0;\n  const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0;\n\n  return (\n    <span\n      ref={localRef}\n      data-slot=\"sliding-number\"\n      style={{\n        display: 'inline-flex',\n        alignItems: 'center',\n      }}\n      {...props}\n    >\n      {isInView && Number(number) < 0 && (\n        <span style={{ marginRight: '0.25rem' }}>-</span>\n      )}\n\n      {intPlaces.map((place) => (\n        <SlidingNumberRoller\n          key={`int-${place}`}\n          prevValue={parseInt(adjustedPrevInt, 10)}\n          value={parseInt(newIntStr ?? '0', 10)}\n          place={place}\n          transition={transition}\n          delay={delay}\n        />\n      ))}\n\n      {newDecStrRaw && (\n        <>\n          <span>{decimalSeparator}</span>\n          {decPlaces.map((place) => (\n            <SlidingNumberRoller\n              key={`dec-${place}`}\n              prevValue={prevDecValue}\n              value={newDecValue}\n              place={place}\n              transition={transition}\n              delay={delay}\n            />\n          ))}\n        </>\n      )}\n    </span>\n  );\n}\n\nexport { SlidingNumber, type SlidingNumberProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/sliding-number/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-sliding-number';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-sliding-number',
  },
  'primitives-texts-splitting': {
    name: 'primitives-texts-splitting',
    description: 'A splitting text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/hooks-use-is-in-view'],
    files: [
      {
        path: 'registry/primitives/texts/splitting/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/splitting.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  type Variants,\n  type TargetAndTransition,\n  type HTMLMotionProps,\n  type Transition,\n} from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\n\ntype DefaultSplittingTextProps = Omit<\n  HTMLMotionProps<'div'>,\n  'children' | 'initial' | 'animate' | 'transition'\n> & {\n  initial?: TargetAndTransition;\n  animate?: TargetAndTransition;\n  transition?: Transition;\n  stagger?: number;\n  delay?: number;\n  disableAnimation?: boolean;\n} & UseIsInViewOptions;\n\ntype CharsOrWordsSplittingTextProps = DefaultSplittingTextProps & {\n  type?: 'chars' | 'words';\n  text: string;\n};\n\ntype LinesSplittingTextProps = DefaultSplittingTextProps & {\n  type?: 'lines';\n  text: string[];\n};\n\ntype SplittingTextProps =\n  | CharsOrWordsSplittingTextProps\n  | LinesSplittingTextProps;\n\nconst SplittingText: React.FC<SplittingTextProps> = ({\n  ref,\n  text,\n  type = 'chars',\n  initial = { x: 150, opacity: 0 },\n  animate = { x: 0, opacity: 1 },\n  transition = { duration: 0.7, ease: 'easeOut' },\n  stagger,\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  disableAnimation = false,\n  ...props\n}) => {\n  const items = React.useMemo<React.ReactNode[]>(() => {\n    if (Array.isArray(text)) {\n      return text.flatMap((line, i) => [\n        <React.Fragment key={`line-${i}`}>{line}</React.Fragment>,\n        i < text.length - 1 ? <br key={`br-${i}`} /> : null,\n      ]);\n    }\n\n    if (type === 'words') {\n      const tokens = text.match(/\\S+\\s*/g) || [];\n      return tokens.map((token, i) => (\n        <React.Fragment key={i}>{token}</React.Fragment>\n      ));\n    }\n\n    return text\n      .split('')\n      .map((char, i) => <React.Fragment key={i}>{char}</React.Fragment>);\n  }, [text, type]);\n\n  const containerVariants: Variants = {\n    hidden: {},\n    visible: {\n      transition: {\n        delayChildren: delay / 1000,\n        staggerChildren:\n          stagger ?? (type === 'chars' ? 0.05 : type === 'words' ? 0.2 : 0.3),\n      },\n    },\n  };\n\n  const itemVariants: Variants = {\n    hidden: disableAnimation ? animate : initial,\n    visible: {\n      ...animate,\n      transition: disableAnimation ? { duration: 0 } : transition,\n    },\n  };\n\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  if (Array.isArray(text)) {\n    return (\n      <motion.span\n        ref={localRef}\n        initial=\"hidden\"\n        animate={isInView ? 'visible' : 'hidden'}\n        variants={containerVariants}\n        {...props}\n      >\n        {text.map((line, i) => (\n          <React.Fragment key={`line-${i}`}>\n            <motion.span\n              variants={itemVariants}\n              style={{ display: 'inline-block' }}\n            >\n              {line}\n            </motion.span>\n            {i < text.length - 1 ? <br /> : null}\n          </React.Fragment>\n        ))}\n      </motion.span>\n    );\n  }\n\n  if (type === 'words') {\n    const tokens = (text as string).match(/\\S+\\s*/g) || [];\n    return (\n      <motion.span\n        ref={localRef}\n        initial=\"hidden\"\n        animate={isInView ? 'visible' : 'hidden'}\n        variants={containerVariants}\n        {...props}\n      >\n        {tokens.map((token, i) => (\n          <React.Fragment key={i}>\n            <motion.span\n              variants={itemVariants}\n              style={{ display: 'inline-block', whiteSpace: 'normal' }}\n            >\n              {token.trim()}\n            </motion.span>\n            {/\\s$/.test(token) ? ' ' : null}\n          </React.Fragment>\n        ))}\n      </motion.span>\n    );\n  }\n\n  const tokens = (text as string).split(/(\\s+)/);\n  const perChar = stagger ?? 0.05;\n  const baseDelaySec = (delay ?? 0) / 1000;\n\n  let globalIndex = 0;\n\n  return (\n    <motion.span\n      ref={localRef}\n      initial=\"hidden\"\n      animate={isInView ? 'visible' : 'hidden'}\n      variants={{\n        hidden: {},\n        visible: { transition: {} },\n      }}\n      {...props}\n    >\n      {tokens.map((tok, wi) => {\n        if (/^\\s+$/.test(tok)) {\n          return <span key={`space-${wi}`}>{tok}</span>;\n        }\n        const chars = Array.from(tok);\n        const wordDelay = baseDelaySec + perChar * globalIndex;\n        globalIndex += chars.length;\n\n        return (\n          <motion.span\n            key={`word-${wi}`}\n            style={{ display: 'inline-block', whiteSpace: 'nowrap' }}\n            variants={{}}\n            transition={{ delayChildren: wordDelay, staggerChildren: perChar }}\n            initial=\"hidden\"\n            animate={isInView ? 'visible' : 'hidden'}\n          >\n            {chars.map((ch, ci) => (\n              <motion.span\n                key={`ch-${wi}-${ci}`}\n                variants={itemVariants}\n                style={{ display: 'inline-block', whiteSpace: 'pre' }}\n              >\n                {ch}\n              </motion.span>\n            ))}\n          </motion.span>\n        );\n      })}\n    </motion.span>\n  );\n};\n\nexport { SplittingText, type SplittingTextProps };",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/splitting/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-splitting';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-splitting',
  },
  'primitives-texts-typing': {
    name: 'primitives-texts-typing',
    description: 'A typing text animation.',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/hooks-use-is-in-view',
      'https://animate-ui.com/r/hooks-use-strict-context',
    ],
    files: [
      {
        path: 'registry/primitives/texts/typing/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/primitives/texts/typing.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport {\n  useIsInView,\n  type UseIsInViewOptions,\n} from '@/components/animate-ui/hooks/use-is-in-view';\nimport { getStrictContext } from '@/components/animate-ui/hooks/use-strict-context';\n\ntype TypingTextContextType = {\n  isTyping: boolean;\n  setIsTyping: (isTyping: boolean) => void;\n};\n\nconst [TypingTextProvider, useTypingText] =\n  getStrictContext<TypingTextContextType>('TypingTextContext');\n\ntype TypingTextProps = React.ComponentProps<'span'> & {\n  duration?: number;\n  delay?: number;\n  loop?: boolean;\n  holdDelay?: number;\n  text: string | string[];\n} & UseIsInViewOptions;\n\nfunction TypingText({\n  ref,\n  children,\n  duration = 100,\n  delay = 0,\n  inView = false,\n  inViewMargin = '0px',\n  inViewOnce = true,\n  loop = false,\n  holdDelay = 1000,\n  text,\n  ...props\n}: TypingTextProps) {\n  const { ref: localRef, isInView } = useIsInView(\n    ref as React.Ref<HTMLElement>,\n    {\n      inView,\n      inViewOnce,\n      inViewMargin,\n    },\n  );\n\n  const [isTyping, setIsTyping] = React.useState(false);\n  const [started, setStarted] = React.useState(false);\n  const [displayedText, setDisplayedText] = React.useState<string>('');\n\n  React.useEffect(() => {\n    if (isInView) {\n      const timeoutId = setTimeout(() => {\n        setStarted(true);\n      }, delay);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isInView, delay]);\n\n  React.useEffect(() => {\n    if (!started) return;\n\n    const timeoutIds: Array<ReturnType<typeof setTimeout>> = [];\n    const texts: string[] = typeof text === 'string' ? [text] : text;\n\n    const typeText = (str: string, onComplete: () => void) => {\n      setIsTyping(true);\n      let currentIndex = 0;\n      const type = () => {\n        if (currentIndex <= str.length) {\n          setDisplayedText(str.substring(0, currentIndex));\n          currentIndex++;\n          const id = setTimeout(type, duration);\n          timeoutIds.push(id);\n        } else {\n          setIsTyping(false);\n          onComplete();\n        }\n      };\n      type();\n    };\n\n    const eraseText = (str: string, onComplete: () => void) => {\n      setIsTyping(true);\n      let currentIndex = str.length;\n      const erase = () => {\n        if (currentIndex >= 0) {\n          setDisplayedText(str.substring(0, currentIndex));\n          currentIndex--;\n          const id = setTimeout(erase, duration);\n          timeoutIds.push(id);\n        } else {\n          setIsTyping(false);\n          onComplete();\n        }\n      };\n      erase();\n    };\n\n    const animateTexts = (index: number) => {\n      typeText(texts[index] ?? '', () => {\n        const isLast = index === texts.length - 1;\n        if (isLast && !loop) {\n          return;\n        }\n        const id = setTimeout(() => {\n          eraseText(texts[index] ?? '', () => {\n            const nextIndex = isLast ? 0 : index + 1;\n            animateTexts(nextIndex);\n          });\n        }, holdDelay);\n        timeoutIds.push(id);\n      });\n    };\n\n    animateTexts(0);\n\n    return () => {\n      timeoutIds.forEach(clearTimeout);\n    };\n  }, [text, duration, started, loop, holdDelay]);\n\n  return (\n    <TypingTextProvider value={{ isTyping, setIsTyping }}>\n      <span ref={localRef} data-slot=\"typing-text\" {...props}>\n        <motion.span>{displayedText}</motion.span>\n        {children}\n      </span>\n    </TypingTextProvider>\n  );\n}\n\ntype TypingTextCursorProps = Omit<HTMLMotionProps<'span'>, 'children'>;\n\nfunction TypingTextCursor({\n  style,\n  variants,\n  ...props\n}: TypingTextCursorProps) {\n  const { isTyping } = useTypingText();\n\n  return (\n    <motion.span\n      data-slot=\"typing-text-cursor\"\n      variants={{\n        blinking: {\n          opacity: [0, 0, 1, 1],\n          transition: {\n            duration: 1,\n            repeat: Infinity,\n            repeatDelay: 0,\n            ease: 'linear',\n            times: [0, 0.5, 0.5, 1],\n          },\n        },\n        visible: {\n          opacity: 1,\n        },\n        ...variants,\n      }}\n      animate={isTyping ? 'visible' : 'blinking'}\n      style={{\n        display: 'inline-block',\n        height: '16px',\n        transform: 'translateY(2px)',\n        width: '1px',\n        backgroundColor: 'currentColor',\n        ...style,\n      }}\n      {...props}\n    />\n  );\n}\n\nexport {\n  TypingText,\n  TypingTextCursor,\n  type TypingTextProps,\n  type TypingTextCursorProps,\n};",
      },
    ],
    keywords: [],
    component: (function () {
      const LazyComp = React.lazy(async () => {
        const mod = await import(
          '@/registry/primitives/texts/typing/index.tsx'
        );
        const exportName =
          Object.keys(mod).find(
            (key) =>
              typeof mod[key] === 'function' || typeof mod[key] === 'object',
          ) || 'primitives-texts-typing';
        const Comp = mod.default || mod[exportName];
        if (mod.animations) {
          (LazyComp as any).animations = mod.animations;
        }
        return { default: Comp };
      });
      LazyComp.demoProps = {};
      return LazyComp;
    })(),
    command: 'https://animate-ui.com/r/primitives-texts-typing',
  },
};
